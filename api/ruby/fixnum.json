{
  "to_s": "Returns a string containing the representation of +fix+ radix +base+\n(between 2 and 36).\n\n   12345.to_s       #=> \"12345\"\n   12345.to_s(2)    #=> \"11000000111001\"\n   12345.to_s(8)    #=> \"30071\"\n   12345.to_s(10)   #=> \"12345\"\n   12345.to_s(16)   #=> \"3039\"\n   12345.to_s(36)   #=> \"9ix\"",
  "inspect": "Returns a string containing the representation of +fix+ radix +base+\n(between 2 and 36).\n\n   12345.to_s       #=> \"12345\"\n   12345.to_s(2)    #=> \"11000000111001\"\n   12345.to_s(8)    #=> \"30071\"\n   12345.to_s(10)   #=> \"12345\"\n   12345.to_s(16)   #=> \"3039\"\n   12345.to_s(36)   #=> \"9ix\"",
  "-@": "Negates +fix+, which may return a Bignum.",
  "+": "Performs addition: the class of the resulting object depends on the class of\n+numeric+ and on the magnitude of the result. It may return a Bignum.",
  "-": "Performs subtraction: the class of the resulting object depends on the class\nof +numeric+ and on the magnitude of the result. It may return a Bignum.",
  "*": "Performs multiplication: the class of the resulting object depends on the\nclass of +numeric+ and on the magnitude of the result. It may return a\nBignum.",
  "/": "Performs division: the class of the resulting object depends on the class of\n+numeric+ and on the magnitude of the result. It may return a Bignum.",
  "div": "Performs integer division: returns integer result of dividing +fix+ by\n+numeric+.",
  "%": "Returns +fix+ modulo +other+.\n\nSee Numeric#divmod for more information.",
  "modulo": "Returns +fix+ modulo +other+.\n\nSee Numeric#divmod for more information.",
  "divmod": "See Numeric#divmod.",
  "fdiv": "Returns the floating point result of dividing +fix+ by +numeric+.\n\n   654321.fdiv(13731)      #=> 47.6528293642124\n   654321.fdiv(13731.24)   #=> 47.6519964693647",
  "**": "Raises +fix+ to the power of +numeric+, which may be negative or\nfractional.\n\n  2 ** 3      #=> 8\n  2 ** -1     #=> (1/2)\n  2 ** 0.5    #=> 1.4142135623731",
  "abs": "Returns the absolute value of +fix+.\n\n   -12345.abs   #=> 12345\n   12345.abs    #=> 12345",
  "magnitude": "Returns the absolute value of +fix+.\n\n   -12345.abs   #=> 12345\n   12345.abs    #=> 12345",
  "==": "Return +true+ if +fix+ equals +other+ numerically.\n\n  1 == 2      #=> false\n  1 == 1.0    #=> true",
  "===": "Return +true+ if +fix+ equals +other+ numerically.\n\n  1 == 2      #=> false\n  1 == 1.0    #=> true",
  "<=>": "Comparison---Returns +-1+, +0+, ++1+ or +nil+ depending on whether +fix+ is\nless than, equal to, or greater than +numeric+.\n\nThis is the basis for the tests in the Comparable module.\n\n+nil+ is returned if the two values are incomparable.",
  ">": "Returns +true+ if the value of +fix+ is greater than that of +real+.",
  ">=": "Returns +true+ if the value of +fix+ is greater than or equal to that of\n+real+.",
  "<": "Returns +true+ if the value of +fix+ is less than that of +real+.",
  "<=": "Returns +true+ if the value of +fix+ is less than or equal to that of\n+real+.",
  "~": "One's complement: returns a number where each bit is flipped.",
  "&": "Bitwise AND.",
  "|": "Bitwise OR.",
  "^": "Bitwise EXCLUSIVE OR.",
  "[]": "Bit Reference---Returns the +n+th bit in the binary representation of\n+fix+, where <code>fix[0]</code> is the least significant bit.\n\nFor example:\n\n   a = 0b11001100101010\n   30.downto(0) do |n| print a[n] end\n   #=> 0000000000000000011001100101010",
  "<<": "Shifts +fix+ left +count+ positions, or right if +count+ is negative.",
  ">>": "Shifts +fix+ right +count+ positions, or left if +count+ is negative.",
  "to_f": "Converts +fix+ to a Float.",
  "size": "Returns the number of bytes in the machine representation of +fix+.\n\n   1.size            #=> 4\n   -1.size           #=> 4\n   2147483647.size   #=> 4",
  "bit_length": "Returns the number of bits of the value of <i>int</i>.\n\n\"the number of bits\" means that\nthe bit position of the highest bit which is different to the sign bit.\n(The bit position of the bit 2**n is n+1.)\nIf there is no such bit (zero or minus one), zero is returned.\n\nI.e. This method returns ceil(log2(int < 0 ? -int : int+1)).\n\n   (-2**12-1).bit_length     #=> 13\n   (-2**12).bit_length       #=> 12\n   (-2**12+1).bit_length     #=> 12\n   -0x101.bit_length         #=> 9\n   -0x100.bit_length         #=> 8\n   -0xff.bit_length          #=> 8\n   -2.bit_length             #=> 1\n   -1.bit_length             #=> 0\n   0.bit_length              #=> 0\n   1.bit_length              #=> 1\n   0xff.bit_length           #=> 8\n   0x100.bit_length          #=> 9\n   (2**12-1).bit_length      #=> 12\n   (2**12).bit_length        #=> 13\n   (2**12+1).bit_length      #=> 13",
  "zero?": "Returns +true+ if +fix+ is zero.",
  "odd?": "Returns +true+ if +fix+ is an odd number.",
  "even?": "Returns +true+ if +fix+ is an even number.",
  "succ": "Returns the Integer equal to +int+ + 1.\n\n   1.next      #=> 2\n   (-1).next   #=> 0"
}