{
  "open": "Equivalent to StringIO.new except that when it is called with a block, it\nyields with the new instance and closes it, and returns the result which\nreturned from the block.",
  "initialize": "Creates new StringIO instance from with _string_ and _mode_.",
  "initialize_copy": ":nodoc:",
  "reopen": "Reinitializes *strio* with the given <i>other_StrIO</i> or _string_\nand _mode_ (see StringIO#new).",
  "string": "Returns underlying String object, the subject of IO.",
  "string=": "Changes underlying String object, the subject of IO.",
  "lineno": "Returns the current line number in *strio*. The stringio must be\nopened for reading. +lineno+ counts the number of times  +gets+ is\ncalled, rather than the number of newlines  encountered. The two\nvalues will differ if +gets+ is  called with a separator other than\nnewline.  See also the  <code>$.</code> variable.",
  "lineno=": "Manually sets the current line number to the given value.\n<code>$.</code> is updated only on the next read.",
  "binmode": "",
  "close": "Closes strio.  The *strio* is unavailable for any further data\noperations; an +IOError+ is raised if such an attempt is made.",
  "close_read": "Closes the read end of a StringIO.  Will raise an +IOError+ if the\n*strio* is not readable.",
  "close_write": "Closes the write end of a StringIO.  Will raise an  +IOError+ if the\n*strio* is not writeable.",
  "closed?": "Returns +true+ if *strio* is completely closed, +false+ otherwise.",
  "closed_read?": "Returns +true+ if *strio* is not readable, +false+ otherwise.",
  "closed_write?": "Returns +true+ if *strio* is not writable, +false+ otherwise.",
  "eof": "Returns true if *strio* is at end of file. The stringio must be\nopened for reading or an +IOError+ will be raised.",
  "eof?": "Returns true if *strio* is at end of file. The stringio must be\nopened for reading or an +IOError+ will be raised.",
  "fcntl": "",
  "flush": "",
  "fsync": "",
  "pos": "Returns the current offset (in bytes) of *strio*.",
  "pos=": "Seeks to the given position (in bytes) in *strio*.",
  "rewind": "Positions *strio* to the beginning of input, resetting\n+lineno+ to zero.",
  "seek": "Seeks to a given offset _amount_ in the stream according to\nthe value of _whence_ (see IO#seek).",
  "sync": "Returns +true+ always.",
  "sync=": "",
  "tell": "",
  "each": "strio.each_line(sep=$/) {|line| block }    -> strio\n  strio.each_line(limit) {|line| block }     -> strio\n  strio.each_line(sep,limit) {|line| block } -> strio\n  strio.each_line(...)                       -> anEnumerator\n\nSee IO#each.",
  "each_line": "strio.each_line(sep=$/) {|line| block }    -> strio\n  strio.each_line(limit) {|line| block }     -> strio\n  strio.each_line(sep,limit) {|line| block } -> strio\n  strio.each_line(...)                       -> anEnumerator\n\nSee IO#each.",
  "lines": "This is a deprecated alias for <code>each_line</code>.",
  "each_byte": "See IO#each_byte.",
  "bytes": "This is a deprecated alias for #each_byte.",
  "each_char": "See IO#each_char.",
  "chars": "This is a deprecated alias for <code>each_char</code>.",
  "each_codepoint": "See IO#each_codepoint.",
  "codepoints": "This is a deprecated alias for <code>each_codepoint</code>.",
  "getc": "See IO#getc.",
  "ungetc": "Pushes back one character (passed as a parameter) onto *strio*\nsuch that a subsequent buffered read will return it.  There is no\nlimitation for multiple pushbacks including pushing back behind the\nbeginning of the buffer string.",
  "ungetbyte": "See IO#ungetbyte",
  "getbyte": "See IO#getbyte.",
  "gets": "See IO#gets.",
  "readlines": "See IO#readlines.",
  "read": "See IO#read.",
  "write": "Appends the given string to the underlying buffer string of *strio*.\nThe stream must be opened for writing.  If the argument is not a\nstring, it will be converted to a string using <code>to_s</code>.\nReturns the number of bytes written.  See IO#write.",
  "putc": "See IO#putc.",
  "isatty": "",
  "tty?": "",
  "pid": "",
  "fileno": "",
  "size": "Returns the size of the buffer string.",
  "length": "Returns the size of the buffer string.",
  "truncate": "Truncates the buffer string to at most _integer_ bytes. The *strio*\nmust be opened for writing.",
  "external_encoding": "Returns the Encoding object that represents the encoding of the file.\nIf strio is write mode and no encoding is specified, returns <code>nil</code>.",
  "internal_encoding": "Returns the Encoding of the internal string if conversion is\nspecified.  Otherwise returns nil.",
  "set_encoding": "Specify the encoding of the StringIO as <i>ext_enc</i>.\nUse the default external encoding if <i>ext_enc</i> is nil.\n2nd argument <i>int_enc</i> and optional hash <i>opt</i> argument\nare ignored; they are for API compatibility to IO."
}