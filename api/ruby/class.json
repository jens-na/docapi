{
  "inherited": "Not documented",
  "allocate": "Allocates space for a new object of <i>class</i>'s class and does not\ncall initialize on the new instance. The returned object must be an\ninstance of <i>class</i>.\n\n    klass = Class.new do\n      def initialize(*args)\n        @initialized = true\n      end\n\n      def initialized?\n        @initialized || false\n      end\n    end\n\n    klass.allocate.initialized? #=> false",
  "new": "Calls <code>allocate</code> to create a new object of\n<i>class</i>'s class, then invokes that object's\n<code>initialize</code> method, passing it <i>args</i>.\nThis is the method that ends up getting called whenever\nan object is constructed using .new.",
  "initialize": "Creates a new anonymous (unnamed) class with the given superclass\n(or <code>Object</code> if no parameter is given). You can give a\nclass a name by assigning the class object to a constant.\n\nIf a block is given, it is passed the class object, and the block\nis evaluated in the context of this class using\n<code>class_eval</code>.\n\n   fred = Class.new do\n     def meth1\n       \"hello\"\n     end\n     def meth2\n       \"bye\"\n     end\n   end\n\n   a = fred.new     #=> #<#<Class:0x100381890>:0x100376b98>\n   a.meth1          #=> \"hello\"\n   a.meth2          #=> \"bye\"\n\nAssign the class to a constant (name starting uppercase) if you\nwant to treat it like a regular class.",
  "superclass": "Returns the superclass of <i>class</i>, or <code>nil</code>.\n\n   File.superclass          #=> IO\n   IO.superclass            #=> Object\n   Object.superclass        #=> BasicObject\n   class Foo; end\n   class Bar < Foo; end\n   Bar.superclass           #=> Foo\n\nreturns nil when the given class hasn't a parent class:\n\n   BasicObject.superclass   #=> nil"
}