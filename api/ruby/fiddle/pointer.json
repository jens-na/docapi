{
  "malloc": "Allocate +size+ bytes of memory and associate it with an optional\n+freefunc+ that will be called when the pointer is garbage collected.\n\n+freefunc+ must be an address pointing to a function or an instance of\nFiddle::Function",
  "to_ptr": "Get the underlying pointer for ruby object +val+ and return it as a\nFiddle::Pointer object.",
  "[]": "Returns integer stored at _index_.\n\nIf _start_ and _length_ are given, a string containing the bytes from\n_start_ of _length_ will be returned.",
  "initialize": "Create a new pointer to +address+ with an optional +size+ and +freefunc+.\n\n+freefunc+ will be called when the instance is garbage collected.",
  "free=": "Set the free function for this pointer to +function+ in the given\nFiddle::Function.",
  "free": "Get the free function for this pointer.\n\nReturns a new instance of Fiddle::Function.\n\nSee Fiddle::Function.new",
  "to_i": "Returns the integer memory location of this pointer.",
  "to_int": "Returns the integer memory location of this pointer.",
  "to_value": "Cast this pointer to a ruby object.",
  "ptr": "Returns a new Fiddle::Pointer instance that is a dereferenced pointer for\nthis pointer.\n\nAnalogous to the star operator in C.",
  "+@": "Returns a new Fiddle::Pointer instance that is a dereferenced pointer for\nthis pointer.\n\nAnalogous to the star operator in C.",
  "ref": "Returns a new Fiddle::Pointer instance that is a reference pointer for this\npointer.\n\nAnalogous to the ampersand operator in C.",
  "-@": "Returns a new Fiddle::Pointer instance that is a reference pointer for this\npointer.\n\nAnalogous to the ampersand operator in C.",
  "null?": "Returns +true+ if this is a null pointer.",
  "to_s": "Returns the pointer contents as a string.\n\nWhen called with no arguments, this method will return the contents until\nthe first NULL byte.\n\nWhen called with +len+, a string of +len+ bytes will be returned.\n\nSee to_str",
  "to_str": "Returns the pointer contents as a string.\n\nWhen called with no arguments, this method will return the contents with the\nlength of this pointer's +size+.\n\nWhen called with +len+, a string of +len+ bytes will be returned.\n\nSee to_s",
  "inspect": "Returns a string formatted with an easily readable representation of the\ninternal state of the pointer.",
  "<=>": "Returns -1 if less than, 0 if equal to, 1 if greater than +other+.\n\nReturns nil if +ptr+ cannot be compared to +other+.",
  "==": "Returns true if +other+ wraps the same pointer, otherwise returns\nfalse.",
  "eql?": "Returns true if +other+ wraps the same pointer, otherwise returns\nfalse.",
  "+": "Returns a new pointer instance that has been advanced +n+ bytes.",
  "-": "Returns a new pointer instance that has been moved back +n+ bytes.",
  "[]=": "Set the value at +index+ to +int+.\n\nOr, set the memory at +start+ until +length+ with the contents of +string+,\nthe memory from +dl_cptr+, or the memory pointed at by the memory address\n+addr+.",
  "size": "Get the size of this pointer.",
  "size=": "Set the size of this pointer to +size+"
}