{
  "numerator": "Returns the numerator.\n\n   Rational(7).numerator        #=> 7\n   Rational(7, 1).numerator     #=> 7\n   Rational(9, -4).numerator    #=> -9\n   Rational(-2, -10).numerator  #=> 1",
  "denominator": "Returns the denominator (always positive).\n\n   Rational(7).denominator             #=> 1\n   Rational(7, 1).denominator          #=> 1\n   Rational(9, -4).denominator         #=> 4\n   Rational(-2, -10).denominator       #=> 5\n   rat.numerator.gcd(rat.denominator)  #=> 1",
  "+": "Performs addition.\n\n   Rational(2, 3)  + Rational(2, 3)   #=> (4/3)\n   Rational(900)   + Rational(1)      #=> (900/1)\n   Rational(-2, 9) + Rational(-9, 2)  #=> (-85/18)\n   Rational(9, 8)  + 4                #=> (41/8)\n   Rational(20, 9) + 9.8              #=> 12.022222222222222",
  "-": "Performs subtraction.\n\n   Rational(2, 3)  - Rational(2, 3)   #=> (0/1)\n   Rational(900)   - Rational(1)      #=> (899/1)\n   Rational(-2, 9) - Rational(-9, 2)  #=> (77/18)\n   Rational(9, 8)  - 4                #=> (23/8)\n   Rational(20, 9) - 9.8              #=> -7.577777777777778",
  "*": "Performs multiplication.\n\n   Rational(2, 3)  * Rational(2, 3)   #=> (4/9)\n   Rational(900)   * Rational(1)      #=> (900/1)\n   Rational(-2, 9) * Rational(-9, 2)  #=> (1/1)\n   Rational(9, 8)  * 4                #=> (9/2)\n   Rational(20, 9) * 9.8              #=> 21.77777777777778",
  "/": "Performs division.\n\n   Rational(2, 3)  / Rational(2, 3)   #=> (1/1)\n   Rational(900)   / Rational(1)      #=> (900/1)\n   Rational(-2, 9) / Rational(-9, 2)  #=> (4/81)\n   Rational(9, 8)  / 4                #=> (9/32)\n   Rational(20, 9) / 9.8              #=> 0.22675736961451246",
  "quo": "Performs division.\n\n   Rational(2, 3)  / Rational(2, 3)   #=> (1/1)\n   Rational(900)   / Rational(1)      #=> (900/1)\n   Rational(-2, 9) / Rational(-9, 2)  #=> (4/81)\n   Rational(9, 8)  / 4                #=> (9/32)\n   Rational(20, 9) / 9.8              #=> 0.22675736961451246",
  "fdiv": "Performs division and returns the value as a float.\n\n   Rational(2, 3).fdiv(1)       #=> 0.6666666666666666\n   Rational(2, 3).fdiv(0.5)     #=> 1.3333333333333333\n   Rational(2).fdiv(3)          #=> 0.6666666666666666",
  "**": "Performs exponentiation.\n\n   Rational(2)    ** Rational(3)    #=> (8/1)\n   Rational(10)   ** -2             #=> (1/100)\n   Rational(10)   ** -2.0           #=> 0.01\n   Rational(-4)   ** Rational(1,2)  #=> (1.2246063538223773e-16+2.0i)\n   Rational(1, 2) ** 0              #=> (1/1)\n   Rational(1, 2) ** 0.0            #=> 1.0",
  "<=>": "Performs comparison and returns -1, 0, or +1.\n\n+nil+ is returned if the two values are incomparable.\n\n   Rational(2, 3)  <=> Rational(2, 3)  #=> 0\n   Rational(5)     <=> 5               #=> 0\n   Rational(2,3)   <=> Rational(1,3)   #=> 1\n   Rational(1,3)   <=> 1               #=> -1\n   Rational(1,3)   <=> 0.3             #=> 1",
  "==": "Returns true if rat equals object numerically.\n\n   Rational(2, 3)  == Rational(2, 3)   #=> true\n   Rational(5)     == 5                #=> true\n   Rational(0)     == 0.0              #=> true\n   Rational('1/3') == 0.33             #=> false\n   Rational('1/2') == '1/2'            #=> false",
  "coerce": ":nodoc:",
  "//": ":nodoc:",
  "quot": ":nodoc:",
  "quotrem": ":nodoc:",
  "rational?": ":nodoc:",
  "exact?": ":nodoc:",
  "floor": "Returns the truncated value (toward negative infinity).\n\n   Rational(3).floor      #=> 3\n   Rational(2, 3).floor   #=> 0\n   Rational(-3, 2).floor  #=> -1\n\n          decimal      -  1  2  3 . 4  5  6\n                         ^  ^  ^  ^   ^  ^\n         precision      -3 -2 -1  0  +1 +2\n\n   '%f' % Rational('-123.456').floor(+1)  #=> \"-123.500000\"\n   '%f' % Rational('-123.456').floor(-1)  #=> \"-130.000000\"",
  "ceil": "Returns the truncated value (toward positive infinity).\n\n   Rational(3).ceil      #=> 3\n   Rational(2, 3).ceil   #=> 1\n   Rational(-3, 2).ceil  #=> -1\n\n          decimal      -  1  2  3 . 4  5  6\n                         ^  ^  ^  ^   ^  ^\n         precision      -3 -2 -1  0  +1 +2\n\n   '%f' % Rational('-123.456').ceil(+1)  #=> \"-123.400000\"\n   '%f' % Rational('-123.456').ceil(-1)  #=> \"-120.000000\"",
  "truncate": "Returns the truncated value (toward zero).\n\n   Rational(3).truncate      #=> 3\n   Rational(2, 3).truncate   #=> 0\n   Rational(-3, 2).truncate  #=> -1\n\n          decimal      -  1  2  3 . 4  5  6\n                         ^  ^  ^  ^   ^  ^\n         precision      -3 -2 -1  0  +1 +2\n\n   '%f' % Rational('-123.456').truncate(+1)  #=>  \"-123.400000\"\n   '%f' % Rational('-123.456').truncate(-1)  #=>  \"-120.000000\"",
  "round": "Returns the truncated value (toward the nearest integer;\n0.5 => 1; -0.5 => -1).\n\n   Rational(3).round      #=> 3\n   Rational(2, 3).round   #=> 1\n   Rational(-3, 2).round  #=> -2\n\n          decimal      -  1  2  3 . 4  5  6\n                         ^  ^  ^  ^   ^  ^\n         precision      -3 -2 -1  0  +1 +2\n\n   '%f' % Rational('-123.456').round(+1)  #=> \"-123.500000\"\n   '%f' % Rational('-123.456').round(-1)  #=> \"-120.000000\"",
  "to_i": "Returns the truncated value as an integer.\n\nEquivalent to\n   rat.truncate.\n\n   Rational(2, 3).to_i   #=> 0\n   Rational(3).to_i      #=> 3\n   Rational(300.6).to_i  #=> 300\n   Rational(98,71).to_i  #=> 1\n   Rational(-30,2).to_i  #=> -15",
  "to_f": "Return the value as a float.\n\n   Rational(2).to_f      #=> 2.0\n   Rational(9, 4).to_f   #=> 2.25\n   Rational(-3, 4).to_f  #=> -0.75\n   Rational(20, 3).to_f  #=> 6.666666666666667",
  "to_r": "Returns self.\n\n   Rational(2).to_r      #=> (2/1)\n   Rational(-8, 6).to_r  #=> (-4/3)",
  "rationalize": "Returns a simpler approximation of the value if the optional\nargument eps is given (rat-|eps| <= result <= rat+|eps|), self\notherwise.\n\n   r = Rational(5033165, 16777216)\n   r.rationalize                    #=> (5033165/16777216)\n   r.rationalize(Rational('0.01'))  #=> (3/10)\n   r.rationalize(Rational('0.1'))   #=> (1/3)",
  "hash": ":nodoc:",
  "to_s": "Returns the value as a string.\n\n   Rational(2).to_s      #=> \"2/1\"\n   Rational(-8, 6).to_s  #=> \"-4/3\"\n   Rational('1/2').to_s  #=> \"1/2\"",
  "inspect": "Returns the value as a string for inspection.\n\n   Rational(2).inspect      #=> \"(2/1)\"\n   Rational(-8, 6).inspect  #=> \"(-4/3)\"\n   Rational('1/2').inspect  #=> \"(1/2)\"",
  "marshal_dump": ":nodoc:",
  "compatible": ""
}