{
  "malloc": "Allocate +size+ bytes of memory and associate it with an optional\n+freefunc+ that will be called when the pointer is garbage collected.\n+freefunc+ must be an address pointing to a function or an instance of\nDL::CFunc",
  "to_ptr": "Get the underlying pointer for ruby object +val+ and return it as a\nDL::CPtr object.",
  "[]": "Returns integer stored at _index_.  If _start_ and _length_ are given,\na string containing the bytes from _start_ of length _length_ will be\nreturned.",
  "initialize": "Create a new pointer to +address+ with an optional +size+ and +freefunc+.\n+freefunc+ will be called when the instance is garbage collected.",
  "free=": "Set the free function for this pointer to the DL::CFunc in +function+.",
  "free": "Get the free function for this pointer.  Returns  DL::CFunc or nil.",
  "to_i": "Returns the integer memory location of this DL::CPtr.",
  "to_int": "Returns the integer memory location of this DL::CPtr.",
  "to_value": "Cast this CPtr to a ruby object.",
  "ptr": "Returns a DL::CPtr that is a dereferenced pointer for this DL::CPtr.\nAnalogous to the star operator in C.",
  "+@": "Returns a DL::CPtr that is a dereferenced pointer for this DL::CPtr.\nAnalogous to the star operator in C.",
  "ref": "Returns a DL::CPtr that is a reference pointer for this DL::CPtr.\nAnalogous to the ampersand operator in C.",
  "-@": "Returns a DL::CPtr that is a reference pointer for this DL::CPtr.\nAnalogous to the ampersand operator in C.",
  "null?": "Returns true if this is a null pointer.",
  "to_s": "Returns the pointer contents as a string.  When called with no arguments,\nthis method will return the contents until the first NULL byte.  When\ncalled with +len+, a string of +len+ bytes will be returned.",
  "to_str": "Returns the pointer contents as a string.  When called with no arguments,\nthis method will return the contents with the length of this pointer's\n+size+. When called with +len+, a string of +len+ bytes will be returned.",
  "inspect": "Returns a string formatted with an easily readable representation of the\ninternal state of the DL::CPtr",
  "<=>": "Returns -1 if less than, 0 if equal to, 1 if greater than +other+.  Returns\nnil if +ptr+ cannot be compared to +other+.",
  "==": "Returns true if +other+ wraps the same pointer, otherwise returns\nfalse.",
  "eql?": "Returns true if +other+ wraps the same pointer, otherwise returns\nfalse.",
  "+": "Returns a new DL::CPtr that has been advanced +n+ bytes.",
  "-": "Returns a new DL::CPtr that has been moved back +n+ bytes.",
  "[]=": "Set the value at +index+ to +int+.  Or, set the memory at +start+ until\n+length+ with the contents of +string+, the memory from +dl_cptr+, or the\nmemory pointed at by the memory address +addr+.",
  "size": "Get the size of this pointer.",
  "size=": "Set the size of this pointer to +size+"
}