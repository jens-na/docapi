{
  "initialize": "Create a Pathname object from the given String (or String-like object).\nIf +path+ contains a NULL character (<tt>\\0</tt>), an ArgumentError is raised.",
  "freeze": "Freezes this Pathname.\n\nSee Object.freeze.",
  "taint": "Taints this Pathname.\n\nSee Object.taint.",
  "untaint": "Untaints this Pathname.\n\nSee Object.untaint.",
  "==": "Compare this pathname with +other+.  The comparison is string-based.\nBe aware that two different paths (<tt>foo.txt</tt> and <tt>./foo.txt</tt>)\ncan refer to the same file.",
  "===": "Compare this pathname with +other+.  The comparison is string-based.\nBe aware that two different paths (<tt>foo.txt</tt> and <tt>./foo.txt</tt>)\ncan refer to the same file.",
  "eql?": "Compare this pathname with +other+.  The comparison is string-based.\nBe aware that two different paths (<tt>foo.txt</tt> and <tt>./foo.txt</tt>)\ncan refer to the same file.",
  "<=>": "Provides a case-sensitive comparison operator for pathnames.\n\nPathname.new('/usr') <=> Pathname.new('/usr/bin')\n   #=> -1\nPathname.new('/usr/bin') <=> Pathname.new('/usr/bin')\n   #=> 0\nPathname.new('/usr/bin') <=> Pathname.new('/USR/BIN')\n   #=> 1\n\nIt will return +-1+, +0+ or +1+ depending on the value of the left argument\nrelative to the right argument. Or it will return +nil+ if the arguments\nare not comparable.",
  "hash": ":nodoc:",
  "to_s": "Return the path as a String.\n\nto_path is implemented so Pathname objects are usable with File.open, etc.",
  "to_path": "Return the path as a String.\n\nto_path is implemented so Pathname objects are usable with File.open, etc.",
  "inspect": ":nodoc:",
  "sub": "Return a pathname which is substituted by String#sub.\n\npath1 = Pathname.new('/usr/bin/perl')\npath1.sub('perl', 'ruby')\n    #=> #<Pathname:/usr/bin/ruby>",
  "sub_ext": "Return a pathname with +repl+ added as a suffix to the basename.\n\nIf self has no extension part, +repl+ is appended.\n\nPathname.new('/usr/bin/shutdown').sub_ext('.rb')\n    #=> #<Pathname:/usr/bin/shutdown.rb>",
  "realpath": "Returns the real (absolute) pathname for +self+ in the actual\nfilesystem.\n\nDoes not contain symlinks or useless dots, +..+ and +.+.\n\nAll components of the pathname must exist when this method is\ncalled.",
  "realdirpath": "Returns the real (absolute) pathname of +self+ in the actual filesystem.\n\nDoes not contain symlinks or useless dots, +..+ and +.+.\n\nThe last component of the real pathname can be nonexistent.",
  "each_line": "Iterates over each line in the file and yields a String object for each.",
  "read": "Returns all data from the file, or the first +N+ bytes if specified.\n\nSee IO.read.",
  "binread": "Returns all the bytes from the file, or the first +N+ if specified.\n\nSee IO.binread.",
  "readlines": "Returns all the lines from the file.\n\nSee IO.readlines.",
  "write": "Writes +contents+ to the file.\n\nSee IO.write.",
  "binwrite": "Writes +contents+ to the file, opening it in binary mode.\n\nSee IO.binwrite.",
  "sysopen": "See IO.sysopen.",
  "atime": "Returns the last access time for the file.\n\nSee File.atime.",
  "ctime": "Returns the last change time, using directory information, not the file itself.\n\nSee File.ctime.",
  "mtime": "Returns the last modified time of the file.\n\nSee File.mtime.",
  "chmod": "Changes file permissions.\n\nSee File.chmod.",
  "lchmod": "Same as Pathname.chmod, but does not follow symbolic links.\n\nSee File.lchmod.",
  "chown": "Change owner and group of the file.\n\nSee File.chown.",
  "lchown": "Same as Pathname.chown, but does not follow symbolic links.\n\nSee File.lchown.",
  "fnmatch": "Return +true+ if the receiver matches the given pattern.\n\nSee File.fnmatch.",
  "fnmatch?": "Return +true+ if the receiver matches the given pattern.\n\nSee File.fnmatch.",
  "ftype": "Returns \"type\" of file (\"file\", \"directory\", etc).\n\nSee File.ftype.",
  "make_link": "Creates a hard link at _pathname_.\n\nSee File.link.",
  "open": "Opens the file for reading or writing.\n\nSee File.open.",
  "readlink": "Read symbolic link.\n\nSee File.readlink.",
  "rename": "Rename the file.\n\nSee File.rename.",
  "stat": "Returns a File::Stat object.\n\nSee File.stat.",
  "lstat": "See File.lstat.",
  "make_symlink": "Creates a symbolic link.\n\nSee File.symlink.",
  "truncate": "Truncates the file to +length+ bytes.\n\nSee File.truncate.",
  "utime": "Update the access and modification times of the file.\n\nSee File.utime.",
  "basename": "Returns the last component of the path.\n\nSee File.basename.",
  "dirname": "Returns all but the last component of the path.\n\nSee File.dirname.",
  "extname": "Returns the file's extension.\n\nSee File.extname.",
  "expand_path": "Returns the absolute path for the file.\n\nSee File.expand_path.",
  "split": "Returns the #dirname and the #basename in an Array.\n\nSee File.split.",
  "blockdev?": "See FileTest.blockdev?.",
  "chardev?": "See FileTest.chardev?.",
  "executable?": "See FileTest.executable?.",
  "executable_real?": "See FileTest.executable_real?.",
  "exist?": "See FileTest.exist?.",
  "grpowned?": "See FileTest.grpowned?.",
  "directory?": "See FileTest.directory?.",
  "file?": "See FileTest.file?.",
  "pipe?": "See FileTest.pipe?.",
  "socket?": "See FileTest.socket?.",
  "owned?": "See FileTest.owned?.",
  "readable?": "See FileTest.readable?.",
  "world_readable?": "See FileTest.world_readable?.",
  "readable_real?": "See FileTest.readable_real?.",
  "setuid?": "See FileTest.setuid?.",
  "setgid?": "See FileTest.setgid?.",
  "size": "See FileTest.size.",
  "size?": "See FileTest.size?.",
  "sticky?": "See FileTest.sticky?.",
  "symlink?": "See FileTest.symlink?.",
  "writable?": "See FileTest.writable?.",
  "world_writable?": "See FileTest.world_writable?.",
  "writable_real?": "See FileTest.writable_real?.",
  "zero?": "See FileTest.zero?.",
  "glob": "Returns or yields Pathname objects.\n\n Pathname.glob(\"config/\" \"*.rb\")\n#=> [#<Pathname:config/environment.rb>, #<Pathname:config/routes.rb>, ..]\n\nSee Dir.glob.",
  "getwd": "Returns the current working directory as a Pathname.\n\nPathname.getwd\n    #=> #<Pathname:/home/zzak/projects/ruby>\n\nSee Dir.getwd.",
  "pwd": "Returns the current working directory as a Pathname.\n\nPathname.getwd\n    #=> #<Pathname:/home/zzak/projects/ruby>\n\nSee Dir.getwd.",
  "entries": "Return the entries (files and subdirectories) in the directory, each as a\nPathname object.\n\nThe results contains just the names in the directory, without any trailing\nslashes or recursive look-up.\n\n  pp Pathname.new('/usr/local').entries\n  #=> [#<Pathname:share>,\n  #    #<Pathname:lib>,\n  #    #<Pathname:..>,\n  #    #<Pathname:include>,\n  #    #<Pathname:etc>,\n  #    #<Pathname:bin>,\n  #    #<Pathname:man>,\n  #    #<Pathname:games>,\n  #    #<Pathname:.>,\n  #    #<Pathname:sbin>,\n  #    #<Pathname:src>]\n\nThe result may contain the current directory <code>#<Pathname:.></code> and\nthe parent directory <code>#<Pathname:..></code>.\n\nIf you don't want +.+ and +..+ and\nwant directories, consider Pathname#children.",
  "mkdir": "Create the referenced directory.\n\nSee Dir.mkdir.",
  "rmdir": "Remove the referenced directory.\n\nSee Dir.rmdir.",
  "opendir": "Opens the referenced directory.\n\nSee Dir.open.",
  "each_entry": "Iterates over the entries (files and subdirectories) in the directory,\nyielding a Pathname object for each entry.",
  "unlink": "Removes a file or directory, using File.unlink if +self+ is a file, or\nDir.unlink as necessary.",
  "delete": "Removes a file or directory, using File.unlink if +self+ is a file, or\nDir.unlink as necessary."
}