{
  "new": "The first two forms are used to create a new Struct subclass +class_name+\nthat can contain a value for each +member_name+.  This subclass can be\nused to create instances of the structure like any other Class.\n\nIf the +class_name+ is omitted an anonymous structure class will be\ncreated.  Otherwise, the name of this struct will appear as a constant in\nclass Struct, so it must be unique for all Structs in the system and\nmust start with a capital letter.  Assigning a structure class to a\nconstant also gives the class the name of the constant.\n\n   # Create a structure with a name under Struct\n   Struct.new(\"Customer\", :name, :address)\n   #=> Struct::Customer\n   Struct::Customer.new(\"Dave\", \"123 Main\")\n   #=> #<struct Struct::Customer name=\"Dave\", address=\"123 Main\">\n\nIf a block is given it will be evaluated in the context of\n+StructClass+, passing the created class as a parameter:\n\n   Customer = Struct.new(:name, :address) do\n     def greeting\n       \"Hello #{name}!\"\n     end\n   end\n   Customer.new(\"Dave\", \"123 Main\").greeting  # => \"Hello Dave!\"\n\nThis is the recommended way to customize a struct.  Subclassing an\nanonymous struct creates an extra anonymous class that will never be used.\n\nThe last two forms create a new instance of a struct subclass.  The number\nof +value+ parameters must be less than or equal to the number of\nattributes defined for the structure.  Unset parameters default to +nil+.\nPassing more parameters than number of attributes will raise\nan ArgumentError.\n\n   # Create a structure named by its constant\n   Customer = Struct.new(:name, :address)\n   #=> Customer\n   Customer.new(\"Dave\", \"123 Main\")\n   #=> #<struct Customer name=\"Dave\", address=\"123 Main\">",
  "initialize": "",
  "initialize_copy": ":nodoc:",
  "==": "Equality---Returns +true+ if +other+ has the same struct subclass and has\nequal member values (according to Object#==).\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe   = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joejr = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   jane  = Customer.new(\"Jane Doe\", \"456 Elm, Anytown NC\", 12345)\n   joe == joejr   #=> true\n   joe == jane    #=> false",
  "eql?": "Hash equality---+other+ and +struct+ refer to the same hash key if they\nhave the same struct subclass and have equal member values (according to\nObject#eql?).",
  "hash": "Returns a hash value based on this struct's contents (see Object#hash).",
  "inspect": "Describe the contents of this struct in a string.",
  "to_s": "Describe the contents of this struct in a string.",
  "to_a": "Returns the values for this struct as an Array.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.to_a[1]   #=> \"123 Maple, Anytown NC\"",
  "to_h": "Returns a Hash containing the names and values for the struct's members.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.to_h[:address]   #=> \"123 Maple, Anytown NC\"",
  "values": "Returns the values for this struct as an Array.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.to_a[1]   #=> \"123 Maple, Anytown NC\"",
  "size": "Returns the number of struct members.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.length   #=> 3",
  "length": "Returns the number of struct members.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.length   #=> 3",
  "each": "Yields the value of each struct member in order.  If no block is given an\nenumerator is returned.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.each {|x| puts(x) }\n\nProduces:\n\n   Joe Smith\n   123 Maple, Anytown NC\n   12345",
  "each_pair": "Yields the name and value of each struct member in order.  If no block is\ngiven an enumerator is returned.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.each_pair {|name, value| puts(\"#{name} => #{value}\") }\n\nProduces:\n\n   name => Joe Smith\n   address => 123 Maple, Anytown NC\n   zip => 12345",
  "[]": "Attribute Reference---Returns the value of the given struct +member+ or\nthe member at the given +index+.   Raises NameError if the +member+ does\nnot exist and IndexError if the +index+ is out of range.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n\n   joe[\"name\"]   #=> \"Joe Smith\"\n   joe[:name]    #=> \"Joe Smith\"\n   joe[0]        #=> \"Joe Smith\"",
  "[]=": "Attribute Assignment---Sets the value of the given struct +member+ or\nthe member at the given +index+.  Raises NameError if the +name+ does not\nexist and IndexError if the +index+ is out of range.\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n\n   joe[\"name\"] = \"Luke\"\n   joe[:zip]   = \"90210\"\n\n   joe.name   #=> \"Luke\"\n   joe.zip    #=> \"90210\"",
  "select": "Yields each member value from the struct to the block and returns an Array\ncontaining the member values from the +struct+ for which the given block\nreturns a true value (equivalent to Enumerable#select).\n\n   Lots = Struct.new(:a, :b, :c, :d, :e, :f)\n   l = Lots.new(11, 22, 33, 44, 55, 66)\n   l.select {|v| (v % 2).zero? }   #=> [22, 44, 66]",
  "values_at": "Returns the struct member values for each +selector+ as an Array.  A\n+selector+ may be either an Integer offset or a Range of offsets (as in\nArray#values_at).\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.values_at 0, 2 #=> [\"Joe Smith\", 12345]",
  "members": "Returns the struct members as an array of symbols:\n\n   Customer = Struct.new(:name, :address, :zip)\n   joe = Customer.new(\"Joe Smith\", \"123 Maple, Anytown NC\", 12345)\n   joe.members   #=> [:name, :address, :zip]",
  "Passwd": "deprecated name",
  "Group": "deprecated name",
  "Tms": "for the backward compatibility"
}