{
  "[]": "Element Reference --- Returns the element at +index+, or returns a\nsubarray starting at the +start+ index and continuing for +length+\nelements, or returns a subarray specified by +range+ of indices.\n\nNegative indices count backward from the end of the array (-1 is the last\nelement).  For +start+ and +range+ cases the starting index is just before\nan element.  Additionally, an empty array is returned when the starting\nindex for an element range is at the end of the array.\n\nReturns +nil+ if the index (or starting index) are out of range.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a[2] +  a[0] + a[1]    #=> \"cab\"\n   a[6]                   #=> nil\n   a[1, 2]                #=> [ \"b\", \"c\" ]\n   a[1..3]                #=> [ \"b\", \"c\", \"d\" ]\n   a[4..7]                #=> [ \"e\" ]\n   a[6..10]               #=> nil\n   a[-3, 3]               #=> [ \"c\", \"d\", \"e\" ]\n   # special cases\n   a[5]                   #=> nil\n   a[6, 1]                #=> nil\n   a[5, 1]                #=> []\n   a[5..10]               #=> []",
  "try_convert": "Tries to convert +obj+ into an array, using +to_ary+ method.  Returns the\nconverted array or +nil+ if +obj+ cannot be converted for any reason.\nThis method can be used to check if an argument is an array.\n\n   Array.try_convert([1])   #=> [1]\n   Array.try_convert(\"1\")   #=> nil\n\n   if tmp = Array.try_convert(arg)\n     # the argument is an array\n   elsif tmp = String.try_convert(arg)\n     # the argument is a string\n   end",
  "initialize": "Returns a new array.\n\nIn the first form, if no arguments are sent, the new array will be empty.\nWhen a +size+ and an optional +obj+ are sent, an array is created with\n+size+ copies of +obj+.  Take notice that all elements will reference the\nsame object +obj+.\n\nThe second form creates a copy of the array passed as a parameter (the\narray is generated by calling to_ary on the parameter).\n\n  first_array = [\"Matz\", \"Guido\"]\n\n  second_array = Array.new(first_array) #=> [\"Matz\", \"Guido\"]\n\n  first_array.equal? second_array       #=> false\n\nIn the last form, an array of the given size is created.  Each element in\nthis array is created by passing the element's index to the given block\nand storing the return value.\n\n  Array.new(3){ |index| index ** 2 }\n  # => [0, 1, 4]\n\n== Common gotchas\n\nWhen sending the second parameter, the same object will be used as the\nvalue for all the array elements:\n\n   a = Array.new(2, Hash.new)\n   # => [{}, {}]\n\n   a[0]['cat'] = 'feline'\n   a # => [{\"cat\"=>\"feline\"}, {\"cat\"=>\"feline\"}]\n\n   a[1]['cat'] = 'Felix'\n   a # => [{\"cat\"=>\"Felix\"}, {\"cat\"=>\"Felix\"}]\n\nSince all the Array elements store the same hash, changes to one of them\nwill affect them all.\n\nIf multiple copies are what you want, you should use the block\nversion which uses the result of that block each time an element\nof the array needs to be initialized:\n\n   a = Array.new(2) { Hash.new }\n   a[0]['cat'] = 'feline'\n   a # => [{\"cat\"=>\"feline\"}, {}]",
  "initialize_copy": "Replaces the contents of +self+ with the contents of +other_ary+,\ntruncating or expanding if necessary.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.replace([ \"x\", \"y\", \"z\" ])   #=> [\"x\", \"y\", \"z\"]\n   a                              #=> [\"x\", \"y\", \"z\"]",
  "inspect": "Creates a string representation of +self+.\n\n   [ \"a\", \"b\", \"c\" ].to_s     #=> \"[\\\"a\\\", \\\"b\\\", \\\"c\\\"]\"",
  "to_s": "Creates a string representation of +self+.\n\n   [ \"a\", \"b\", \"c\" ].to_s     #=> \"[\\\"a\\\", \\\"b\\\", \\\"c\\\"]\"",
  "to_a": "Returns +self+.\n\nIf called on a subclass of Array, converts the receiver to an Array object.",
  "to_h": "Returns the result of interpreting <i>ary</i> as an array of\n<tt>[key, value]</tt> pairs.\n\n   [[:foo, :bar], [1, 2]].to_h\n     # => {:foo => :bar, 1 => 2}",
  "to_ary": "Returns +self+.",
  "frozen?": "Return +true+ if this array is frozen (or temporarily frozen\nwhile being sorted). See also Object#frozen?",
  "==": "Equality --- Two arrays are equal if they contain the same number of\nelements and if each element is equal to (according to Object#==) the\ncorresponding element in +other_ary+.\n\n   [ \"a\", \"c\" ]    == [ \"a\", \"c\", 7 ]     #=> false\n   [ \"a\", \"c\", 7 ] == [ \"a\", \"c\", 7 ]     #=> true\n   [ \"a\", \"c\", 7 ] == [ \"a\", \"d\", \"f\" ]   #=> false",
  "eql?": "Returns +true+ if +self+ and +other+ are the same object,\nor are both arrays with the same content (according to Object#eql?).",
  "hash": "Compute a hash-code for this array.\n\nTwo arrays with the same content will have the same hash code (and will\ncompare using #eql?).",
  "[]=": "Element Assignment --- Sets the element at +index+, or replaces a subarray\nfrom the +start+ index for +length+ elements, or replaces a subarray\nspecified by the +range+ of indices.\n\nIf indices are greater than the current capacity of the array, the array\ngrows automatically.  Elements are inserted into the array at +start+ if\n+length+ is zero.\n\nNegative indices will count backward from the end of the array.  For\n+start+ and +range+ cases the starting index is just before an element.\n\nAn IndexError is raised if a negative index points past the beginning of\nthe array.\n\nSee also Array#push, and Array#unshift.\n\n   a = Array.new\n   a[4] = \"4\";                 #=> [nil, nil, nil, nil, \"4\"]\n   a[0, 3] = [ 'a', 'b', 'c' ] #=> [\"a\", \"b\", \"c\", nil, \"4\"]\n   a[1..2] = [ 1, 2 ]          #=> [\"a\", 1, 2, nil, \"4\"]\n   a[0, 2] = \"?\"               #=> [\"?\", 2, nil, \"4\"]\n   a[0..2] = \"A\"               #=> [\"A\", \"4\"]\n   a[-1]   = \"Z\"               #=> [\"A\", \"Z\"]\n   a[1..-1] = nil              #=> [\"A\", nil]\n   a[1..-1] = []               #=> [\"A\"]\n   a[0, 0] = [ 1, 2 ]          #=> [1, 2, \"A\"]\n   a[3, 0] = \"B\"               #=> [1, 2, \"A\", \"B\"]",
  "at": "Returns the element at +index+. A negative index counts from the end of\n+self+. Returns +nil+ if the index is out of range. See also\nArray#[].\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.at(0)     #=> \"a\"\n   a.at(-1)    #=> \"e\"",
  "fetch": "Tries to return the element at position +index+, but throws an IndexError\nexception if the referenced +index+ lies outside of the array bounds.  This\nerror can be prevented by supplying a second argument, which will act as a\n+default+ value.\n\nAlternatively, if a block is given it will only be executed when an\ninvalid +index+ is referenced.  Negative values of +index+ count from the\nend of the array.\n\n   a = [ 11, 22, 33, 44 ]\n   a.fetch(1)               #=> 22\n   a.fetch(-1)              #=> 44\n   a.fetch(4, 'cat')        #=> \"cat\"\n   a.fetch(100) { |i| puts \"#{i} is out of bounds\" }\n                            #=> \"100 is out of bounds\"",
  "first": "Returns the first element, or the first +n+ elements, of the array.\nIf the array is empty, the first form returns +nil+, and the\nsecond form returns an empty array. See also Array#last for\nthe opposite effect.\n\n   a = [ \"q\", \"r\", \"s\", \"t\" ]\n   a.first     #=> \"q\"\n   a.first(2)  #=> [\"q\", \"r\"]",
  "last": "Returns the last element(s) of +self+. If the array is empty,\nthe first form returns +nil+.\n\nSee also Array#first for the opposite effect.\n\n   a = [ \"w\", \"x\", \"y\", \"z\" ]\n   a.last     #=> \"z\"\n   a.last(2)  #=> [\"y\", \"z\"]",
  "concat": "Appends the elements of +other_ary+ to +self+.\n\n   [ \"a\", \"b\" ].concat( [\"c\", \"d\"] ) #=> [ \"a\", \"b\", \"c\", \"d\" ]\n   a = [ 1, 2, 3 ]\n   a.concat( [ 4, 5 ] )\n   a                                 #=> [ 1, 2, 3, 4, 5 ]\n\nSee also Array#+.",
  "<<": "Append---Pushes the given object on to the end of this array. This\nexpression returns the array itself, so several appends\nmay be chained together.\n\n   [ 1, 2 ] << \"c\" << \"d\" << [ 3, 4 ]\n           #=>  [ 1, 2, \"c\", \"d\", [ 3, 4 ] ]",
  "push": "Append --- Pushes the given object(s) on to the end of this array. This\nexpression returns the array itself, so several appends\nmay be chained together. See also Array#pop for the opposite\neffect.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.push(\"d\", \"e\", \"f\")\n           #=> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n   [1, 2, 3,].push(4).push(5)\n           #=> [1, 2, 3, 4, 5]",
  "pop": "Removes the last element from +self+ and returns it, or\n+nil+ if the array is empty.\n\nIf a number +n+ is given, returns an array of the last +n+ elements\n(or less) just like <code>array.slice!(-n, n)</code> does. See also\nArray#push for the opposite effect.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.pop     #=> \"d\"\n   a.pop(2)  #=> [\"b\", \"c\"]\n   a         #=> [\"a\"]",
  "shift": "Removes the first element of +self+ and returns it (shifting all\nother elements down by one). Returns +nil+ if the array\nis empty.\n\nIf a number +n+ is given, returns an array of the first +n+ elements\n(or less) just like <code>array.slice!(0, n)</code> does. With +ary+\ncontaining only the remainder elements, not including what was shifted to\n+new_ary+. See also Array#unshift for the opposite effect.\n\n   args = [ \"-m\", \"-q\", \"filename\" ]\n   args.shift     #=> \"-m\"\n   args           #=> [\"-q\", \"filename\"]\n\n   args = [ \"-m\", \"-q\", \"filename\" ]\n   args.shift(2)  #=> [\"-m\", \"-q\"]\n   args           #=> [\"filename\"]",
  "unshift": "Prepends objects to the front of +self+, moving other elements upwards.\nSee also Array#shift for the opposite effect.\n\n   a = [ \"b\", \"c\", \"d\" ]\n   a.unshift(\"a\")   #=> [\"a\", \"b\", \"c\", \"d\"]\n   a.unshift(1, 2)  #=> [ 1, 2, \"a\", \"b\", \"c\", \"d\"]",
  "insert": "Inserts the given values before the element with the given +index+.\n\nNegative indices count backwards from the end of the array, where +-1+ is\nthe last element.\n\n   a = %w{ a b c d }\n   a.insert(2, 99)         #=> [\"a\", \"b\", 99, \"c\", \"d\"]\n   a.insert(-2, 1, 2, 3)   #=> [\"a\", \"b\", 99, \"c\", 1, 2, 3, \"d\"]",
  "each": "Calls the given block once for each element in +self+, passing that element\nas a parameter.\n\nAn Enumerator is returned if no block is given.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.each {|x| print x, \" -- \" }\n\nproduces:\n\n   a -- b -- c --",
  "each_index": "Same as Array#each, but passes the +index+ of the element instead of the\nelement itself.\n\nAn Enumerator is returned if no block is given.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.each_index {|x| print x, \" -- \" }\n\nproduces:\n\n   0 -- 1 -- 2 --",
  "reverse_each": "Same as Array#each, but traverses +self+ in reverse order.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.reverse_each {|x| print x, \" \" }\n\nproduces:\n\n   c b a",
  "length": "Returns the number of elements in +self+. May be zero.\n\n   [ 1, 2, 3, 4, 5 ].length   #=> 5\n   [].length                  #=> 0",
  "size": "Returns the number of elements in +self+. May be zero.\n\n   [ 1, 2, 3, 4, 5 ].length   #=> 5\n   [].length                  #=> 0",
  "empty?": "Returns +true+ if +self+ contains no elements.\n\n   [].empty?   #=> true",
  "find_index": "Returns the _index_ of the first object in +ary+ such that the object is\n<code>==</code> to +obj+.\n\nIf a block is given instead of an argument, returns the _index_ of the\nfirst object for which the block returns +true+.  Returns +nil+ if no\nmatch is found.\n\nSee also Array#rindex.\n\nAn Enumerator is returned if neither a block nor argument is given.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.index(\"b\")              #=> 1\n   a.index(\"z\")              #=> nil\n   a.index { |x| x == \"b\" }  #=> 1",
  "index": "Returns the _index_ of the first object in +ary+ such that the object is\n<code>==</code> to +obj+.\n\nIf a block is given instead of an argument, returns the _index_ of the\nfirst object for which the block returns +true+.  Returns +nil+ if no\nmatch is found.\n\nSee also Array#rindex.\n\nAn Enumerator is returned if neither a block nor argument is given.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.index(\"b\")              #=> 1\n   a.index(\"z\")              #=> nil\n   a.index { |x| x == \"b\" }  #=> 1",
  "rindex": "Returns the _index_ of the last object in +self+ <code>==</code> to +obj+.\n\nIf a block is given instead of an argument, returns the _index_ of the\nfirst object for which the block returns +true+, starting from the last\nobject.\n\nReturns +nil+ if no match is found.\n\nSee also Array#index.\n\nIf neither block nor argument is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"b\", \"b\", \"c\" ]\n   a.rindex(\"b\")             #=> 3\n   a.rindex(\"z\")             #=> nil\n   a.rindex { |x| x == \"b\" } #=> 3",
  "join": "Returns a string created by converting each element of the array to\na string, separated by the given +separator+.\nIf the +separator+ is +nil+, it uses current $,.\nIf both the +separator+ and $, are nil, it uses empty string.\n\n   [ \"a\", \"b\", \"c\" ].join        #=> \"abc\"\n   [ \"a\", \"b\", \"c\" ].join(\"-\")   #=> \"a-b-c\"",
  "reverse": "Returns a new array containing +self+'s elements in reverse order.\n\n   [ \"a\", \"b\", \"c\" ].reverse   #=> [\"c\", \"b\", \"a\"]\n   [ 1 ].reverse               #=> [1]",
  "reverse!": "Reverses +self+ in place.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.reverse!       #=> [\"c\", \"b\", \"a\"]\n   a                #=> [\"c\", \"b\", \"a\"]",
  "rotate": "Returns a new array by rotating +self+ so that the element at +count+ is\nthe first element of the new array.\n\nIf +count+ is negative then it rotates in the opposite direction, starting\nfrom the end of +self+ where +-1+ is the last element.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.rotate         #=> [\"b\", \"c\", \"d\", \"a\"]\n   a                #=> [\"a\", \"b\", \"c\", \"d\"]\n   a.rotate(2)      #=> [\"c\", \"d\", \"a\", \"b\"]\n   a.rotate(-3)     #=> [\"b\", \"c\", \"d\", \"a\"]",
  "rotate!": "Rotates +self+ in place so that the element at +count+ comes first, and\nreturns +self+.\n\nIf +count+ is negative then it rotates in the opposite direction, starting\nfrom the end of the array where +-1+ is the last element.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.rotate!        #=> [\"b\", \"c\", \"d\", \"a\"]\n   a                #=> [\"b\", \"c\", \"d\", \"a\"]\n   a.rotate!(2)     #=> [\"d\", \"a\", \"b\", \"c\"]\n   a.rotate!(-3)    #=> [\"a\", \"b\", \"c\", \"d\"]",
  "sort": "Returns a new array created by sorting +self+.\n\nComparisons for the sort will be done using the <code><=></code> operator\nor using an optional code block.\n\nThe block must implement a comparison between +a+ and +b+, and return\n+-1+, when +a+ follows +b+, +0+ when +a+ and +b+ are equivalent, or ++1+\nif +b+ follows +a+.\n\n\nSee also Enumerable#sort_by.\n\n   a = [ \"d\", \"a\", \"e\", \"c\", \"b\" ]\n   a.sort                    #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   a.sort { |x,y| y <=> x }  #=> [\"e\", \"d\", \"c\", \"b\", \"a\"]",
  "sort!": "Sorts +self+ in place.\n\nComparisons for the sort will be done using the <code><=></code> operator\nor using an optional code block.\n\nThe block must implement a comparison between +a+ and +b+, and return\n+-1+, when +a+ follows +b+, +0+ when +a+ and +b+ are equivalent, or ++1+\nif +b+ follows +a+.\n\nSee also Enumerable#sort_by.\n\n   a = [ \"d\", \"a\", \"e\", \"c\", \"b\" ]\n   a.sort!                    #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   a.sort! { |x,y| y <=> x }  #=> [\"e\", \"d\", \"c\", \"b\", \"a\"]",
  "sort_by!": "Sorts +self+ in place using a set of keys generated by mapping the\nvalues in +self+ through the given block.\n\nIf no block is given, an Enumerator is returned instead.",
  "collect": "Invokes the given block once for each element of +self+.\n\nCreates a new array containing the values returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.collect { |x| x + \"!\" }        #=> [\"a!\", \"b!\", \"c!\", \"d!\"]\n   a.map.with_index{ |x, i| x * i } #=> [\"\", \"b\", \"cc\", \"ddd\"]\n   a                                #=> [\"a\", \"b\", \"c\", \"d\"]",
  "collect!": "Invokes the given block once for each element of +self+, replacing the\nelement with the value returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.map! {|x| x + \"!\" }\n   a #=>  [ \"a!\", \"b!\", \"c!\", \"d!\" ]\n   a.collect!.with_index {|x, i| x[0...i] }\n   a #=>  [\"\", \"b\", \"c!\", \"d!\"]",
  "map": "Invokes the given block once for each element of +self+.\n\nCreates a new array containing the values returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.collect { |x| x + \"!\" }        #=> [\"a!\", \"b!\", \"c!\", \"d!\"]\n   a.map.with_index{ |x, i| x * i } #=> [\"\", \"b\", \"cc\", \"ddd\"]\n   a                                #=> [\"a\", \"b\", \"c\", \"d\"]",
  "map!": "Invokes the given block once for each element of +self+, replacing the\nelement with the value returned by the block.\n\nSee also Enumerable#collect.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.map! {|x| x + \"!\" }\n   a #=>  [ \"a!\", \"b!\", \"c!\", \"d!\" ]\n   a.collect!.with_index {|x, i| x[0...i] }\n   a #=>  [\"\", \"b\", \"c!\", \"d!\"]",
  "select": "Returns a new array containing all elements of +ary+\nfor which the given +block+ returns a true value.\n\nIf no block is given, an Enumerator is returned instead.\n\n   [1,2,3,4,5].select { |num|  num.even?  }   #=> [2, 4]\n\n   a = %w{ a b c d e f }\n   a.select { |v| v =~ /[aeiou]/ }  #=> [\"a\", \"e\"]\n\nSee also Enumerable#select.",
  "select!": "Invokes the given block passing in successive elements from +self+,\ndeleting elements for which the block returns a +false+ value.\n\nIf changes were made, it will return +self+, otherwise it returns +nil+.\n\nSee also Array#keep_if\n\nIf no block is given, an Enumerator is returned instead.",
  "keep_if": "Deletes every element of +self+ for which the given block evaluates to\n+false+.\n\nSee also Array#select!\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = %w{ a b c d e f }\n   a.keep_if { |v| v =~ /[aeiou]/ }  #=> [\"a\", \"e\"]",
  "values_at": "Returns an array containing the elements in +self+ corresponding to the\ngiven +selector+(s).\n\nThe selectors may be either integer indices or ranges.\n\nSee also Array#select.\n\n   a = %w{ a b c d e f }\n   a.values_at(1, 3, 5)          # => [\"b\", \"d\", \"f\"]\n   a.values_at(1, 3, 5, 7)       # => [\"b\", \"d\", \"f\", nil]\n   a.values_at(-1, -2, -2, -7)   # => [\"f\", \"e\", \"e\", nil]\n   a.values_at(4..6, 3...6)      # => [\"e\", \"f\", nil, \"d\", \"e\", \"f\"]",
  "delete": "Deletes all items from +self+ that are equal to +obj+.\n\nReturns the last deleted item, or +nil+ if no matching item is found.\n\nIf the optional code block is given, the result of the block is returned if\nthe item is not found.  (To remove +nil+ elements and get an informative\nreturn value, use Array#compact!)\n\n   a = [ \"a\", \"b\", \"b\", \"b\", \"c\" ]\n   a.delete(\"b\")                   #=> \"b\"\n   a                               #=> [\"a\", \"c\"]\n   a.delete(\"z\")                   #=> nil\n   a.delete(\"z\") { \"not found\" }   #=> \"not found\"",
  "delete_at": "Deletes the element at the specified +index+, returning that element, or\n+nil+ if the +index+ is out of range.\n\nSee also Array#slice!\n\n   a = [\"ant\", \"bat\", \"cat\", \"dog\"]\n   a.delete_at(2)    #=> \"cat\"\n   a                 #=> [\"ant\", \"bat\", \"dog\"]\n   a.delete_at(99)   #=> nil",
  "delete_if": "Deletes every element of +self+ for which block evaluates to +true+.\n\nThe array is changed instantly every time the block is called, not after\nthe iteration is over.\n\nSee also Array#reject!\n\nIf no block is given, an Enumerator is returned instead.\n\n   scores = [ 97, 42, 75 ]\n   scores.delete_if {|score| score < 80 }   #=> [97]",
  "reject": "Returns a new array containing the items in +self+ for which the given\nblock is not +true+.\n\nSee also Array#delete_if\n\nIf no block is given, an Enumerator is returned instead.",
  "reject!": "Equivalent to Array#delete_if, deleting elements from +self+ for which the\nblock evaluates to +true+, but returns +nil+ if no changes were made.\n\nThe array is changed instantly every time the block is called, not after\nthe iteration is over.\n\nSee also Enumerable#reject and Array#delete_if.\n\nIf no block is given, an Enumerator is returned instead.",
  "zip": "Converts any arguments to arrays, then merges elements of +self+ with\ncorresponding elements from each argument.\n\nThis generates a sequence of <code>ary.size</code> _n_-element arrays,\nwhere _n_ is one more than the count of arguments.\n\nIf the size of any argument is less than the size of the initial array,\n+nil+ values are supplied.\n\nIf a block is given, it is invoked for each output +array+, otherwise an\narray of arrays is returned.\n\n   a = [ 4, 5, 6 ]\n   b = [ 7, 8, 9 ]\n   [1, 2, 3].zip(a, b)   #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n   [1, 2].zip(a, b)      #=> [[1, 4, 7], [2, 5, 8]]\n   a.zip([1, 2], [8])    #=> [[4, 1, 8], [5, 2, nil], [6, nil, nil]]",
  "transpose": "Assumes that +self+ is an array of arrays and transposes the rows and\ncolumns.\n\n   a = [[1,2], [3,4], [5,6]]\n   a.transpose   #=> [[1, 3, 5], [2, 4, 6]]\n\nIf the length of the subarrays don't match, an IndexError is raised.",
  "replace": "Replaces the contents of +self+ with the contents of +other_ary+,\ntruncating or expanding if necessary.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.replace([ \"x\", \"y\", \"z\" ])   #=> [\"x\", \"y\", \"z\"]\n   a                              #=> [\"x\", \"y\", \"z\"]",
  "clear": "Removes all elements from +self+.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a.clear    #=> [ ]",
  "fill": "The first three forms set the selected elements of +self+ (which\nmay be the entire array) to +obj+.\n\nA +start+ of +nil+ is equivalent to zero.\n\nA +length+ of +nil+ is equivalent to the length of the array.\n\nThe last three forms fill the array with the value of the given block,\nwhich is passed the absolute index of each element to be filled.\n\nNegative values of +start+ count from the end of the array, where +-1+ is\nthe last element.\n\n   a = [ \"a\", \"b\", \"c\", \"d\" ]\n   a.fill(\"x\")              #=> [\"x\", \"x\", \"x\", \"x\"]\n   a.fill(\"z\", 2, 2)        #=> [\"x\", \"x\", \"z\", \"z\"]\n   a.fill(\"y\", 0..1)        #=> [\"y\", \"y\", \"z\", \"z\"]\n   a.fill { |i| i*i }       #=> [0, 1, 4, 9]\n   a.fill(-2) { |i| i*i*i } #=> [0, 1, 8, 27]",
  "include?": "Returns +true+ if the given +object+ is present in +self+ (that is, if any\nelement <code>==</code> +object+), otherwise returns +false+.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.include?(\"b\")   #=> true\n   a.include?(\"z\")   #=> false",
  "<=>": "Comparison --- Returns an integer (+-1+, +0+, or <code>+1</code>) if this\narray is less than, equal to, or greater than +other_ary+.\n\n+nil+ is returned if the two values are incomparable.\n\nEach object in each array is compared (using the <=> operator).\n\nArrays are compared in an \"element-wise\" manner; the first two elements\nthat are not equal will determine the return value for the whole\ncomparison.\n\nIf all the values are equal, then the return is based on a comparison of\nthe array lengths. Thus, two arrays are \"equal\" according to Array#<=> if,\nand only if, they have the same length and the value of each element is\nequal to the value of the corresponding element in the other array.\n\n   [ \"a\", \"a\", \"c\" ]    <=> [ \"a\", \"b\", \"c\" ]   #=> -1\n   [ 1, 2, 3, 4, 5, 6 ] <=> [ 1, 2 ]            #=> +1",
  "slice": "Element Reference --- Returns the element at +index+, or returns a\nsubarray starting at the +start+ index and continuing for +length+\nelements, or returns a subarray specified by +range+ of indices.\n\nNegative indices count backward from the end of the array (-1 is the last\nelement).  For +start+ and +range+ cases the starting index is just before\nan element.  Additionally, an empty array is returned when the starting\nindex for an element range is at the end of the array.\n\nReturns +nil+ if the index (or starting index) are out of range.\n\n   a = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n   a[2] +  a[0] + a[1]    #=> \"cab\"\n   a[6]                   #=> nil\n   a[1, 2]                #=> [ \"b\", \"c\" ]\n   a[1..3]                #=> [ \"b\", \"c\", \"d\" ]\n   a[4..7]                #=> [ \"e\" ]\n   a[6..10]               #=> nil\n   a[-3, 3]               #=> [ \"c\", \"d\", \"e\" ]\n   # special cases\n   a[5]                   #=> nil\n   a[6, 1]                #=> nil\n   a[5, 1]                #=> []\n   a[5..10]               #=> []",
  "slice!": "Deletes the element(s) given by an +index+ (optionally up to +length+\nelements) or by a +range+.\n\nReturns the deleted object (or objects), or +nil+ if the +index+ is out of\nrange.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   a.slice!(1)     #=> \"b\"\n   a               #=> [\"a\", \"c\"]\n   a.slice!(-1)    #=> \"c\"\n   a               #=> [\"a\"]\n   a.slice!(100)   #=> nil\n   a               #=> [\"a\"]",
  "assoc": "Searches through an array whose elements are also arrays comparing +obj+\nwith the first element of each contained array using <code>obj.==</code>.\n\nReturns the first contained array that matches (that is, the first\nassociated array), or +nil+ if no match is found.\n\nSee also Array#rassoc\n\n   s1 = [ \"colors\", \"red\", \"blue\", \"green\" ]\n   s2 = [ \"letters\", \"a\", \"b\", \"c\" ]\n   s3 = \"foo\"\n   a  = [ s1, s2, s3 ]\n   a.assoc(\"letters\")  #=> [ \"letters\", \"a\", \"b\", \"c\" ]\n   a.assoc(\"foo\")      #=> nil",
  "rassoc": "Searches through the array whose elements are also arrays.\n\nCompares +obj+ with the second element of each contained array using\n<code>obj.==</code>.\n\nReturns the first contained array that matches +obj+.\n\nSee also Array#assoc.\n\n   a = [ [ 1, \"one\"], [2, \"two\"], [3, \"three\"], [\"ii\", \"two\"] ]\n   a.rassoc(\"two\")    #=> [2, \"two\"]\n   a.rassoc(\"four\")   #=> nil",
  "+": "Concatenation --- Returns a new array built by concatenating the\ntwo arrays together to produce a third array.\n\n   [ 1, 2, 3 ] + [ 4, 5 ]    #=> [ 1, 2, 3, 4, 5 ]\n   a = [ \"a\", \"b\", \"c\" ]\n   c = a + [ \"d\", \"e\", \"f\" ]\n   c                         #=> [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" ]\n   a                         #=> [ \"a\", \"b\", \"c\" ]\n\nSee also Array#concat.",
  "*": "Repetition --- With a String argument, equivalent to\n<code>ary.join(str)</code>.\n\nOtherwise, returns a new array built by concatenating the +int+ copies of\n+self+.\n\n\n   [ 1, 2, 3 ] * 3    #=> [ 1, 2, 3, 1, 2, 3, 1, 2, 3 ]\n   [ 1, 2, 3 ] * \",\"  #=> \"1,2,3\"",
  "-": "Array Difference\n\nReturns a new array that is a copy of the original array, removing any\nitems that also appear in +other_ary+. The order is preserved from the\noriginal array.\n\nIt compares elements using their #hash and #eql? methods for efficiency.\n\n   [ 1, 1, 2, 2, 3, 3, 4, 5 ] - [ 1, 2, 4 ]  #=>  [ 3, 3, 5 ]\n\nIf you need set-like behavior, see the library class Set.",
  "&": "Set Intersection --- Returns a new array containing elements common to the\ntwo arrays, excluding any duplicates. The order is preserved from the\noriginal array.\n\nIt compares elements using their #hash and #eql? methods for efficiency.\n\n   [ 1, 1, 3, 5 ] & [ 1, 2, 3 ]                 #=> [ 1, 3 ]\n   [ 'a', 'b', 'b', 'z' ] & [ 'a', 'b', 'c' ]   #=> [ 'a', 'b' ]\n\nSee also Array#uniq.",
  "|": "Set Union --- Returns a new array by joining +ary+ with +other_ary+,\nexcluding any duplicates and preserving the order from the original array.\n\nIt compares elements using their #hash and #eql? methods for efficiency.\n\n   [ \"a\", \"b\", \"c\" ] | [ \"c\", \"d\", \"a\" ]    #=> [ \"a\", \"b\", \"c\", \"d\" ]\n\nSee also Array#uniq.",
  "uniq": "Returns a new array by removing duplicate values in +self+.\n\nIf a block is given, it will use the return value of the block for comparison.\n\nIt compares values using their #hash and #eql? methods for efficiency.\n\n   a = [ \"a\", \"a\", \"b\", \"b\", \"c\" ]\n   a.uniq   # => [\"a\", \"b\", \"c\"]\n\n   b = [[\"student\",\"sam\"], [\"student\",\"george\"], [\"teacher\",\"matz\"]]\n   b.uniq { |s| s.first } # => [[\"student\", \"sam\"], [\"teacher\", \"matz\"]]",
  "uniq!": "Removes duplicate elements from +self+.\n\nIf a block is given, it will use the return value of the block for\ncomparison.\n\nIt compares values using their #hash and #eql? methods for efficiency.\n\nReturns +nil+ if no changes are made (that is, no duplicates are found).\n\n   a = [ \"a\", \"a\", \"b\", \"b\", \"c\" ]\n   a.uniq!   # => [\"a\", \"b\", \"c\"]\n\n   b = [ \"a\", \"b\", \"c\" ]\n   b.uniq!   # => nil\n\n   c = [[\"student\",\"sam\"], [\"student\",\"george\"], [\"teacher\",\"matz\"]]\n   c.uniq! { |s| s.first } # => [[\"student\", \"sam\"], [\"teacher\", \"matz\"]]",
  "compact": "Returns a copy of +self+ with all +nil+ elements removed.\n\n   [ \"a\", nil, \"b\", nil, \"c\", nil ].compact\n                     #=> [ \"a\", \"b\", \"c\" ]",
  "compact!": "Removes +nil+ elements from the array.\n\nReturns +nil+ if no changes were made, otherwise returns the array.\n\n   [ \"a\", nil, \"b\", nil, \"c\" ].compact! #=> [ \"a\", \"b\", \"c\" ]\n   [ \"a\", \"b\", \"c\" ].compact!           #=> nil",
  "flatten": "Returns a new array that is a one-dimensional flattening of +self+\n(recursively).\n\nThat is, for every element that is an array, extract its elements into\nthe new array.\n\nThe optional +level+ argument determines the level of recursion to\nflatten.\n\n   s = [ 1, 2, 3 ]           #=> [1, 2, 3]\n   t = [ 4, 5, 6, [7, 8] ]   #=> [4, 5, 6, [7, 8]]\n   a = [ s, t, 9, 10 ]       #=> [[1, 2, 3], [4, 5, 6, [7, 8]], 9, 10]\n   a.flatten                 #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   a = [ 1, 2, [3, [4, 5] ] ]\n   a.flatten(1)              #=> [1, 2, 3, [4, 5]]",
  "flatten!": "Flattens +self+ in place.\n\nReturns +nil+ if no modifications were made (i.e., the array contains no\nsubarrays.)\n\nThe optional +level+ argument determines the level of recursion to flatten.\n\n   a = [ 1, 2, [3, [4, 5] ] ]\n   a.flatten!   #=> [1, 2, 3, 4, 5]\n   a.flatten!   #=> nil\n   a            #=> [1, 2, 3, 4, 5]\n   a = [ 1, 2, [3, [4, 5] ] ]\n   a.flatten!(1) #=> [1, 2, 3, [4, 5]]",
  "count": "Returns the number of elements.\n\nIf an argument is given, counts the number of elements which equal +obj+\nusing <code>==</code>.\n\nIf a block is given, counts the number of elements for which the block\nreturns a true value.\n\n   ary = [1, 2, 4, 2]\n   ary.count                  #=> 4\n   ary.count(2)               #=> 2\n   ary.count { |x| x%2 == 0 } #=> 3",
  "shuffle!": "Shuffles elements in +self+ in place.\n\nThe optional +rng+ argument will be used as the random number generator.",
  "shuffle": "Returns a new array with elements of +self+ shuffled.\n\n   a = [ 1, 2, 3 ]           #=> [1, 2, 3]\n   a.shuffle                 #=> [2, 3, 1]\n\nThe optional +rng+ argument will be used as the random number generator.\n\n   a.shuffle(random: Random.new(1))  #=> [1, 3, 2]",
  "sample": "Choose a random element or +n+ random elements from the array.\n\nThe elements are chosen by using random and unique indices into the array\nin order to ensure that an element doesn't repeat itself unless the array\nalready contained duplicate elements.\n\nIf the array is empty the first form returns +nil+ and the second form\nreturns an empty array.\n\nThe optional +rng+ argument will be used as the random number generator.\n\n   a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n   a.sample         #=> 7\n   a.sample(4)      #=> [6, 4, 2, 5]",
  "cycle": "Calls the given block for each element +n+ times or forever if +nil+ is\ngiven.\n\nDoes nothing if a non-positive number is given or the array is empty.\n\nReturns +nil+ if the loop has finished without getting interrupted.\n\nIf no block is given, an Enumerator is returned instead.\n\n   a = [\"a\", \"b\", \"c\"]\n   a.cycle { |x| puts x }     # print, a, b, c, a, b, c,.. forever.\n   a.cycle(2) { |x| puts x }  # print, a, b, c, a, b, c.",
  "permutation": "When invoked with a block, yield all permutations of length +n+ of the\nelements of the array, then return the array itself.\n\nIf +n+ is not specified, yield all permutations of all elements.\n\nThe implementation makes no guarantees about the order in which the\npermutations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n a = [1, 2, 3]\n a.permutation.to_a    #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n a.permutation(1).to_a #=> [[1],[2],[3]]\n a.permutation(2).to_a #=> [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]\n a.permutation(3).to_a #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n a.permutation(0).to_a #=> [[]] # one permutation of length 0\n a.permutation(4).to_a #=> []   # no permutations of length 4",
  "combination": "When invoked with a block, yields all combinations of length +n+ of elements\nfrom the array and then returns the array itself.\n\nThe implementation makes no guarantees about the order in which the\ncombinations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n   a = [1, 2, 3, 4]\n   a.combination(1).to_a  #=> [[1],[2],[3],[4]]\n   a.combination(2).to_a  #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n   a.combination(3).to_a  #=> [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\n   a.combination(4).to_a  #=> [[1,2,3,4]]\n   a.combination(0).to_a  #=> [[]] # one combination of length 0\n   a.combination(5).to_a  #=> []   # no combinations of length 5",
  "repeated_permutation": "When invoked with a block, yield all repeated permutations of length +n+ of\nthe elements of the array, then return the array itself.\n\nThe implementation makes no guarantees about the order in which the repeated\npermutations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n   a = [1, 2]\n   a.repeated_permutation(1).to_a  #=> [[1], [2]]\n   a.repeated_permutation(2).to_a  #=> [[1,1],[1,2],[2,1],[2,2]]\n   a.repeated_permutation(3).to_a  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],\n                                   #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]\n   a.repeated_permutation(0).to_a  #=> [[]] # one permutation of length 0",
  "repeated_combination": "When invoked with a block, yields all repeated combinations of length +n+ of\nelements from the array and then returns the array itself.\n\nThe implementation makes no guarantees about the order in which the repeated\ncombinations are yielded.\n\nIf no block is given, an Enumerator is returned instead.\n\nExamples:\n\n a = [1, 2, 3]\n a.repeated_combination(1).to_a  #=> [[1], [2], [3]]\n a.repeated_combination(2).to_a  #=> [[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]]\n a.repeated_combination(3).to_a  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],\n                                 #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]\n a.repeated_combination(4).to_a  #=> [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,2,2],[1,1,2,3],\n                                 #    [1,1,3,3],[1,2,2,2],[1,2,2,3],[1,2,3,3],[1,3,3,3],\n                                 #    [2,2,2,2],[2,2,2,3],[2,2,3,3],[2,3,3,3],[3,3,3,3]]\n a.repeated_combination(0).to_a  #=> [[]] # one combination of length 0",
  "product": "Returns an array of all combinations of elements from all arrays.\n\nThe length of the returned array is the product of the length of +self+ and\nthe argument arrays.\n\nIf given a block, #product will yield all combinations and return +self+\ninstead.\n\n   [1,2,3].product([4,5])     #=> [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]\n   [1,2].product([1,2])       #=> [[1,1],[1,2],[2,1],[2,2]]\n   [1,2].product([3,4],[5,6]) #=> [[1,3,5],[1,3,6],[1,4,5],[1,4,6],\n                              #     [2,3,5],[2,3,6],[2,4,5],[2,4,6]]\n   [1,2].product()            #=> [[1],[2]]\n   [1,2].product([])          #=> []",
  "take": "Returns first +n+ elements from the array.\n\nIf a negative number is given, raises an ArgumentError.\n\nSee also Array#drop\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.take(3)             #=> [1, 2, 3]",
  "take_while": "Passes elements to the block until the block returns +nil+ or +false+, then\nstops iterating and returns an array of all prior elements.\n\nIf no block is given, an Enumerator is returned instead.\n\nSee also Array#drop_while\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.take_while { |i| i < 3 }  #=> [1, 2]",
  "drop": "Drops first +n+ elements from +ary+ and returns the rest of the elements in\nan array.\n\nIf a negative number is given, raises an ArgumentError.\n\nSee also Array#take\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.drop(3)             #=> [4, 5, 0]",
  "drop_while": "Drops elements up to, but not including, the first element for which the\nblock returns +nil+ or +false+ and returns an array containing the\nremaining elements.\n\nIf no block is given, an Enumerator is returned instead.\n\nSee also Array#take_while\n\n   a = [1, 2, 3, 4, 5, 0]\n   a.drop_while {|i| i < 3 }   #=> [3, 4, 5, 0]",
  "bsearch": "By using binary search, finds a value from this array which meets\nthe given condition in O(log n) where n is the size of the array.\n\nYou can use this method in two use cases: a find-minimum mode and\na find-any mode.  In either case, the elements of the array must be\nmonotone (or sorted) with respect to the block.\n\nIn find-minimum mode (this is a good choice for typical use case),\nthe block must return true or false, and there must be an index i\n(0 <= i <= ary.size) so that:\n\n- the block returns false for any element whose index is less than\n  i, and\n- the block returns true for any element whose index is greater\n  than or equal to i.\n\nThis method returns the i-th element.  If i is equal to ary.size,\nit returns nil.\n\n   ary = [0, 4, 7, 10, 12]\n   ary.bsearch {|x| x >=   4 } #=> 4\n   ary.bsearch {|x| x >=   6 } #=> 7\n   ary.bsearch {|x| x >=  -1 } #=> 0\n   ary.bsearch {|x| x >= 100 } #=> nil\n\nIn find-any mode (this behaves like libc's bsearch(3)), the block\nmust return a number, and there must be two indices i and j\n(0 <= i <= j <= ary.size) so that:\n\n- the block returns a positive number for ary[k] if 0 <= k < i,\n- the block returns zero for ary[k] if i <= k < j, and\n- the block returns a negative number for ary[k] if\n  j <= k < ary.size.\n\nUnder this condition, this method returns any element whose index\nis within i...j.  If i is equal to j (i.e., there is no element\nthat satisfies the block), this method returns nil.\n\n   ary = [0, 4, 7, 10, 12]\n   # try to find v such that 4 <= v < 8\n   ary.bsearch {|x| 1 - x / 4 } #=> 4 or 7\n   # try to find v such that 8 <= v < 10\n   ary.bsearch {|x| 4 - x / 2 } #=> nil\n\nYou must not mix the two modes at a time; the block must always\nreturn either true/false, or always return a number.  It is\nundefined which value is actually picked up at each iteration.",
  "__resize__": "",
  "pack": "Packs the contents of <i>arr</i> into a binary sequence according to\nthe directives in <i>aTemplateString</i> (see the table below)\nDirectives ``A,'' ``a,'' and ``Z'' may be followed by a count,\nwhich gives the width of the resulting field. The remaining\ndirectives also may take a count, indicating the number of array\nelements to convert. If the count is an asterisk\n(``<code>*</code>''), all remaining array elements will be\nconverted. Any of the directives ``<code>sSiIlL</code>'' may be\nfollowed by an underscore (``<code>_</code>'') or\nexclamation mark (``<code>!</code>'') to use the underlying\nplatform's native size for the specified type; otherwise, they use a\nplatform-independent size. Spaces are ignored in the template\nstring. See also <code>String#unpack</code>.\n\n   a = [ \"a\", \"b\", \"c\" ]\n   n = [ 65, 66, 67 ]\n   a.pack(\"A3A3A3\")   #=> \"a  b  c  \"\n   a.pack(\"a3a3a3\")   #=> \"a\\000\\000b\\000\\000c\\000\\000\"\n   n.pack(\"ccc\")      #=> \"ABC\"\n\nDirectives for +pack+.\n\n Integer      | Array   |\n Directive    | Element | Meaning\n ---------------------------------------------------------------------------\n    C         | Integer | 8-bit unsigned (unsigned char)\n    S         | Integer | 16-bit unsigned, native endian (uint16_t)\n    L         | Integer | 32-bit unsigned, native endian (uint32_t)\n    Q         | Integer | 64-bit unsigned, native endian (uint64_t)\n              |         |\n    c         | Integer | 8-bit signed (signed char)\n    s         | Integer | 16-bit signed, native endian (int16_t)\n    l         | Integer | 32-bit signed, native endian (int32_t)\n    q         | Integer | 64-bit signed, native endian (int64_t)\n              |         |\n    S_, S!    | Integer | unsigned short, native endian\n    I, I_, I! | Integer | unsigned int, native endian\n    L_, L!    | Integer | unsigned long, native endian\n    Q_, Q!    | Integer | unsigned long long, native endian (ArgumentError\n              |         | if the platform has no long long type.)\n              |         | (Q_ and Q! is available since Ruby 2.1.)\n              |         |\n    s_, s!    | Integer | signed short, native endian\n    i, i_, i! | Integer | signed int, native endian\n    l_, l!    | Integer | signed long, native endian\n    q_, q!    | Integer | signed long long, native endian (ArgumentError\n              |         | if the platform has no long long type.)\n              |         | (q_ and q! is available since Ruby 2.1.)\n              |         |\n    S> L> Q>  | Integer | same as the directives without \">\" except\n    s> l> q>  |         | big endian\n    S!> I!>   |         | (available since Ruby 1.9.3)\n    L!> Q!>   |         | \"S>\" is same as \"n\"\n    s!> i!>   |         | \"L>\" is same as \"N\"\n    l!> q!>   |         |\n              |         |\n    S< L< Q<  | Integer | same as the directives without \"<\" except\n    s< l< q<  |         | little endian\n    S!< I!<   |         | (available since Ruby 1.9.3)\n    L!< Q!<   |         | \"S<\" is same as \"v\"\n    s!< i!<   |         | \"L<\" is same as \"V\"\n    l!< q!<   |         |\n              |         |\n    n         | Integer | 16-bit unsigned, network (big-endian) byte order\n    N         | Integer | 32-bit unsigned, network (big-endian) byte order\n    v         | Integer | 16-bit unsigned, VAX (little-endian) byte order\n    V         | Integer | 32-bit unsigned, VAX (little-endian) byte order\n              |         |\n    U         | Integer | UTF-8 character\n    w         | Integer | BER-compressed integer\n\n Float        |         |\n Directive    |         | Meaning\n ---------------------------------------------------------------------------\n    D, d      | Float   | double-precision, native format\n    F, f      | Float   | single-precision, native format\n    E         | Float   | double-precision, little-endian byte order\n    e         | Float   | single-precision, little-endian byte order\n    G         | Float   | double-precision, network (big-endian) byte order\n    g         | Float   | single-precision, network (big-endian) byte order\n\n String       |         |\n Directive    |         | Meaning\n ---------------------------------------------------------------------------\n    A         | String  | arbitrary binary string (space padded, count is width)\n    a         | String  | arbitrary binary string (null padded, count is width)\n    Z         | String  | same as ``a'', except that null is added with *\n    B         | String  | bit string (MSB first)\n    b         | String  | bit string (LSB first)\n    H         | String  | hex string (high nibble first)\n    h         | String  | hex string (low nibble first)\n    u         | String  | UU-encoded string\n    M         | String  | quoted printable, MIME encoding (see RFC2045)\n    m         | String  | base64 encoded string (see RFC 2045, count is width)\n              |         | (if count is 0, no line feed are added, see RFC 4648)\n    P         | String  | pointer to a structure (fixed-length string)\n    p         | String  | pointer to a null-terminated string\n\n Misc.        |         |\n Directive    |         | Meaning\n ---------------------------------------------------------------------------\n    @         | ---     | moves to absolute position\n    X         | ---     | back up a byte\n    x         | ---     | null byte"
}