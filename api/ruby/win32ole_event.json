{
  "message_loop": "Translates and dispatches Windows message.",
  "initialize": "Returns OLE event object.\nThe first argument specifies WIN32OLE object.\nThe second argument specifies OLE event name.\n   ie = WIN32OLE.new('InternetExplorer.Application')\n   ev = WIN32OLE_EVENT.new(ie, 'DWebBrowserEvents')",
  "on_event": "Defines the callback event.\nIf argument is omitted, this method defines the callback of all events.\nIf you want to modify reference argument in callback, return hash in\ncallback. If you want to return value to OLE server as result of callback\nuse `return' or :return.\n\n  ie = WIN32OLE.new('InternetExplorer.Application')\n  ev = WIN32OLE_EVENT.new(ie)\n  ev.on_event(\"NavigateComplete\") {|url| puts url}\n  ev.on_event() {|ev, *args| puts \"#{ev} fired\"}\n\n  ev.on_event(\"BeforeNavigate2\") {|*args|\n    ...\n    # set true to BeforeNavigate reference argument `Cancel'.\n    # Cancel is 7-th argument of BeforeNavigate,\n    # so you can use 6 as key of hash instead of 'Cancel'.\n    # The argument is counted from 0.\n    # The hash key of 0 means first argument.)\n    {:Cancel => true}  # or {'Cancel' => true} or {6 => true}\n  }\n\n  ev.on_event(...) {|*args|\n    {:return => 1, :xxx => yyy}\n  }",
  "on_event_with_outargs": "Defines the callback of event.\nIf you want modify argument in callback,\nyou could use this method instead of WIN32OLE_EVENT#on_event.\n\n  ie = WIN32OLE.new('InternetExplorer.Application')\n  ev = WIN32OLE_EVENT.new(ie)\n  ev.on_event_with_outargs('BeforeNavigate2') {|*args|\n    args.last[6] = true\n  }",
  "off_event": "removes the callback of event.\n\n  ie = WIN32OLE.new('InternetExplorer.Application')\n  ev = WIN32OLE_EVENT.new(ie)\n  ev.on_event('BeforeNavigate2') {|*args|\n    args.last[6] = true\n  }\n    ...\n  ev.off_event('BeforeNavigate2')\n    ...",
  "unadvise": "disconnects OLE server. If this method called, then the WIN32OLE_EVENT object\ndoes not receive the OLE server event any more.\nThis method is trial implementation.\n\n    ie = WIN32OLE.new('InternetExplorer.Application')\n    ev = WIN32OLE_EVENT.new(ie)\n    ev.on_event() {...}\n       ...\n    ev.unadvise",
  "handler=": "sets event handler object. If handler object has onXXX\nmethod according to XXX event, then onXXX method is called\nwhen XXX event occurs.\n\nIf handler object has method_missing and there is no\nmethod according to the event, then method_missing\ncalled and 1-st argument is event name.\n\nIf handler object has onXXX method and there is block\ndefined by WIN32OLE_EVENT#on_event('XXX'){},\nthen block is executed but handler object method is not called\nwhen XXX event occurs.\n\n    class Handler\n      def onStatusTextChange(text)\n        puts \"StatusTextChanged\"\n      end\n      def onPropertyChange(prop)\n        puts \"PropertyChanged\"\n      end\n      def method_missing(ev, *arg)\n        puts \"other event #{ev}\"\n      end\n    end\n\n    handler = Handler.new\n    ie = WIN32OLE.new('InternetExplorer.Application')\n    ev = WIN32OLE_EVENT.new(ie)\n    ev.on_event(\"StatusTextChange\") {|*args|\n      puts \"this block executed.\"\n      puts \"handler.onStatusTextChange method is not called.\"\n    }\n    ev.handler = handler",
  "handler": "returns handler object."
}