{
  "now": "Creates a new Time object for the current time.\n\n   Time.now            #=> 2009-06-24 12:39:54 +0900",
  "at": "Creates a new Time object with the value given by +time+,\nthe given number of +seconds_with_frac+, or\n+seconds+ and +microseconds_with_frac+ since the Epoch.\n+seconds_with_frac+ and +microseconds_with_frac+\ncan be an Integer, Float, Rational, or other Numeric.\nnon-portable feature allows the offset to be negative on some systems.\n\nIf a numeric argument is given, the result is in local time.\n\n   Time.at(0)                           #=> 1969-12-31 18:00:00 -0600\n   Time.at(Time.at(0))                  #=> 1969-12-31 18:00:00 -0600\n   Time.at(946702800)                   #=> 1999-12-31 23:00:00 -0600\n   Time.at(-284061600)                  #=> 1960-12-31 00:00:00 -0600\n   Time.at(946684800.2).usec            #=> 200000\n   Time.at(946684800, 123456.789).nsec  #=> 123456789",
  "utc": "Converts _time_ to UTC (GMT), modifying the receiver.\n\n   t = Time.now   #=> 2007-11-19 08:18:31 -0600\n   t.gmt?         #=> false\n   t.gmtime       #=> 2007-11-19 14:18:31 UTC\n   t.gmt?         #=> true\n\n   t = Time.now   #=> 2007-11-19 08:18:51 -0600\n   t.utc?         #=> false\n   t.utc          #=> 2007-11-19 14:18:51 UTC\n   t.utc?         #=> true",
  "gm": "Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other values default to the minimum value\nfor that field (and may be +nil+ or omitted). Months may\nbe specified by numbers from 1 to 12, or by the three-letter English\nmonth names. Hours are specified on a 24-hour clock (0..23). Raises\nan ArgumentError if any values are out of range. Will\nalso accept ten arguments in the order output by Time#to_a.\n\n+sec_with_frac+ and +usec_with_frac+ can have a fractional part.\n\n   Time.utc(2000,\"jan\",1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\n   Time.gm(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC",
  "local": "Same as Time::gm, but interprets the values in the\nlocal time zone.\n\n   Time.local(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600",
  "mktime": "Same as Time::gm, but interprets the values in the\nlocal time zone.\n\n   Time.local(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 -0600",
  "to_i": "Returns the value of _time_ as an integer number of seconds\nsince the Epoch.\n\n   t = Time.now\n   \"%10.5f\" % t.to_f   #=> \"1270968656.89607\"\n   t.to_i              #=> 1270968656",
  "to_f": "Returns the value of _time_ as a floating point number of\nseconds since the Epoch.\n\n   t = Time.now\n   \"%10.5f\" % t.to_f   #=> \"1270968744.77658\"\n   t.to_i              #=> 1270968744\n\nNote that IEEE 754 double is not accurate enough to represent\nthe number of nanoseconds since the Epoch.",
  "to_r": "Returns the value of _time_ as a rational number of seconds\nsince the Epoch.\n\n   t = Time.now\n   p t.to_r            #=> (1270968792716287611/1000000000)\n\nThis methods is intended to be used to get an accurate value\nrepresenting the nanoseconds since the Epoch. You can use this method\nto convert _time_ to another Epoch.",
  "<=>": "Comparison---Compares +time+ with +other_time+.\n\n-1, 0, +1 or nil depending on whether +time+ is less  than, equal to, or\ngreater than +other_time+.\n\n+nil+ is returned if the two values are incomparable.\n\n   t = Time.now       #=> 2007-11-19 08:12:12 -0600\n   t2 = t + 2592000   #=> 2007-12-19 08:12:12 -0600\n   t <=> t2           #=> -1\n   t2 <=> t           #=> 1\n\n   t = Time.now       #=> 2007-11-19 08:13:38 -0600\n   t2 = t + 0.1       #=> 2007-11-19 08:13:38 -0600\n   t.nsec             #=> 98222999\n   t2.nsec            #=> 198222999\n   t <=> t2           #=> -1\n   t2 <=> t           #=> 1\n   t <=> t            #=> 0",
  "eql?": "Returns +true+ if _time_ and +other_time+ are\nboth Time objects with the same seconds and fractional seconds.",
  "hash": "Returns a hash code for this Time object.",
  "initialize": "Returns a Time object.\n\nIt is initialized to the current system time if no argument is given.\n\n*Note:* The new object will use the resolution available on your\nsystem clock, and may include fractional seconds.\n\nIf one or more arguments specified, the time is initialized to the specified\ntime.\n\n+sec+ may have fraction if it is a rational.\n\n+utc_offset+ is the offset from UTC.\nIt can be a string such as \"+09:00\" or a number of seconds such as 32400.\n\n   a = Time.new      #=> 2007-11-19 07:50:02 -0600\n   b = Time.new      #=> 2007-11-19 07:50:02 -0600\n   a == b            #=> false\n   \"%.6f\" % a.to_f   #=> \"1195480202.282373\"\n   \"%.6f\" % b.to_f   #=> \"1195480202.283415\"\n\n   Time.new(2008,6,21, 13,30,0, \"+09:00\") #=> 2008-06-21 13:30:00 +0900\n\n   # A trip for RubyConf 2007\n   t1 = Time.new(2007,11,1,15,25,0, \"+09:00\") # JST (Narita)\n   t2 = Time.new(2007,11,1,12, 5,0, \"-05:00\") # CDT (Minneapolis)\n   t3 = Time.new(2007,11,1,13,25,0, \"-05:00\") # CDT (Minneapolis)\n   t4 = Time.new(2007,11,1,16,53,0, \"-04:00\") # EDT (Charlotte)\n   t5 = Time.new(2007,11,5, 9,24,0, \"-05:00\") # EST (Charlotte)\n   t6 = Time.new(2007,11,5,11,21,0, \"-05:00\") # EST (Detroit)\n   t7 = Time.new(2007,11,5,13,45,0, \"-05:00\") # EST (Detroit)\n   t8 = Time.new(2007,11,6,17,10,0, \"+09:00\") # JST (Narita)\n   p((t2-t1)/3600.0)                          #=> 10.666666666666666\n   p((t4-t3)/3600.0)                          #=> 2.466666666666667\n   p((t6-t5)/3600.0)                          #=> 1.95\n   p((t8-t7)/3600.0)                          #=> 13.416666666666666",
  "initialize_copy": ":nodoc:",
  "localtime": "Converts _time_ to local time (using the local time zone in\neffect for this process) modifying the receiver.\n\nIf +utc_offset+ is given, it is used instead of the local time.\n\n   t = Time.utc(2000, \"jan\", 1, 20, 15, 1) #=> 2000-01-01 20:15:01 UTC\n   t.utc?                                  #=> true\n\n   t.localtime                             #=> 2000-01-01 14:15:01 -0600\n   t.utc?                                  #=> false\n\n   t.localtime(\"+09:00\")                   #=> 2000-01-02 05:15:01 +0900\n   t.utc?                                  #=> false",
  "gmtime": "Converts _time_ to UTC (GMT), modifying the receiver.\n\n   t = Time.now   #=> 2007-11-19 08:18:31 -0600\n   t.gmt?         #=> false\n   t.gmtime       #=> 2007-11-19 14:18:31 UTC\n   t.gmt?         #=> true\n\n   t = Time.now   #=> 2007-11-19 08:18:51 -0600\n   t.utc?         #=> false\n   t.utc          #=> 2007-11-19 14:18:51 UTC\n   t.utc?         #=> true",
  "getlocal": "Returns a new Time object representing _time_ in\nlocal time (using the local time zone in effect for this process).\n\nIf +utc_offset+ is given, it is used instead of the local time.\n\n   t = Time.utc(2000,1,1,20,15,1)  #=> 2000-01-01 20:15:01 UTC\n   t.utc?                          #=> true\n\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.utc?                          #=> false\n   t == l                          #=> true\n\n   j = t.getlocal(\"+09:00\")        #=> 2000-01-02 05:15:01 +0900\n   j.utc?                          #=> false\n   t == j                          #=> true",
  "getgm": "Returns a new Time object representing _time_ in UTC.\n\n   t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\n   t.gmt?                             #=> false\n   y = t.getgm                        #=> 2000-01-02 02:15:01 UTC\n   y.gmt?                             #=> true\n   t == y                             #=> true",
  "getutc": "Returns a new Time object representing _time_ in UTC.\n\n   t = Time.local(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 -0600\n   t.gmt?                             #=> false\n   y = t.getgm                        #=> 2000-01-02 02:15:01 UTC\n   y.gmt?                             #=> true\n   t == y                             #=> true",
  "ctime": "Returns a canonical string representation of _time_.\n\n   Time.now.asctime   #=> \"Wed Apr  9 08:56:03 2003\"",
  "asctime": "Returns a canonical string representation of _time_.\n\n   Time.now.asctime   #=> \"Wed Apr  9 08:56:03 2003\"",
  "to_s": "Returns a string representing _time_. Equivalent to calling\n#strftime with the appropriate format string.\n\n   t = Time.now\n   t.to_s                              => \"2012-11-10 18:16:12 +0100\"\n   t.strftime \"%Y-%m-%d %H:%M:%S %z\"   => \"2012-11-10 18:16:12 +0100\"\n\n   t.utc.to_s                          => \"2012-11-10 17:16:12 UTC\"\n   t.strftime \"%Y-%m-%d %H:%M:%S UTC\"  => \"2012-11-10 17:16:12 UTC\"",
  "inspect": "Returns a string representing _time_. Equivalent to calling\n#strftime with the appropriate format string.\n\n   t = Time.now\n   t.to_s                              => \"2012-11-10 18:16:12 +0100\"\n   t.strftime \"%Y-%m-%d %H:%M:%S %z\"   => \"2012-11-10 18:16:12 +0100\"\n\n   t.utc.to_s                          => \"2012-11-10 17:16:12 UTC\"\n   t.strftime \"%Y-%m-%d %H:%M:%S UTC\"  => \"2012-11-10 17:16:12 UTC\"",
  "to_a": "Returns a ten-element _array_ of values for _time_:\n\n   [sec, min, hour, day, month, year, wday, yday, isdst, zone]\n\nSee the individual methods for an explanation of the\nvalid ranges of each value. The ten elements can be passed directly\nto Time::utc or Time::local to create a\nnew Time object.\n\n   t = Time.now     #=> 2007-11-19 08:36:01 -0600\n   now = t.to_a     #=> [1, 36, 8, 19, 11, 2007, 1, 323, false, \"CST\"]",
  "+": "Addition --- Adds some number of seconds (possibly fractional) to\n_time_ and returns that value as a new Time object.\n\n   t = Time.now         #=> 2007-11-19 08:22:21 -0600\n   t + (60 * 60 * 24)   #=> 2007-11-20 08:22:21 -0600",
  "-": "Difference --- Returns a new Time object that represents the difference\nbetween _time_ and +other_time+, or subtracts the given number\nof seconds in +numeric+ from _time_.\n\n   t = Time.now       #=> 2007-11-19 08:23:10 -0600\n   t2 = t + 2592000   #=> 2007-12-19 08:23:10 -0600\n   t2 - t             #=> 2592000.0\n   t2 - 2592000       #=> 2007-11-19 08:23:10 -0600",
  "succ": "",
  "round": "Rounds sub seconds to a given precision in decimal digits (0 digits by default).\nIt returns a new Time object.\n+ndigits+ should be zero or positive integer.\n\n    require 'time'\n\n    t = Time.utc(2010,3,30, 5,43,\"25.123456789\".to_r)\n    p t.iso8601(10)           #=> \"2010-03-30T05:43:25.1234567890Z\"\n    p t.round.iso8601(10)     #=> \"2010-03-30T05:43:25.0000000000Z\"\n    p t.round(0).iso8601(10)  #=> \"2010-03-30T05:43:25.0000000000Z\"\n    p t.round(1).iso8601(10)  #=> \"2010-03-30T05:43:25.1000000000Z\"\n    p t.round(2).iso8601(10)  #=> \"2010-03-30T05:43:25.1200000000Z\"\n    p t.round(3).iso8601(10)  #=> \"2010-03-30T05:43:25.1230000000Z\"\n    p t.round(4).iso8601(10)  #=> \"2010-03-30T05:43:25.1235000000Z\"\n    p t.round(5).iso8601(10)  #=> \"2010-03-30T05:43:25.1234600000Z\"\n    p t.round(6).iso8601(10)  #=> \"2010-03-30T05:43:25.1234570000Z\"\n    p t.round(7).iso8601(10)  #=> \"2010-03-30T05:43:25.1234568000Z\"\n    p t.round(8).iso8601(10)  #=> \"2010-03-30T05:43:25.1234567900Z\"\n    p t.round(9).iso8601(10)  #=> \"2010-03-30T05:43:25.1234567890Z\"\n    p t.round(10).iso8601(10) #=> \"2010-03-30T05:43:25.1234567890Z\"\n\n    t = Time.utc(1999,12,31, 23,59,59)\n    p((t + 0.4).round.iso8601(3))    #=> \"1999-12-31T23:59:59.000Z\"\n    p((t + 0.49).round.iso8601(3))   #=> \"1999-12-31T23:59:59.000Z\"\n    p((t + 0.5).round.iso8601(3))    #=> \"2000-01-01T00:00:00.000Z\"\n    p((t + 1.4).round.iso8601(3))    #=> \"2000-01-01T00:00:00.000Z\"\n    p((t + 1.49).round.iso8601(3))   #=> \"2000-01-01T00:00:00.000Z\"\n    p((t + 1.5).round.iso8601(3))    #=> \"2000-01-01T00:00:01.000Z\"\n\n    t = Time.utc(1999,12,31, 23,59,59)\n    p (t + 0.123456789).round(4).iso8601(6)  #=> \"1999-12-31T23:59:59.123500Z\"",
  "sec": "Returns the second of the minute (0..60) for _time_.\n\n*Note:* Seconds range from zero to 60 to allow the system to inject\nleap seconds. See http://en.wikipedia.org/wiki/Leap_second for further\ndetails.\n\n   t = Time.now   #=> 2007-11-19 08:25:02 -0600\n   t.sec          #=> 2",
  "min": "Returns the minute of the hour (0..59) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:25:51 -0600\n   t.min          #=> 25",
  "hour": "Returns the hour of the day (0..23) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:26:20 -0600\n   t.hour         #=> 8",
  "mday": "Returns the day of the month (1..n) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:03 -0600\n   t.day          #=> 19\n   t.mday         #=> 19",
  "day": "Returns the day of the month (1..n) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:03 -0600\n   t.day          #=> 19\n   t.mday         #=> 19",
  "mon": "Returns the month of the year (1..12) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:30 -0600\n   t.mon          #=> 11\n   t.month        #=> 11",
  "month": "Returns the month of the year (1..12) for _time_.\n\n   t = Time.now   #=> 2007-11-19 08:27:30 -0600\n   t.mon          #=> 11\n   t.month        #=> 11",
  "year": "Returns the year for _time_ (including the century).\n\n   t = Time.now   #=> 2007-11-19 08:27:51 -0600\n   t.year         #=> 2007",
  "wday": "Returns an integer representing the day of the week, 0..6, with\nSunday == 0.\n\n   t = Time.now   #=> 2007-11-20 02:35:35 -0600\n   t.wday         #=> 2\n   t.sunday?      #=> false\n   t.monday?      #=> false\n   t.tuesday?     #=> true\n   t.wednesday?   #=> false\n   t.thursday?    #=> false\n   t.friday?      #=> false\n   t.saturday?    #=> false",
  "yday": "Returns an integer representing the day of the year, 1..366.\n\n   t = Time.now   #=> 2007-11-19 08:32:31 -0600\n   t.yday         #=> 323",
  "isdst": "Returns +true+ if _time_ occurs during Daylight\nSaving Time in its time zone.\n\n # CST6CDT:\n   Time.local(2000, 1, 1).zone    #=> \"CST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"CDT\"\n   Time.local(2000, 7, 1).isdst   #=> true\n   Time.local(2000, 7, 1).dst?    #=> true\n\n # Asia/Tokyo:\n   Time.local(2000, 1, 1).zone    #=> \"JST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"JST\"\n   Time.local(2000, 7, 1).isdst   #=> false\n   Time.local(2000, 7, 1).dst?    #=> false",
  "dst?": "Returns +true+ if _time_ occurs during Daylight\nSaving Time in its time zone.\n\n # CST6CDT:\n   Time.local(2000, 1, 1).zone    #=> \"CST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"CDT\"\n   Time.local(2000, 7, 1).isdst   #=> true\n   Time.local(2000, 7, 1).dst?    #=> true\n\n # Asia/Tokyo:\n   Time.local(2000, 1, 1).zone    #=> \"JST\"\n   Time.local(2000, 1, 1).isdst   #=> false\n   Time.local(2000, 1, 1).dst?    #=> false\n   Time.local(2000, 7, 1).zone    #=> \"JST\"\n   Time.local(2000, 7, 1).isdst   #=> false\n   Time.local(2000, 7, 1).dst?    #=> false",
  "zone": "Returns the name of the time zone used for _time_. As of Ruby\n1.8, returns ``UTC'' rather than ``GMT'' for UTC times.\n\n   t = Time.gm(2000, \"jan\", 1, 20, 15, 1)\n   t.zone   #=> \"UTC\"\n   t = Time.local(2000, \"jan\", 1, 20, 15, 1)\n   t.zone   #=> \"CST\"",
  "gmtoff": "Returns the offset in seconds between the timezone of _time_\nand UTC.\n\n   t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.gmt_offset                    #=> 0\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.gmt_offset                    #=> -21600",
  "gmt_offset": "Returns the offset in seconds between the timezone of _time_\nand UTC.\n\n   t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.gmt_offset                    #=> 0\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.gmt_offset                    #=> -21600",
  "utc_offset": "Returns the offset in seconds between the timezone of _time_\nand UTC.\n\n   t = Time.gm(2000,1,1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.gmt_offset                    #=> 0\n   l = t.getlocal                  #=> 2000-01-01 14:15:01 -0600\n   l.gmt_offset                    #=> -21600",
  "utc?": "Returns +true+ if _time_ represents a time in UTC (GMT).\n\n   t = Time.now                        #=> 2007-11-19 08:15:23 -0600\n   t.utc?                              #=> false\n   t = Time.gm(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.utc?                              #=> true\n\n   t = Time.now                        #=> 2007-11-19 08:16:03 -0600\n   t.gmt?                              #=> false\n   t = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC\n   t.gmt?                              #=> true",
  "gmt?": "Returns +true+ if _time_ represents a time in UTC (GMT).\n\n   t = Time.now                        #=> 2007-11-19 08:15:23 -0600\n   t.utc?                              #=> false\n   t = Time.gm(2000,\"jan\",1,20,15,1)   #=> 2000-01-01 20:15:01 UTC\n   t.utc?                              #=> true\n\n   t = Time.now                        #=> 2007-11-19 08:16:03 -0600\n   t.gmt?                              #=> false\n   t = Time.gm(2000,1,1,20,15,1)       #=> 2000-01-01 20:15:01 UTC\n   t.gmt?                              #=> true",
  "sunday?": "Returns +true+ if _time_ represents Sunday.\n\n   t = Time.local(1990, 4, 1)       #=> 1990-04-01 00:00:00 -0600\n   t.sunday?                        #=> true",
  "monday?": "Returns +true+ if _time_ represents Monday.\n\n   t = Time.local(2003, 8, 4)       #=> 2003-08-04 00:00:00 -0500\n   p t.monday?                      #=> true",
  "tuesday?": "Returns +true+ if _time_ represents Tuesday.\n\n   t = Time.local(1991, 2, 19)      #=> 1991-02-19 00:00:00 -0600\n   p t.tuesday?                     #=> true",
  "wednesday?": "Returns +true+ if _time_ represents Wednesday.\n\n   t = Time.local(1993, 2, 24)      #=> 1993-02-24 00:00:00 -0600\n   p t.wednesday?                   #=> true",
  "thursday?": "Returns +true+ if _time_ represents Thursday.\n\n   t = Time.local(1995, 12, 21)     #=> 1995-12-21 00:00:00 -0600\n   p t.thursday?                    #=> true",
  "friday?": "Returns +true+ if _time_ represents Friday.\n\n   t = Time.local(1987, 12, 18)     #=> 1987-12-18 00:00:00 -0600\n   t.friday?                        #=> true",
  "saturday?": "Returns +true+ if _time_ represents Saturday.\n\n   t = Time.local(2006, 6, 10)      #=> 2006-06-10 00:00:00 -0500\n   t.saturday?                      #=> true",
  "tv_sec": "Returns the value of _time_ as an integer number of seconds\nsince the Epoch.\n\n   t = Time.now\n   \"%10.5f\" % t.to_f   #=> \"1270968656.89607\"\n   t.to_i              #=> 1270968656",
  "tv_usec": "Returns the number of microseconds for _time_.\n\n   t = Time.now        #=> 2007-11-19 08:03:26 -0600\n   \"%10.6f\" % t.to_f   #=> \"1195481006.775195\"\n   t.usec              #=> 775195",
  "usec": "Returns the number of microseconds for _time_.\n\n   t = Time.now        #=> 2007-11-19 08:03:26 -0600\n   \"%10.6f\" % t.to_f   #=> \"1195481006.775195\"\n   t.usec              #=> 775195",
  "tv_nsec": "Returns the number of nanoseconds for _time_.\n\n   t = Time.now        #=> 2007-11-17 15:18:03 +0900\n   \"%10.9f\" % t.to_f   #=> \"1195280283.536151409\"\n   t.nsec              #=> 536151406\n\nThe lowest digits of #to_f and #nsec are different because\nIEEE 754 double is not accurate enough to represent\nthe exact number of nanoseconds since the Epoch.\n\nThe more accurate value is returned by #nsec.",
  "nsec": "Returns the number of nanoseconds for _time_.\n\n   t = Time.now        #=> 2007-11-17 15:18:03 +0900\n   \"%10.9f\" % t.to_f   #=> \"1195280283.536151409\"\n   t.nsec              #=> 536151406\n\nThe lowest digits of #to_f and #nsec are different because\nIEEE 754 double is not accurate enough to represent\nthe exact number of nanoseconds since the Epoch.\n\nThe more accurate value is returned by #nsec.",
  "subsec": "Returns the fraction for _time_.\n\nThe return value can be a rational number.\n\n   t = Time.now        #=> 2009-03-26 22:33:12 +0900\n   \"%10.9f\" % t.to_f   #=> \"1238074392.940563917\"\n   t.subsec            #=> (94056401/100000000)\n\nThe lowest digits of #to_f and #subsec are different because\nIEEE 754 double is not accurate enough to represent\nthe rational number.\n\nThe more accurate value is returned by #subsec.",
  "strftime": "Formats _time_ according to the directives in the given format string.\n\nThe directives begin with a percent (%) character.\nAny text not listed as a directive will be passed through to the\noutput string.\n\nThe directive consists of a percent (%) character,\nzero or more flags, optional minimum field width,\noptional modifier and a conversion specifier\nas follows:\n\n  %<flags><width><modifier><conversion>\n\nFlags:\n  -  don't pad a numerical output\n  _  use spaces for padding\n  0  use zeros for padding\n  ^  upcase the result string\n  #  change case\n  :  use colons for %z\n\nThe minimum field width specifies the minimum width.\n\nThe modifiers are \"E\" and \"O\".\nThey are ignored.\n\nFormat directives:\n\n  Date (Year, Month, Day):\n    %Y - Year with century (can be negative, 4 digits at least)\n            -0001, 0000, 1995, 2009, 14292, etc.\n    %C - year / 100 (rounded down such as 20 in 2009)\n    %y - year % 100 (00..99)\n\n    %m - Month of the year, zero-padded (01..12)\n            %_m  blank-padded ( 1..12)\n            %-m  no-padded (1..12)\n    %B - The full month name (``January'')\n            %^B  uppercased (``JANUARY'')\n    %b - The abbreviated month name (``Jan'')\n            %^b  uppercased (``JAN'')\n    %h - Equivalent to %b\n\n    %d - Day of the month, zero-padded (01..31)\n            %-d  no-padded (1..31)\n    %e - Day of the month, blank-padded ( 1..31)\n\n    %j - Day of the year (001..366)\n\n  Time (Hour, Minute, Second, Subsecond):\n    %H - Hour of the day, 24-hour clock, zero-padded (00..23)\n    %k - Hour of the day, 24-hour clock, blank-padded ( 0..23)\n    %I - Hour of the day, 12-hour clock, zero-padded (01..12)\n    %l - Hour of the day, 12-hour clock, blank-padded ( 1..12)\n    %P - Meridian indicator, lowercase (``am'' or ``pm'')\n    %p - Meridian indicator, uppercase (``AM'' or ``PM'')\n\n    %M - Minute of the hour (00..59)\n\n    %S - Second of the minute (00..60)\n\n    %L - Millisecond of the second (000..999)\n         The digits under millisecond are truncated to not produce 1000.\n    %N - Fractional seconds digits, default is 9 digits (nanosecond)\n            %3N  millisecond (3 digits)\n            %6N  microsecond (6 digits)\n            %9N  nanosecond (9 digits)\n            %12N picosecond (12 digits)\n            %15N femtosecond (15 digits)\n            %18N attosecond (18 digits)\n            %21N zeptosecond (21 digits)\n            %24N yoctosecond (24 digits)\n         The digits under the specified length are truncated to avoid\n         carry up.\n\n  Time zone:\n    %z - Time zone as hour and minute offset from UTC (e.g. +0900)\n            %:z - hour and minute offset from UTC with a colon (e.g. +09:00)\n            %::z - hour, minute and second offset from UTC (e.g. +09:00:00)\n    %Z - Abbreviated time zone name or similar information.\n\n  Weekday:\n    %A - The full weekday name (``Sunday'')\n            %^A  uppercased (``SUNDAY'')\n    %a - The abbreviated name (``Sun'')\n            %^a  uppercased (``SUN'')\n    %u - Day of the week (Monday is 1, 1..7)\n    %w - Day of the week (Sunday is 0, 0..6)\n\n  ISO 8601 week-based year and week number:\n  The first week of YYYY starts with a Monday and includes YYYY-01-04.\n  The days in the year before the first week are in the last week of\n  the previous year.\n    %G - The week-based year\n    %g - The last 2 digits of the week-based year (00..99)\n    %V - Week number of the week-based year (01..53)\n\n  Week number:\n  The first week of YYYY that starts with a Sunday or Monday (according to %U\n  or %W). The days in the year before the first week are in week 0.\n    %U - Week number of the year. The week starts with Sunday. (00..53)\n    %W - Week number of the year. The week starts with Monday. (00..53)\n\n  Seconds since the Epoch:\n    %s - Number of seconds since 1970-01-01 00:00:00 UTC.\n\n  Literal string:\n    %n - Newline character (\\n)\n    %t - Tab character (\\t)\n    %% - Literal ``%'' character\n\n  Combination:\n    %c - date and time (%a %b %e %T %Y)\n    %D - Date (%m/%d/%y)\n    %F - The ISO 8601 date format (%Y-%m-%d)\n    %v - VMS date (%e-%^b-%4Y)\n    %x - Same as %D\n    %X - Same as %T\n    %r - 12-hour time (%I:%M:%S %p)\n    %R - 24-hour time (%H:%M)\n    %T - 24-hour time (%H:%M:%S)\n\nThis method is similar to strftime() function defined in ISO C and POSIX.\n\nWhile all directives are locale independent since Ruby 1.9, %Z is platform\ndependent.\nSo, the result may differ even if the same format string is used in other\nsystems such as C.\n\n%z is recommended over %Z.\n%Z doesn't identify the timezone.\nFor example, \"CST\" is used at America/Chicago (-06:00),\nAmerica/Havana (-05:00), Asia/Harbin (+08:00), Australia/Darwin (+09:30)\nand Australia/Adelaide (+10:30).\nAlso, %Z is highly dependent on the operating system.\nFor example, it may generate a non ASCII string on Japanese Windows.\ni.e. the result can be different to \"JST\".\nSo the numeric time zone offset, %z, is recommended.\n\nExamples:\n\n  t = Time.new(2007,11,19,8,37,48,\"-06:00\") #=> 2007-11-19 08:37:48 -0600\n  t.strftime(\"Printed on %m/%d/%Y\")   #=> \"Printed on 11/19/2007\"\n  t.strftime(\"at %I:%M%p\")            #=> \"at 08:37AM\"\n\nVarious ISO 8601 formats:\n  %Y%m%d           => 20071119                  Calendar date (basic)\n  %F               => 2007-11-19                Calendar date (extended)\n  %Y-%m            => 2007-11                   Calendar date, reduced accuracy, specific month\n  %Y               => 2007                      Calendar date, reduced accuracy, specific year\n  %C               => 20                        Calendar date, reduced accuracy, specific century\n  %Y%j             => 2007323                   Ordinal date (basic)\n  %Y-%j            => 2007-323                  Ordinal date (extended)\n  %GW%V%u          => 2007W471                  Week date (basic)\n  %G-W%V-%u        => 2007-W47-1                Week date (extended)\n  %GW%V            => 2007W47                   Week date, reduced accuracy, specific week (basic)\n  %G-W%V           => 2007-W47                  Week date, reduced accuracy, specific week (extended)\n  %H%M%S           => 083748                    Local time (basic)\n  %T               => 08:37:48                  Local time (extended)\n  %H%M             => 0837                      Local time, reduced accuracy, specific minute (basic)\n  %H:%M            => 08:37                     Local time, reduced accuracy, specific minute (extended)\n  %H               => 08                        Local time, reduced accuracy, specific hour\n  %H%M%S,%L        => 083748,000                Local time with decimal fraction, comma as decimal sign (basic)\n  %T,%L            => 08:37:48,000              Local time with decimal fraction, comma as decimal sign (extended)\n  %H%M%S.%L        => 083748.000                Local time with decimal fraction, full stop as decimal sign (basic)\n  %T.%L            => 08:37:48.000              Local time with decimal fraction, full stop as decimal sign (extended)\n  %H%M%S%z         => 083748-0600               Local time and the difference from UTC (basic)\n  %T%:z            => 08:37:48-06:00            Local time and the difference from UTC (extended)\n  %Y%m%dT%H%M%S%z  => 20071119T083748-0600      Date and time of day for calendar date (basic)\n  %FT%T%:z         => 2007-11-19T08:37:48-06:00 Date and time of day for calendar date (extended)\n  %Y%jT%H%M%S%z    => 2007323T083748-0600       Date and time of day for ordinal date (basic)\n  %Y-%jT%T%:z      => 2007-323T08:37:48-06:00   Date and time of day for ordinal date (extended)\n  %GW%V%uT%H%M%S%z => 2007W471T083748-0600      Date and time of day for week date (basic)\n  %G-W%V-%uT%T%:z  => 2007-W47-1T08:37:48-06:00 Date and time of day for week date (extended)\n  %Y%m%dT%H%M      => 20071119T0837             Calendar date and local time (basic)\n  %FT%R            => 2007-11-19T08:37          Calendar date and local time (extended)\n  %Y%jT%H%MZ       => 2007323T0837Z             Ordinal date and UTC of day (basic)\n  %Y-%jT%RZ        => 2007-323T08:37Z           Ordinal date and UTC of day (extended)\n  %GW%V%uT%H%M%z   => 2007W471T0837-0600        Week date and local time and difference from UTC (basic)\n  %G-W%V-%uT%R%:z  => 2007-W47-1T08:37-06:00    Week date and local time and difference from UTC (extended)",
  "_dump": ":nodoc:",
  "marshal_dump": ":nodoc:",
  "marshal_load": ":nodoc:",
  "to_time": "Returns a copy of self as local mode.",
  "to_date": "Returns a Date object which denotes self.",
  "to_datetime": "Returns a DateTime object which denotes self."
}