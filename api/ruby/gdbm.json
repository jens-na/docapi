{
  "open": "If called without a block, this is synonymous to GDBM::new.\nIf a block is given, the new GDBM instance will be passed to the block\nas a parameter, and the corresponding database file will be closed\nafter the execution of the block code has been finished.\n\nExample for an open call with a block:\n\n  require 'gdbm'\n  GDBM.open(\"fruitstore.db\") do |gdbm|\n    gdbm.each_pair do |key, value|\n      print \"#{key}: #{value}\\n\"\n    end\n  end",
  "initialize": "Creates a new GDBM instance by opening a gdbm file named _filename_.\nIf the file does not exist, a new file with file mode _mode_ will be\ncreated. _flags_ may be one of the following:\n* *READER*  - open as a reader\n* *WRITER*  - open as a writer\n* *WRCREAT* - open as a writer; if the database does not exist, create a new one\n* *NEWDB*   - open as a writer; overwrite any existing databases\n\nThe values *WRITER*, *WRCREAT* and *NEWDB* may be combined with the following\nvalues by bitwise or:\n* *SYNC*    - cause all database operations to be synchronized to the disk\n* *NOLOCK*  - do not lock the database file\n\nIf no _flags_ are specified, the GDBM object will try to open the database\nfile as a writer and will create it if it does not already exist\n(cf. flag <tt>WRCREAT</tt>). If this fails (for instance, if another process\nhas already opened the database as a reader), it will try to open the\ndatabase file as a reader (cf. flag <tt>READER</tt>).",
  "close": "Closes the associated database file.",
  "closed?": "Returns true if the associated database file has been closed.",
  "[]": "Retrieves the _value_ corresponding to _key_.",
  "fetch": "Retrieves the _value_ corresponding to _key_. If there is no value\nassociated with _key_, _default_ will be returned instead.",
  "[]=": "Associates the value _value_ with the specified _key_.",
  "store": "Associates the value _value_ with the specified _key_.",
  "index": ":nodoc:",
  "key": "Returns the _key_ for a given _value_. If several keys may map to the\nsame value, the key that is found first will be returned.",
  "select": "Returns a new array of all key-value pairs of the database for which _block_\nevaluates to true.",
  "values_at": "Returns an array of the values associated with each specified _key_.",
  "length": "Returns the number of key-value pairs in this database.",
  "size": "Returns the number of key-value pairs in this database.",
  "empty?": "Returns true if the database is empty.",
  "each": "Executes _block_ for each key in the database, passing the _key_ and the\ncorrespoding _value_ as a parameter.",
  "each_value": "Executes _block_ for each key in the database, passing the corresponding\n_value_ as a parameter.",
  "each_key": "Executes _block_ for each key in the database, passing the\n_key_ as a parameter.",
  "each_pair": "Executes _block_ for each key in the database, passing the _key_ and the\ncorrespoding _value_ as a parameter.",
  "keys": "Returns an array of all keys of this database.",
  "values": "Returns an array of all values of this database.",
  "shift": "Removes a key-value-pair from this database and returns it as a\ntwo-item array [ _key_, _value_ ]. Returns nil if the database is empty.",
  "delete": "Removes the key-value-pair with the specified _key_ from this database and\nreturns the corresponding _value_. Returns nil if the database is empty.",
  "delete_if": "Deletes every key-value pair from _gdbm_ for which _block_ evaluates to true.",
  "reject!": "Deletes every key-value pair from _gdbm_ for which _block_ evaluates to true.",
  "reject": "Returns a hash copy of _gdbm_ where all key-value pairs from _gdbm_ for\nwhich _block_ evaluates to true are removed. See also: #delete_if",
  "clear": "Removes all the key-value pairs within _gdbm_.",
  "invert": "Returns a hash created by using _gdbm_'s values as keys, and the keys\nas values.",
  "update": "Adds the key-value pairs of _other_ to _gdbm_, overwriting entries with\nduplicate keys with those from _other_. _other_ must have an each_pair\nmethod.",
  "replace": "Replaces the content of _gdbm_ with the key-value pairs of _other_.\n_other_ must have an each_pair method.",
  "reorganize": "Reorganizes the database file. This operation removes reserved space of\nelements that have already been deleted. It is only useful after a lot of\ndeletions in the database.",
  "sync": "Unless the _gdbm_ object has been opened with the *SYNC* flag, it is not\nguarenteed that database modification operations are immediately applied to\nthe database file. This method ensures that all recent modifications\nto the database are written to the file. Blocks until all writing operations\nto the disk have been finished.",
  "cachesize=": "Sets the size of the internal bucket cache to _size_.",
  "fastmode=": "Turns the database's fast mode on or off. If fast mode is turned on, gdbm\ndoes not wait for writes to be flushed to the disk before continuing.\n\nThis option is obsolete for gdbm >= 1.8 since fast mode is turned on by\ndefault. See also: #syncmode=",
  "syncmode=": "Turns the database's synchronization mode on or off. If the synchronization\nmode is turned on, the database's in-memory state will be synchronized to\ndisk after every database modification operation. If the synchronization\nmode is turned off, GDBM does not wait for writes to be flushed to the disk\nbefore continuing.\n\nThis option is only available for gdbm >= 1.8 where syncmode is turned off\nby default. See also: #fastmode=",
  "include?": "Returns true if the given key _k_ exists within the database.\nReturns false otherwise.",
  "has_key?": "Returns true if the given key _k_ exists within the database.\nReturns false otherwise.",
  "member?": "Returns true if the given key _k_ exists within the database.\nReturns false otherwise.",
  "has_value?": "Returns true if the given value _v_ exists within the database.\nReturns false otherwise.",
  "key?": "Returns true if the given key _k_ exists within the database.\nReturns false otherwise.",
  "value?": "Returns true if the given value _v_ exists within the database.\nReturns false otherwise.",
  "to_a": "Returns an array of all key-value pairs contained in the database.",
  "to_hash": "Returns a hash of all key-value pairs contained in the database.",
  "READER": "open database as a reader",
  "WRITER": "open database as a writer",
  "WRCREAT": "open database as a writer; if the database does not exist, create a new one",
  "NEWDB": "open database as a writer; overwrite any existing databases",
  "FAST": "flag for #new and #open. this flag is obsolete for gdbm >= 1.8",
  "SYNC": "flag for #new and #open. only for gdbm >= 1.8",
  "NOLOCK": "flag for #new and #open",
  "VERSION": "version of the gdbm library"
}