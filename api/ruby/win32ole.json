{
  "initialize": "Returns a new WIN32OLE object(OLE Automation object).\nThe first argument server specifies OLE Automation server.\nThe first argument should be CLSID or PROGID.\nIf second argument host specified, then returns OLE Automation\nobject on host.\n\n    WIN32OLE.new('Excel.Application') # => Excel OLE Automation WIN32OLE object.\n    WIN32OLE.new('{00024500-0000-0000-C000-000000000046}') # => Excel OLE Automation WIN32OLE object.",
  "connect": "Returns running OLE Automation object or WIN32OLE object from moniker.\n1st argument should be OLE program id or class id or moniker.\n\n   WIN32OLE.connect('Excel.Application') # => WIN32OLE object which represents running Excel.",
  "const_load": "Defines the constants of OLE Automation server as mod's constants.\nThe first argument is WIN32OLE object or type library name.\nIf 2nd argument is omitted, the default is WIN32OLE.\nThe first letter of Ruby's constant variable name is upper case,\nso constant variable name of WIN32OLE object is capitalized.\nFor example, the 'xlTop' constant of Excel is changed to 'XlTop'\nin WIN32OLE.\nIf the first letter of constant variabl is not [A-Z], then\nthe constant is defined as CONSTANTS hash element.\n\n   module EXCEL_CONST\n   end\n   excel = WIN32OLE.new('Excel.Application')\n   WIN32OLE.const_load(excel, EXCEL_CONST)\n   puts EXCEL_CONST::XlTop # => -4160\n   puts EXCEL_CONST::CONSTANTS['_xlDialogChartSourceData'] # => 541\n\n   WIN32OLE.const_load(excel)\n   puts WIN32OLE::XlTop # => -4160\n\n   module MSO\n   end\n   WIN32OLE.const_load('Microsoft Office 9.0 Object Library', MSO)\n   puts MSO::MsoLineSingle # => 1",
  "ole_free": "invokes Release method of Dispatch interface of WIN32OLE object.\nUsually, you do not need to call this method because Release method\ncalled automatically when WIN32OLE object garbaged.",
  "ole_reference_count": "Returns reference counter of Dispatch interface of WIN32OLE object.\nYou should not use this method because this method\nexists only for debugging WIN32OLE.",
  "ole_show_help": "Displays helpfile. The 1st argument specifies WIN32OLE_TYPE\nobject or WIN32OLE_METHOD object or helpfile.\n\n   excel = WIN32OLE.new('Excel.Application')\n   typeobj = excel.ole_type\n   WIN32OLE.ole_show_help(typeobj)",
  "codepage": "Returns current codepage.\n   WIN32OLE.codepage # => WIN32OLE::CP_ACP",
  "codepage=": "Sets current codepage.\nThe WIN32OLE.codepage is initialized according to\nEncoding.default_internal.\nIf Encoding.default_internal is nil then WIN32OLE.codepage\nis initialized according to Encoding.default_external.\n\n   WIN32OLE.codepage = WIN32OLE::CP_UTF8\n   WIN32OLE.codepage = 65001",
  "locale": "Returns current locale id (lcid). The default locale is\nLOCALE_SYSTEM_DEFAULT.\n\n   lcid = WIN32OLE.locale",
  "locale=": "Sets current locale id (lcid).\n\n   WIN32OLE.locale = 1033 # set locale English(U.S)\n   obj = WIN32OLE_VARIANT.new(\"$100,000\", WIN32OLE::VARIANT::VT_CY)",
  "create_guid": "Creates GUID.\n   WIN32OLE.create_guid # => {1CB530F1-F6B1-404D-BCE6-1959BF91F4A8}",
  "ole_initialize": ":nodoc",
  "ole_uninitialize": ":nodoc",
  "invoke": "Runs OLE method.\nThe first argument specifies the method name of OLE Automation object.\nThe others specify argument of the <i>method</i>.\nIf you can not execute <i>method</i> directly, then use this method instead.\n\n  excel = WIN32OLE.new('Excel.Application')\n  excel.invoke('Quit')  # => same as excel.Quit",
  "[]": "Returns the value of Collection specified by a1, a2,....\n\n   dict = WIN32OLE.new('Scripting.Dictionary')\n   dict.add('ruby', 'Ruby')\n   puts dict['ruby'] # => 'Ruby' (same as `puts dict.item('ruby')')\n\nRemark: You can not use this method to get the property.\n   excel = WIN32OLE.new('Excel.Application')\n   # puts excel['Visible']  This is error !!!\n   puts excel.Visible # You should to use this style to get the property.",
  "_invoke": "Runs the early binding method.\nThe 1st argument specifies dispatch ID,\nthe 2nd argument specifies the array of arguments,\nthe 3rd argument specifies the array of the type of arguments.\n\n   excel = WIN32OLE.new('Excel.Application')\n   excel._invoke(302, [], []) #  same effect as excel.Quit",
  "_getproperty": "Runs the early binding method to get property.\nThe 1st argument specifies dispatch ID,\nthe 2nd argument specifies the array of arguments,\nthe 3rd argument specifies the array of the type of arguments.\n\n   excel = WIN32OLE.new('Excel.Application')\n   puts excel._getproperty(558, [], []) # same effect as puts excel.visible",
  "_setproperty": "Runs the early binding method to set property.\nThe 1st argument specifies dispatch ID,\nthe 2nd argument specifies the array of arguments,\nthe 3rd argument specifies the array of the type of arguments.\n\n   excel = WIN32OLE.new('Excel.Application')\n   excel._setproperty(558, [true], [WIN32OLE::VARIANT::VT_BOOL]) # same effect as excel.visible = true",
  "[]=": "Sets the value to WIN32OLE object specified by a1, a2, ...\n\n   dict = WIN32OLE.new('Scripting.Dictionary')\n   dict.add('ruby', 'RUBY')\n   dict['ruby'] = 'Ruby'\n   puts dict['ruby'] # => 'Ruby'\n\nRemark: You can not use this method to set the property value.\n\n   excel = WIN32OLE.new('Excel.Application')\n   # excel['Visible'] = true # This is error !!!\n   excel.Visible = true # You should to use this style to set the property.",
  "each": "Iterates over each item of OLE collection which has IEnumVARIANT interface.\n\n   excel = WIN32OLE.new('Excel.Application')\n   book = excel.workbooks.add\n   sheets = book.worksheets(1)\n   cells = sheets.cells(\"A1:A5\")\n   cells.each do |cell|\n     cell.value = 10\n   end",
  "method_missing": "Calls WIN32OLE#invoke method.",
  "setproperty": "Sets property of OLE object.\nWhen you want to set property with argument, you can use this method.\n\n   excel = WIN32OLE.new('Excel.Application')\n   excel.Visible = true\n   book = excel.workbooks.add\n   sheet = book.worksheets(1)\n   sheet.setproperty('Cells', 1, 2, 10) # => The B1 cell value is 10.",
  "ole_methods": "Returns the array of WIN32OLE_METHOD object.\nThe element is OLE method of WIN32OLE object.\n\n   excel = WIN32OLE.new('Excel.Application')\n   methods = excel.ole_methods",
  "ole_get_methods": "Returns the array of WIN32OLE_METHOD object .\nThe element of the array is property (gettable) of WIN32OLE object.\n\n   excel = WIN32OLE.new('Excel.Application')\n   properties = excel.ole_get_methods",
  "ole_put_methods": "Returns the array of WIN32OLE_METHOD object .\nThe element of the array is property (settable) of WIN32OLE object.\n\n   excel = WIN32OLE.new('Excel.Application')\n   properties = excel.ole_put_methods",
  "ole_func_methods": "Returns the array of WIN32OLE_METHOD object .\nThe element of the array is property (settable) of WIN32OLE object.\n\n   excel = WIN32OLE.new('Excel.Application')\n   properties = excel.ole_func_methods",
  "ole_method": "Returns WIN32OLE_METHOD object corresponding with method\nspecified by 1st argument.\n\n   excel = WIN32OLE.new('Excel.Application')\n   method = excel.ole_method_help('Quit')",
  "ole_method_help": "Returns WIN32OLE_METHOD object corresponding with method\nspecified by 1st argument.\n\n   excel = WIN32OLE.new('Excel.Application')\n   method = excel.ole_method_help('Quit')",
  "ole_activex_initialize": "Initialize WIN32OLE object(ActiveX Control) by calling\nIPersistMemory::InitNew.\n\nBefore calling OLE method, some kind of the ActiveX controls\ncreated with MFC should be initialized by calling\nIPersistXXX::InitNew.\n\nIf and only if you received the exception \"HRESULT error code:\n0x8000ffff catastrophic failure\", try this method before\ninvoking any ole_method.\n\n   obj = WIN32OLE.new(\"ProgID_or_GUID_of_ActiveX_Control\")\n   obj.ole_activex_initialize\n   obj.method(...)",
  "ole_type": "Returns WIN32OLE_TYPE object.\n\n   excel = WIN32OLE.new('Excel.Application')\n   tobj = excel.ole_type",
  "ole_obj_help": "Returns WIN32OLE_TYPE object.\n\n   excel = WIN32OLE.new('Excel.Application')\n   tobj = excel.ole_type",
  "ole_typelib": "Returns the WIN32OLE_TYPELIB object. The object represents the\ntype library which contains the WIN32OLE object.\n\n   excel = WIN32OLE.new('Excel.Application')\n   tlib = excel.ole_typelib\n   puts tlib.name  # -> 'Microsoft Excel 9.0 Object Library'",
  "ole_query_interface": "Returns WIN32OLE object for a specific dispatch or dual\ninterface specified by iid.\n\n    ie = WIN32OLE.new('InternetExplorer.Application')\n    ie_web_app = ie.ole_query_interface('{0002DF05-0000-0000-C000-000000000046}') # => WIN32OLE object for dispinterface IWebBrowserApp",
  "ole_respond_to?": "Returns true when OLE object has OLE method, otherwise returns false.\n\n    ie = WIN32OLE.new('InternetExplorer.Application')\n    ie.ole_respond_to?(\"gohome\") => true",
  "VERSION": "",
  "ARGV": "",
  "CP_ACP": "",
  "CP_OEMCP": "",
  "CP_MACCP": "",
  "CP_THREAD_ACP": "",
  "CP_SYMBOL": "",
  "CP_UTF7": "",
  "CP_UTF8": "",
  "LOCALE_SYSTEM_DEFAULT": "",
  "LOCALE_USER_DEFAULT": "",
  "VARIANT": ""
}