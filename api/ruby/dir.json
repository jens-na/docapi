{
  "open": "The optional <i>enc</i> argument specifies the encoding of the directory.\nIf not specified, the filesystem encoding is used.\n\nWith no block, <code>open</code> is a synonym for\n<code>Dir::new</code>. If a block is present, it is passed\n<i>aDir</i> as a parameter. The directory is closed at the end of\nthe block, and <code>Dir::open</code> returns the value of the\nblock.",
  "foreach": "Calls the block once for each entry in the named directory, passing\nthe filename of each entry as a parameter to the block.\n\nIf no block is given, an enumerator is returned instead.\n\n   Dir.foreach(\"testdir\") {|x| puts \"Got #{x}\" }\n\n<em>produces:</em>\n\n   Got .\n   Got ..\n   Got config.h\n   Got main.rb",
  "entries": "Returns an array containing all of the filenames in the given\ndirectory. Will raise a <code>SystemCallError</code> if the named\ndirectory doesn't exist.\n\nThe optional <i>enc</i> argument specifies the encoding of the directory.\nIf not specified, the filesystem encoding is used.\n\n   Dir.entries(\"testdir\")   #=> [\".\", \"..\", \"config.h\", \"main.rb\"]",
  "initialize": "Returns a new directory object for the named directory.\n\nThe optional <i>enc</i> argument specifies the encoding of the directory.\nIf not specified, the filesystem encoding is used.",
  "path": "Returns the path parameter passed to <em>dir</em>'s constructor.\n\n   d = Dir.new(\"..\")\n   d.path   #=> \"..\"",
  "to_path": "Returns the path parameter passed to <em>dir</em>'s constructor.\n\n   d = Dir.new(\"..\")\n   d.path   #=> \"..\"",
  "inspect": "Return a string describing this Dir object.",
  "read": "Reads the next entry from <em>dir</em> and returns it as a string.\nReturns <code>nil</code> at the end of the stream.\n\n   d = Dir.new(\"testdir\")\n   d.read   #=> \".\"\n   d.read   #=> \"..\"\n   d.read   #=> \"config.h\"",
  "each": "Calls the block once for each entry in this directory, passing the\nfilename of each entry as a parameter to the block.\n\nIf no block is given, an enumerator is returned instead.\n\n   d = Dir.new(\"testdir\")\n   d.each  {|x| puts \"Got #{x}\" }\n\n<em>produces:</em>\n\n   Got .\n   Got ..\n   Got config.h\n   Got main.rb",
  "rewind": "Repositions <em>dir</em> to the first entry.\n\n   d = Dir.new(\"testdir\")\n   d.read     #=> \".\"\n   d.rewind   #=> #<Dir:0x401b3fb0>\n   d.read     #=> \".\"",
  "tell": "Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n   d = Dir.new(\"testdir\")\n   d.tell   #=> 0\n   d.read   #=> \".\"\n   d.tell   #=> 12",
  "seek": "Seeks to a particular location in <em>dir</em>. <i>integer</i>\nmust be a value returned by <code>Dir#tell</code>.\n\n   d = Dir.new(\"testdir\")   #=> #<Dir:0x401b3c40>\n   d.read                   #=> \".\"\n   i = d.tell               #=> 12\n   d.read                   #=> \"..\"\n   d.seek(i)                #=> #<Dir:0x401b3c40>\n   d.read                   #=> \"..\"",
  "pos": "Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n   d = Dir.new(\"testdir\")\n   d.tell   #=> 0\n   d.read   #=> \".\"\n   d.tell   #=> 12",
  "pos=": "Synonym for <code>Dir#seek</code>, but returns the position\nparameter.\n\n   d = Dir.new(\"testdir\")   #=> #<Dir:0x401b3c40>\n   d.read                   #=> \".\"\n   i = d.pos                #=> 12\n   d.read                   #=> \"..\"\n   d.pos = i                #=> 12\n   d.read                   #=> \"..\"",
  "close": "Closes the directory stream. Any further attempts to access\n<em>dir</em> will raise an <code>IOError</code>.\n\n   d = Dir.new(\"testdir\")\n   d.close   #=> nil",
  "chdir": "Changes the current working directory of the process to the given\nstring. When called without an argument, changes the directory to\nthe value of the environment variable <code>HOME</code>, or\n<code>LOGDIR</code>. <code>SystemCallError</code> (probably\n<code>Errno::ENOENT</code>) if the target directory does not exist.\n\nIf a block is given, it is passed the name of the new current\ndirectory, and the block is executed with that as the current\ndirectory. The original working directory is restored when the block\nexits. The return value of <code>chdir</code> is the value of the\nblock. <code>chdir</code> blocks can be nested, but in a\nmulti-threaded program an error will be raised if a thread attempts\nto open a <code>chdir</code> block while another thread has one\nopen.\n\n   Dir.chdir(\"/var/spool/mail\")\n   puts Dir.pwd\n   Dir.chdir(\"/tmp\") do\n     puts Dir.pwd\n     Dir.chdir(\"/usr\") do\n       puts Dir.pwd\n     end\n     puts Dir.pwd\n   end\n   puts Dir.pwd\n\n<em>produces:</em>\n\n   /var/spool/mail\n   /tmp\n   /usr\n   /tmp\n   /var/spool/mail",
  "getwd": "Returns the path to the current working directory of this process as\na string.\n\n   Dir.chdir(\"/tmp\")   #=> 0\n   Dir.getwd           #=> \"/tmp\"",
  "pwd": "Returns the path to the current working directory of this process as\na string.\n\n   Dir.chdir(\"/tmp\")   #=> 0\n   Dir.getwd           #=> \"/tmp\"",
  "chroot": "Changes this process's idea of the file system root. Only a\nprivileged process may make this call. Not available on all\nplatforms. On Unix systems, see <code>chroot(2)</code> for more\ninformation.",
  "mkdir": "Makes a new directory named by <i>string</i>, with permissions\nspecified by the optional parameter <i>anInteger</i>. The\npermissions may be modified by the value of\n<code>File::umask</code>, and are ignored on NT. Raises a\n<code>SystemCallError</code> if the directory cannot be created. See\nalso the discussion of permissions in the class documentation for\n<code>File</code>.\n\n  Dir.mkdir(File.join(Dir.home, \".foo\"), 0700) #=> 0",
  "rmdir": "Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn't empty.",
  "delete": "Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn't empty.",
  "unlink": "Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn't empty.",
  "home": "Returns the home directory of the current user or the named user\nif given.",
  "glob": "Expands +pattern+, which is an Array of patterns or a pattern String, and\nreturns the results as +matches+ or as arguments given to the block.\n\nNote that this pattern is not a regexp, it's closer to a shell glob.  See\nFile::fnmatch for the meaning of the +flags+ parameter.  Note that case\nsensitivity depends on your system (so File::FNM_CASEFOLD is ignored), as\ndoes the order in which the results are returned.\n\n<code>*</code>::\n  Matches any file. Can be restricted by other values in the glob.\n  Equivalent to <code>/ .* /x</code> in regexp.\n\n  <code>*</code>::     Matches all files\n  <code>c*</code>::    Matches all files beginning with <code>c</code>\n  <code>*c</code>::    Matches all files ending with <code>c</code>\n  <code>\\*c\\*</code>:: Match all files that have <code>c</code> in them\n                       (including at the beginning or end).\n\n  Note, this will not match Unix-like hidden files (dotfiles).  In order\n  to include those in the match results, you must use the\n  File::FNM_DOTMATCH flag or something like <code>\"{*,.*}\"</code>.\n\n<code>**</code>::\n  Matches directories recursively.\n\n<code>?</code>::\n  Matches any one character. Equivalent to <code>/.{1}/</code> in regexp.\n\n<code>[set]</code>::\n  Matches any one character in +set+.  Behaves exactly like character sets\n  in Regexp, including set negation (<code>[^a-z]</code>).\n\n<code>{p,q}</code>::\n  Matches either literal <code>p</code> or literal <code>q</code>.\n  Equivalent to pattern alternation in regexp.\n\n  Matching literals may be more than one character in length.  More than\n  two literals may be specified.\n\n<code> \\\\ </code>::\n  Escapes the next metacharacter.\n\n  Note that this means you cannot use backslash on windows as part of a\n  glob, i.e.  <code>Dir[\"c:\\\\foo*\"]</code> will not work, use\n  <code>Dir[\"c:/foo*\"]</code> instead.\n\nExamples:\n\n   Dir[\"config.?\"]                     #=> [\"config.h\"]\n   Dir.glob(\"config.?\")                #=> [\"config.h\"]\n   Dir.glob(\"*.[a-z][a-z]\")            #=> [\"main.rb\"]\n   Dir.glob(\"*.[^r]*\")                 #=> [\"config.h\"]\n   Dir.glob(\"*.{rb,h}\")                #=> [\"main.rb\", \"config.h\"]\n   Dir.glob(\"*\")                       #=> [\"config.h\", \"main.rb\"]\n   Dir.glob(\"*\", File::FNM_DOTMATCH)   #=> [\".\", \"..\", \"config.h\", \"main.rb\"]\n\n   rbfiles = File.join(\"**\", \"*.rb\")\n   Dir.glob(rbfiles)                   #=> [\"main.rb\",\n                                       #    \"lib/song.rb\",\n                                       #    \"lib/song/karaoke.rb\"]\n   libdirs = File.join(\"**\", \"lib\")\n   Dir.glob(libdirs)                   #=> [\"lib\"]\n\n   librbfiles = File.join(\"**\", \"lib\", \"**\", \"*.rb\")\n   Dir.glob(librbfiles)                #=> [\"lib/song.rb\",\n                                       #    \"lib/song/karaoke.rb\"]\n\n   librbfiles = File.join(\"**\", \"lib\", \"*.rb\")\n   Dir.glob(librbfiles)                #=> [\"lib/song.rb\"]",
  "[]": "Equivalent to calling\n<code>Dir.glob(</code><i>array,</i><code>0)</code> and\n<code>Dir.glob([</code><i>string,...</i><code>],0)</code>.",
  "exist?": "Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.",
  "exists?": ""
}