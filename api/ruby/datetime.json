{
  "jd": "Creates a datetime object denoting the given chronological Julian\nday number.\n\n   DateTime.jd(2451944)\t#=> #<DateTime: 2001-02-03T00:00:00+00:00 ...>\n   DateTime.jd(2451945)\t#=> #<DateTime: 2001-02-04T00:00:00+00:00 ...>\n   DateTime.jd(Rational('0.5'))\n\t\t\t\t#=> #<DateTime: -4712-01-01T12:00:00+00:00 ...>",
  "ordinal": "Creates a date-time object denoting the given ordinal date.\n\n   DateTime.ordinal(2001,34)\t#=> #<DateTime: 2001-02-03T00:00:00+00:00 ...>\n   DateTime.ordinal(2001,34,4,5,6,'+7')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.ordinal(2001,-332,-20,-55,-54,'+7')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>",
  "civil": "Creates a date-time object denoting the given calendar date.\n\n   DateTime.new(2001,2,3)\t#=> #<DateTime: 2001-02-03T00:00:00+00:00 ...>\n   DateTime.new(2001,2,3,4,5,6,'+7')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.new(2001,-11,-26,-20,-55,-54,'+7')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>",
  "new": "Creates a date-time object denoting the given calendar date.\n\n   DateTime.new(2001,2,3)\t#=> #<DateTime: 2001-02-03T00:00:00+00:00 ...>\n   DateTime.new(2001,2,3,4,5,6,'+7')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.new(2001,-11,-26,-20,-55,-54,'+7')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>",
  "commercial": "Creates a date-time object denoting the given week date.\n\n   DateTime.commercial(2001)\t#=> #<DateTime: 2001-01-01T00:00:00+00:00 ...>\n   DateTime.commercial(2002)\t#=> #<DateTime: 2001-12-31T00:00:00+00:00 ...>\n   DateTime.commercial(2001,5,6,4,5,6,'+7')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>",
  "now": "Creates a date-time object denoting the present time.\n\n   DateTime.now\t\t#=> #<DateTime: 2011-06-11T21:20:44+09:00 ...>",
  "_strptime": "Parses the given representation of date and time with the given\ntemplate, and returns a hash of parsed elements.  _strptime does\nnot support specification of flags and width unlike strftime.\n\n See also strptime(3) and strftime.",
  "strptime": "Parses the given representation of date and time with the given\ntemplate, and creates a date object.  strptime does not support\nspecification of flags and width unlike strftime.\n\n   DateTime.strptime('2001-02-03T04:05:06+07:00', '%Y-%m-%dT%H:%M:%S%z')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.strptime('03-02-2001 04:05:06 PM', '%d-%m-%Y %I:%M:%S %p')\n\t\t\t#=> #<DateTime: 2001-02-03T16:05:06+00:00 ...>\n   DateTime.strptime('2001-W05-6T04:05:06+07:00', '%G-W%V-%uT%H:%M:%S%z')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.strptime('2001 04 6 04 05 06 +7', '%Y %U %w %H %M %S %z')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.strptime('2001 05 6 04 05 06 +7', '%Y %W %u %H %M %S %z')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.strptime('-1', '%s')\n\t\t\t#=> #<DateTime: 1969-12-31T23:59:59+00:00 ...>\n   DateTime.strptime('-1000', '%Q')\n\t\t\t#=> #<DateTime: 1969-12-31T23:59:59+00:00 ...>\n   DateTime.strptime('sat3feb014pm+7', '%a%d%b%y%H%p%z')\n\t\t\t#=> #<DateTime: 2001-02-03T16:00:00+07:00 ...>\n\nSee also strptime(3) and strftime.",
  "parse": "Parses the given representation of date and time, and creates a\ndate object.  This method does not function as a validator.\n\nIf the optional second argument is true and the detected year is in\nthe range \"00\" to \"99\", makes it full.\n\n   DateTime.parse('2001-02-03T04:05:06+07:00')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.parse('20010203T040506+0700')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>\n   DateTime.parse('3rd Feb 2001 04:05:06 PM')\n\t\t\t#=> #<DateTime: 2001-02-03T16:05:06+00:00 ...>",
  "iso8601": "This method is equivalent to strftime('%FT%T').  The optional\nargument n is length of fractional seconds.\n\n   DateTime.parse('2001-02-03T04:05:06.123456789+07:00').iso8601(9)\n\t\t\t#=> \"2001-02-03T04:05:06.123456789+07:00\"",
  "rfc3339": "This method is equivalent to strftime('%FT%T').  The optional\nargument n is length of fractional seconds.\n\n   DateTime.parse('2001-02-03T04:05:06.123456789+07:00').rfc3339(9)\n\t\t\t#=> \"2001-02-03T04:05:06.123456789+07:00\"",
  "xmlschema": "This method is equivalent to strftime('%FT%T').  The optional\nargument n is length of fractional seconds.\n\n   DateTime.parse('2001-02-03T04:05:06.123456789+07:00').iso8601(9)\n\t\t\t#=> \"2001-02-03T04:05:06.123456789+07:00\"",
  "rfc2822": "Creates a new Date object by parsing from a string according to\nsome typical RFC 2822 formats.\n\n    DateTime.rfc2822('Sat, 3 Feb 2001 04:05:06 +0700')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>",
  "rfc822": "Creates a new Date object by parsing from a string according to\nsome typical RFC 2822 formats.\n\n    DateTime.rfc2822('Sat, 3 Feb 2001 04:05:06 +0700')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+07:00 ...>",
  "httpdate": "Creates a new Date object by parsing from a string according to\nsome RFC 2616 format.\n\n   DateTime.httpdate('Sat, 03 Feb 2001 04:05:06 GMT')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06+00:00 ...>",
  "jisx0301": "Returns a string in a JIS X 0301 format.  The optional argument n\nis length of fractional seconds.\n\n   DateTime.parse('2001-02-03T04:05:06.123456789+07:00').jisx0301(9)\n\t\t\t#=> \"H13.02.03T04:05:06.123456789+07:00\"",
  "to_s": "Returns a string in an ISO 8601 format (This method doesn't use the\nexpanded representations).\n\n    DateTime.new(2001,2,3,4,5,6,'-7').to_s\n\t\t\t#=> \"2001-02-03T04:05:06-07:00\"",
  "strftime": "Formats date according to the directives in the given format\n string.\n The directives begins with a percent (%) character.\n Any text not listed as a directive will be passed through to the\n output string.\n\n The directive consists of a percent (%) character,\n zero or more flags, optional minimum field width,\n optional modifier and a conversion specifier\n as follows.\n\n   %<flags><width><modifier><conversion>\n\n Flags:\n   -  don't pad a numerical output.\n   _  use spaces for padding.\n   0  use zeros for padding.\n   ^  upcase the result string.\n   #  change case.\n   :  use colons for %z.\n\n The minimum field width specifies the minimum width.\n\n The modifier is \"E\" and \"O\".\n They are ignored.\n\n Format directives:\n\n   Date (Year, Month, Day):\n     %Y - Year with century (can be negative, 4 digits at least)\n             -0001, 0000, 1995, 2009, 14292, etc.\n     %C - year / 100 (round down.  20 in 2009)\n     %y - year % 100 (00..99)\n\n     %m - Month of the year, zero-padded (01..12)\n             %_m  blank-padded ( 1..12)\n             %-m  no-padded (1..12)\n     %B - The full month name (``January'')\n             %^B  uppercased (``JANUARY'')\n     %b - The abbreviated month name (``Jan'')\n             %^b  uppercased (``JAN'')\n     %h - Equivalent to %b\n\n     %d - Day of the month, zero-padded (01..31)\n             %-d  no-padded (1..31)\n     %e - Day of the month, blank-padded ( 1..31)\n\n     %j - Day of the year (001..366)\n\n   Time (Hour, Minute, Second, Subsecond):\n     %H - Hour of the day, 24-hour clock, zero-padded (00..23)\n     %k - Hour of the day, 24-hour clock, blank-padded ( 0..23)\n     %I - Hour of the day, 12-hour clock, zero-padded (01..12)\n     %l - Hour of the day, 12-hour clock, blank-padded ( 1..12)\n     %P - Meridian indicator, lowercase (``am'' or ``pm'')\n     %p - Meridian indicator, uppercase (``AM'' or ``PM'')\n\n     %M - Minute of the hour (00..59)\n\n     %S - Second of the minute (00..59)\n\n     %L - Millisecond of the second (000..999)\n     %N - Fractional seconds digits, default is 9 digits (nanosecond)\n             %3N  millisecond (3 digits)   %15N femtosecond (15 digits)\n             %6N  microsecond (6 digits)   %18N attosecond  (18 digits)\n             %9N  nanosecond  (9 digits)   %21N zeptosecond (21 digits)\n             %12N picosecond (12 digits)   %24N yoctosecond (24 digits)\n\n   Time zone:\n     %z - Time zone as hour and minute offset from UTC (e.g. +0900)\n             %:z - hour and minute offset from UTC with a colon (e.g. +09:00)\n             %::z - hour, minute and second offset from UTC (e.g. +09:00:00)\n             %:::z - hour, minute and second offset from UTC\n                                               (e.g. +09, +09:30, +09:30:30)\n     %Z - Time zone abbreviation name or something similar information.\n\n   Weekday:\n     %A - The full weekday name (``Sunday'')\n             %^A  uppercased (``SUNDAY'')\n     %a - The abbreviated name (``Sun'')\n             %^a  uppercased (``SUN'')\n     %u - Day of the week (Monday is 1, 1..7)\n     %w - Day of the week (Sunday is 0, 0..6)\n\n   ISO 8601 week-based year and week number:\n   The week 1 of YYYY starts with a Monday and includes YYYY-01-04.\n   The days in the year before the first week are in the last week of\n   the previous year.\n     %G - The week-based year\n     %g - The last 2 digits of the week-based year (00..99)\n     %V - Week number of the week-based year (01..53)\n\n   Week number:\n   The week 1 of YYYY starts with a Sunday or Monday (according to %U\n   or %W).  The days in the year before the first week are in week 0.\n     %U - Week number of the year.  The week starts with Sunday.  (00..53)\n     %W - Week number of the year.  The week starts with Monday.  (00..53)\n\n   Seconds since the Unix Epoch:\n     %s - Number of seconds since 1970-01-01 00:00:00 UTC.\n     %Q - Number of milliseconds since 1970-01-01 00:00:00 UTC.\n\n   Literal string:\n     %n - Newline character (\\n)\n     %t - Tab character (\\t)\n     %% - Literal ``%'' character\n\n   Combination:\n     %c - date and time (%a %b %e %T %Y)\n     %D - Date (%m/%d/%y)\n     %F - The ISO 8601 date format (%Y-%m-%d)\n     %v - VMS date (%e-%b-%Y)\n     %x - Same as %D\n     %X - Same as %T\n     %r - 12-hour time (%I:%M:%S %p)\n     %R - 24-hour time (%H:%M)\n     %T - 24-hour time (%H:%M:%S)\n     %+ - date(1) (%a %b %e %H:%M:%S %Z %Y)\n\n This method is similar to strftime() function defined in ISO C and POSIX.\n Several directives (%a, %A, %b, %B, %c, %p, %r, %x, %X, %E*, %O* and %Z)\n are locale dependent in the function.\n However this method is locale independent.\n So, the result may differ even if a same format string is used in other\n systems such as C.\n It is good practice to avoid %x and %X because there are corresponding\n locale independent representations, %D and %T.\n\n Examples:\n\n   d = DateTime.new(2007,11,19,8,37,48,\"-06:00\")\n\t\t\t#=> #<DateTime: 2007-11-19T08:37:48-0600 ...>\n   d.strftime(\"Printed on %m/%d/%Y\")   #=> \"Printed on 11/19/2007\"\n   d.strftime(\"at %I:%M%p\")            #=> \"at 08:37AM\"\n\n Various ISO 8601 formats:\n   %Y%m%d           => 20071119                  Calendar date (basic)\n   %F               => 2007-11-19                Calendar date (extended)\n   %Y-%m            => 2007-11                   Calendar date, reduced accuracy, specific month\n   %Y               => 2007                      Calendar date, reduced accuracy, specific year\n   %C               => 20                        Calendar date, reduced accuracy, specific century\n   %Y%j             => 2007323                   Ordinal date (basic)\n   %Y-%j            => 2007-323                  Ordinal date (extended)\n   %GW%V%u          => 2007W471                  Week date (basic)\n   %G-W%V-%u        => 2007-W47-1                Week date (extended)\n   %GW%V            => 2007W47                   Week date, reduced accuracy, specific week (basic)\n   %G-W%V           => 2007-W47                  Week date, reduced accuracy, specific week (extended)\n   %H%M%S           => 083748                    Local time (basic)\n   %T               => 08:37:48                  Local time (extended)\n   %H%M             => 0837                      Local time, reduced accuracy, specific minute (basic)\n   %H:%M            => 08:37                     Local time, reduced accuracy, specific minute (extended)\n   %H               => 08                        Local time, reduced accuracy, specific hour\n   %H%M%S,%L        => 083748,000                Local time with decimal fraction, comma as decimal sign (basic)\n   %T,%L            => 08:37:48,000              Local time with decimal fraction, comma as decimal sign (extended)\n   %H%M%S.%L        => 083748.000                Local time with decimal fraction, full stop as decimal sign (basic)\n   %T.%L            => 08:37:48.000              Local time with decimal fraction, full stop as decimal sign (extended)\n   %H%M%S%z         => 083748-0600               Local time and the difference from UTC (basic)\n   %T%:z            => 08:37:48-06:00            Local time and the difference from UTC (extended)\n   %Y%m%dT%H%M%S%z  => 20071119T083748-0600      Date and time of day for calendar date (basic)\n   %FT%T%:z         => 2007-11-19T08:37:48-06:00 Date and time of day for calendar date (extended)\n   %Y%jT%H%M%S%z    => 2007323T083748-0600       Date and time of day for ordinal date (basic)\n   %Y-%jT%T%:z      => 2007-323T08:37:48-06:00   Date and time of day for ordinal date (extended)\n   %GW%V%uT%H%M%S%z => 2007W471T083748-0600      Date and time of day for week date (basic)\n   %G-W%V-%uT%T%:z  => 2007-W47-1T08:37:48-06:00 Date and time of day for week date (extended)\n   %Y%m%dT%H%M      => 20071119T0837             Calendar date and local time (basic)\n   %FT%R            => 2007-11-19T08:37          Calendar date and local time (extended)\n   %Y%jT%H%MZ       => 2007323T0837Z             Ordinal date and UTC of day (basic)\n   %Y-%jT%RZ        => 2007-323T08:37Z           Ordinal date and UTC of day (extended)\n   %GW%V%uT%H%M%z   => 2007W471T0837-0600        Week date and local time and difference from UTC (basic)\n   %G-W%V-%uT%R%:z  => 2007-W47-1T08:37-06:00    Week date and local time and difference from UTC (extended)\n\nSee also strftime(3) and strptime.",
  "to_time": "Returns a Time object which denotes self.",
  "to_date": "Returns a Date object which denotes self.",
  "to_datetime": "Returns self."
}