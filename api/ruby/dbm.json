{
  "open": "Open a dbm database and yields it if a block is given. See also\n<code>DBM.new</code>.",
  "initialize": "Open a dbm database with the specified name, which can include a directory\npath. Any file extensions needed will be supplied automatically by the dbm\nlibrary. For example, Berkeley DB appends '.db', and GNU gdbm uses two\nphysical files with extensions '.dir' and '.pag'.\n\nThe mode should be an integer, as for Unix chmod.\n\nFlags should be one of READER, WRITER, WRCREAT or NEWDB.",
  "close": "Closes the database.",
  "closed?": "Returns true if the database is closed, false otherwise.",
  "[]": "Return a value from the database by locating the key string\nprovided.  If the key is not found, returns nil.",
  "fetch": "Return a value from the database by locating the key string\nprovided.  If the key is not found, returns +ifnone+. If +ifnone+\nis not given, raises IndexError.",
  "[]=": "Stores the specified string value in the database, indexed via the\nstring key provided.",
  "store": "Stores the specified string value in the database, indexed via the\nstring key provided.",
  "index": ":nodoc:",
  "key": "Returns the key for the specified value.",
  "select": "Returns a new array consisting of the [key, value] pairs for which the code\nblock returns true.",
  "values_at": "Returns an array containing the values associated with the given keys.",
  "length": "Returns the number of entries in the database.",
  "size": "Returns the number of entries in the database.",
  "empty?": "Returns true if the database is empty, false otherwise.",
  "each": "Calls the block once for each [key, value] pair in the database.\nReturns self.",
  "each_value": "Calls the block once for each value string in the database. Returns self.",
  "each_key": "Calls the block once for each key string in the database. Returns self.",
  "each_pair": "Calls the block once for each [key, value] pair in the database.\nReturns self.",
  "keys": "Returns an array of all the string keys in the database.",
  "values": "Returns an array of all the string values in the database.",
  "shift": "Removes a [key, value] pair from the database, and returns it.\nIf the database is empty, returns nil.\nThe order in which values are removed/returned is not guaranteed.",
  "delete": "Deletes an entry from the database.",
  "delete_if": "Deletes all entries for which the code block returns true.\nReturns self.",
  "reject!": "Deletes all entries for which the code block returns true.\nReturns self.",
  "reject": "Converts the contents of the database to an in-memory Hash, then calls\nHash#reject with the specified code block, returning a new Hash.",
  "clear": "Deletes all data from the database.",
  "invert": "Returns a Hash (not a DBM database) created by using each value in the\ndatabase as a key, with the corresponding key as its value.",
  "update": "Updates the database with multiple values from the specified object.\nTakes any object which implements the each_pair method, including\nHash and DBM objects.",
  "replace": "Replaces the contents of the database with the contents of the specified\nobject. Takes any object which implements the each_pair method, including\nHash and DBM objects.",
  "include?": "Returns true if the database contains the specified key, false otherwise.",
  "has_key?": "Returns true if the database contains the specified key, false otherwise.",
  "member?": "Returns true if the database contains the specified key, false otherwise.",
  "has_value?": "Returns true if the database contains the specified string value, false\notherwise.",
  "key?": "Returns true if the database contains the specified key, false otherwise.",
  "value?": "Returns true if the database contains the specified string value, false\notherwise.",
  "to_a": "Converts the contents of the database to an array of [key, value] arrays,\nand returns it.",
  "to_hash": "Converts the contents of the database to an in-memory Hash object, and\nreturns it.",
  "READER": "Indicates that dbm_open() should open the database in read-only mode",
  "WRITER": "Indicates that dbm_open() should open the database in read/write mode",
  "WRCREAT": "Indicates that dbm_open() should open the database in read/write mode,\nand create it if it does not already exist",
  "NEWDB": "Indicates that dbm_open() should open the database in read/write mode,\ncreate it if it does not already exist, and delete all contents if it\ndoes already exist.",
  "VERSION": "- \"ndbm (4.3BSD)\"\n- \"Berkeley DB 4.8.30: (April  9, 2010)\"\n- \"Berkeley DB (unknown)\" (4.4BSD, maybe)\n- \"GDBM version 1.8.3. 10/15/2002 (built Jul  1 2011 12:32:45)\"\n- \"QDBM 1.8.78\""
}