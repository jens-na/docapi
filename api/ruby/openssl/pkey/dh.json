{
  "generate": "Creates a new DH instance from scratch by generating the private and public\ncomponents alike.\n\n=== Parameters\n* +size+ is an integer representing the desired key size. Keys smaller than 1024 bits should be considered insecure.\n* +generator+ is a small number > 1, typically 2 or 5.",
  "initialize": "Either generates a DH instance from scratch or by reading already existing\nDH parameters from +string+. Note that when reading a DH instance from\ndata that was encoded from a DH instance by using DH#to_pem or DH#to_der\nthe result will *not* contain a public/private key pair yet. This needs to\nbe generated using DH#generate_key! first.\n\n=== Parameters\n* +size+ is an integer representing the desired key size. Keys smaller than 1024 bits should be considered insecure.\n* +generator+ is a small number > 1, typically 2 or 5.\n* +string+ contains the DER or PEM encoded key.\n\n=== Examples\nDH.new # -> dh\nDH.new(1024) # -> dh\nDH.new(1024, 5) # -> dh\n#Reading DH parameters\ndh = DH.new(File.read('parameters.pem')) # -> dh, but no public/private key yet\ndh.generate_key! # -> dh with public and private key",
  "public?": "Indicates whether this DH instance has a public key associated with it or\nnot. The public key may be retrieved with DH#pub_key.",
  "private?": "Indicates whether this DH instance has a private key associated with it or\nnot. The private key may be retrieved with DH#priv_key.",
  "to_text": "Prints all parameters of key to buffer\nINSECURE: PRIVATE INFORMATIONS CAN LEAK OUT!!!\nDon't use :-)) (I's up to you)",
  "export": "Encodes this DH to its PEM encoding. Note that any existing per-session\npublic/private keys will *not* get encoded, just the Diffie-Hellman\nparameters will be encoded.",
  "to_pem": "Encodes this DH to its PEM encoding. Note that any existing per-session\npublic/private keys will *not* get encoded, just the Diffie-Hellman\nparameters will be encoded.",
  "to_s": "Encodes this DH to its PEM encoding. Note that any existing per-session\npublic/private keys will *not* get encoded, just the Diffie-Hellman\nparameters will be encoded.",
  "to_der": "Encodes this DH to its DER encoding. Note that any existing per-session\npublic/private keys will *not* get encoded, just the Diffie-Hellman\nparameters will be encoded.",
  "public_key": "Returns a new DH instance that carries just the public information, i.e.\nthe prime +p+ and the generator +g+, but no public/private key yet. Such\na pair may be generated using DH#generate_key!. The \"public key\" needed\nfor a key exchange with DH#compute_key is considered as per-session\ninformation and may be retrieved with DH#pub_key once a key pair has\nbeen generated.\nIf the current instance already contains private information (and thus a\nvalid public/private key pair), this information will no longer be present\nin the new instance generated by DH#public_key. This feature is helpful for\npublishing the Diffie-Hellman parameters without leaking any of the private\nper-session information.\n\n=== Example\ndh = OpenSSL::PKey::DH.new(2048) # has public and private key set\npublic_key = dh.public_key # contains only prime and generator\nparameters = public_key.to_der # it's safe to publish this",
  "params_ok?": "Validates the Diffie-Hellman parameters associated with this instance.\nIt checks whether a safe prime and a suitable generator are used. If this\nis not the case, +false+ is returned.",
  "generate_key!": "Generates a private and public key unless a private key already exists.\nIf this DH instance was generated from public DH parameters (e.g. by\nencoding the result of DH#public_key), then this method needs to be\ncalled first in order to generate the per-session keys before performing\nthe actual key exchange.\n\n=== Example\n dh = OpenSSL::PKey::DH.new(2048)\n public_key = dh.public_key #contains no private/public key yet\n public_key.generate_key!\n puts public_key.private? # => true",
  "compute_key": "Returns a String containing a shared secret computed from the other party's public value.\nSee DH_compute_key() for further information.\n\n=== Parameters\n* +pub_bn+ is a OpenSSL::BN, *not* the DH instance returned by\nDH#public_key as that contains the DH parameters only.",
  "params": "Stores all parameters of key to the hash\nINSECURE: PRIVATE INFORMATIONS CAN LEAK OUT!!!\nDon't use :-)) (I's up to you)"
}