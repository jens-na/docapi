{
  "initialize": "Because PKey is an abstract class, actually calling this method explicitly\nwill raise a +NotImplementedError+.",
  "sign": "To sign the +String+ +data+, +digest+, an instance of OpenSSL::Digest, must\nbe provided. The return value is again a +String+ containing the signature.\nA PKeyError is raised should errors occur.\nAny previous state of the +Digest+ instance is irrelevant to the signature\noutcome, the digest instance is reset to its initial state during the\noperation.\n\n== Example\n data = 'Sign me!'\n digest = OpenSSL::Digest::SHA256.new\n pkey = OpenSSL::PKey::RSA.new(2048)\n signature = pkey.sign(digest, data)",
  "verify": "To verify the +String+ +signature+, +digest+, an instance of\nOpenSSL::Digest, must be provided to re-compute the message digest of the\noriginal +data+, also a +String+. The return value is +true+ if the\nsignature is valid, +false+ otherwise. A PKeyError is raised should errors\noccur.\nAny previous state of the +Digest+ instance is irrelevant to the validation\noutcome, the digest instance is reset to its initial state during the\noperation.\n\n== Example\n data = 'Sign me!'\n digest = OpenSSL::Digest::SHA256.new\n pkey = OpenSSL::PKey::RSA.new(2048)\n signature = pkey.sign(digest, data)\n pub_key = pkey.public_key\n puts pub_key.verify(digest, signature, data) # => true"
}