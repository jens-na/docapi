{
  "ssl_timeout": "",
  "ssl_timeout=": "",
  "initialize": "You can get a list of valid methods with OpenSSL::SSL::SSLContext::METHODS",
  "ssl_version=": "ctx.ssl_version = \"SSLv23_client\"\n\nYou can get a list of valid versions with OpenSSL::SSL::SSLContext::METHODS",
  "ciphers": "The list of ciphers configured for this context.",
  "ciphers=": "ctx.ciphers = [name, ...]\n   ctx.ciphers = [[name, version, bits, alg_bits], ...]\n\nSets the list of available ciphers for this context.  Note in a server\ncontext some ciphers require the appropriate certificates.  For example, an\nRSA cipher can only be chosen when an RSA certificate is available.\n\nSee also OpenSSL::Cipher and OpenSSL::Cipher::ciphers",
  "setup": "This method is called automatically when a new SSLSocket is created.\nNormally you do not need to call this method (unless you are writing an\nextension in C).",
  "SESSION_CACHE_OFF": "No session caching for client or server",
  "SESSION_CACHE_CLIENT": "doesn't actually do anything in 0.9.8e",
  "SESSION_CACHE_SERVER": "Server sessions are added to the session cache",
  "SESSION_CACHE_BOTH": "no different than CACHE_SERVER in 0.9.8e",
  "SESSION_CACHE_NO_AUTO_CLEAR": "Normally the session cache is checked for expired sessions every 255\nconnections.  Since this may lead to a delay that cannot be controlled,\nthe automatic flushing may be disabled and #flush_sessions can be\ncalled explicitly.",
  "SESSION_CACHE_NO_INTERNAL_LOOKUP": "Always perform external lookups of sessions even if they are in the\ninternal cache.\n\nThis flag has no effect on clients",
  "SESSION_CACHE_NO_INTERNAL_STORE": "Never automatically store sessions in the internal store.",
  "SESSION_CACHE_NO_INTERNAL": "Enables both SESSION_CACHE_NO_INTERNAL_LOOKUP and\nSESSION_CACHE_NO_INTERNAL_STORE.",
  "session_add": "Adds +session+ to the session cache",
  "session_remove": "Removes +session+ from the session cache",
  "session_cache_mode": "The current session cache mode.",
  "session_cache_mode=": "Sets the SSL session cache mode.  Bitwise-or together the desired\nSESSION_CACHE_* constants to set.  See SSL_CTX_set_session_cache_mode(3) for\ndetails.",
  "session_cache_size": "Returns the current session cache size.  Zero is used to represent an\nunlimited cache size.",
  "session_cache_size=": "Sets the session cache size.  Returns the previously valid session cache\nsize.  Zero is used to represent an unlimited session cache size.",
  "session_cache_stats": "Returns a Hash containing the following keys:\n\n:accept:: Number of started SSL/TLS handshakes in server mode\n:accept_good:: Number of established SSL/TLS sessions in server mode\n:accept_renegotiate:: Number of start renegotiations in server mode\n:cache_full:: Number of sessions that were removed due to cache overflow\n:cache_hits:: Number of successfully reused connections\n:cache_misses:: Number of sessions proposed by clients that were not found\n               in the cache\n:cache_num:: Number of sessions in the internal session cache\n:cb_hits:: Number of sessions retrieved from the external cache in server\n          mode\n:connect:: Number of started SSL/TLS handshakes in client mode\n:connect_good:: Number of established SSL/TLS sessions in client mode\n:connect_renegotiate:: Number of start renegotiations in client mode\n:timeouts:: Number of sessions proposed by clients that were found in the\n           cache but had expired due to timeouts",
  "flush_sessions": "Removes sessions in the internal cache that have expired at +time+.",
  "METHODS": "The list of available SSL/TLS methods"
}