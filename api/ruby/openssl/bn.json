{
  "initialize": "",
  "copy": "",
  "num_bytes": "swap (=coerce?)",
  "num_bits": "",
  "+": "num_bits_word",
  "-": "",
  "*": "",
  "sqr": "",
  "/": "",
  "%": "",
  "mod_add": "nnmod",
  "mod_sub": "",
  "mod_mul": "",
  "mod_sqr": "",
  "**": "",
  "mod_exp": "",
  "gcd": "",
  "cmp": "add_word\nsub_word\nmul_word\ndiv_word\nmod_word",
  "<=>": "add_word\nsub_word\nmul_word\ndiv_word\nmod_word",
  "ucmp": "",
  "eql?": "",
  "==": "",
  "===": "",
  "zero?": "",
  "one?": "",
  "odd?": "is_word",
  "rand": "zero\none\nvalue_one - DON'T IMPL.\nset_word\nget_word",
  "pseudo_rand": "",
  "rand_range": "",
  "pseudo_rand_range": "",
  "generate_prime": "",
  "prime?": "=== Parameters\n* +checks+ - integer",
  "set_bit!": "",
  "clear_bit!": "",
  "bit_set?": "",
  "mask_bits!": "",
  "<<": "",
  ">>": "",
  "lshift!": "",
  "rshift!": "",
  "to_s": "=== Parameters\n* +base+ - integer\n* * Valid values:\n* * * 0 - MPI\n* * * 2 - binary\n* * * 10 - the default\n* * * 16 - hex",
  "to_i": "",
  "to_int": "",
  "to_bn": "",
  "coerce": "",
  "mod_inverse": "TODO:\nBut how to: from_bin, from_mpi? PACK?\nto_bin\nto_mpi",
  "prime_fasttest?": "=== Parameters\n* +checks+ - integer\n* +trial_div+ - boolean"
}