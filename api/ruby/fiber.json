{
  "yield": "Yields control back to the context that resumed the fiber, passing\nalong any arguments that were passed to it. The fiber will resume\nprocessing at this point when <code>resume</code> is called next.\nAny arguments passed to the next <code>resume</code> will be the\nvalue that this <code>Fiber.yield</code> expression evaluates to.",
  "initialize": ":nodoc:",
  "resume": "Resumes the fiber from the point at which the last <code>Fiber.yield</code>\nwas called, or starts running it if it is the first call to\n<code>resume</code>. Arguments passed to resume will be the value of\nthe <code>Fiber.yield</code> expression or will be passed as block\nparameters to the fiber's block if this is the first <code>resume</code>.\n\nAlternatively, when resume is called it evaluates to the arguments passed\nto the next <code>Fiber.yield</code> statement inside the fiber's block\nor to the block value if it runs to completion without any\n<code>Fiber.yield</code>",
  "transfer": "Transfer control to another fiber, resuming it from where it last\nstopped or starting it if it was not resumed before. The calling\nfiber will be suspended much like in a call to\n<code>Fiber.yield</code>. You need to <code>require 'fiber'</code>\nbefore using this method.\n\nThe fiber which receives the transfer call is treats it much like\na resume call. Arguments passed to transfer are treated like those\npassed to resume.\n\nYou cannot resume a fiber that transferred control to another one.\nThis will cause a double resume error. You need to transfer control\nback to this fiber before it can yield and resume.\n\nExample:\n\n  fiber1 = Fiber.new do\n    puts \"In Fiber 1\"\n    Fiber.yield\n  end\n\n  fiber2 = Fiber.new do\n    puts \"In Fiber 2\"\n    fiber1.transfer\n    puts \"Never see this message\"\n  end\n\n  fiber3 = Fiber.new do\n    puts \"In Fiber 3\"\n  end\n\n  fiber2.resume\n  fiber3.resume\n\n  <em>produces</em>\n\n  In fiber 2\n  In fiber 1\n  In fiber 3",
  "alive?": "Returns true if the fiber can still be resumed (or transferred\nto). After finishing execution of the fiber block this method will\nalways return false. You need to <code>require 'fiber'</code>\nbefore using this method.",
  "current": "Returns the current fiber. You need to <code>require 'fiber'</code>\nbefore using this method. If you are not running in the context of\na fiber this method will return the root fiber."
}