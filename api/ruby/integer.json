{
  "integer?": "Since +int+ is already an Integer, this always returns +true+.",
  "odd?": "Returns +true+ if +int+ is an odd number.",
  "even?": "Returns +true+ if +int+ is an even number.",
  "upto": "Iterates the given block, passing in integer values from +int+ up to and\nincluding +limit+.\n\nIf no block is given, an Enumerator is returned instead.\n\nFor example:\n\n   5.upto(10) { |i| print i, \" \" }\n   #=> 5 6 7 8 9 10",
  "downto": "Iterates the given block, passing decreasing values from +int+ down to and\nincluding +limit+.\n\nIf no block is given, an Enumerator is returned instead.\n\n   5.downto(1) { |n| print n, \".. \" }\n   print \"  Liftoff!\\n\"\n   #=> \"5.. 4.. 3.. 2.. 1..   Liftoff!\"",
  "times": "Iterates the given block +int+ times, passing in values from zero to\n<code>int - 1</code>.\n\nIf no block is given, an Enumerator is returned instead.\n\n   5.times do |i|\n     print i, \" \"\n   end\n   #=> 0 1 2 3 4",
  "succ": "",
  "next": "",
  "pred": "",
  "chr": "Returns a string containing the character represented by the +int+'s value\naccording to +encoding+.\n\n   65.chr    #=> \"A\"\n   230.chr   #=> \"\\346\"\n   255.chr(Encoding::UTF_8)   #=> \"\\303\\277\"",
  "ord": "Returns the +int+ itself.\n\n   ?a.ord    #=> 97\n\nThis method is intended for compatibility to character constant in Ruby\n1.9.\n\nFor example, ?a.ord returns 97 both in 1.8 and 1.9.",
  "to_i": "As +int+ is already an Integer, all these methods simply return the receiver.\n\nSynonyms are #to_int, #floor, #ceil, #truncate.",
  "to_int": "As +int+ is already an Integer, all these methods simply return the receiver.\n\nSynonyms are #to_int, #floor, #ceil, #truncate.",
  "floor": "As +int+ is already an Integer, all these methods simply return the receiver.\n\nSynonyms are #to_int, #floor, #ceil, #truncate.",
  "ceil": "As +int+ is already an Integer, all these methods simply return the receiver.\n\nSynonyms are #to_int, #floor, #ceil, #truncate.",
  "truncate": "As +int+ is already an Integer, all these methods simply return the receiver.\n\nSynonyms are #to_int, #floor, #ceil, #truncate.",
  "round": "Rounds +int+ to a given precision in decimal digits (default 0 digits).\n\nPrecision may be negative.  Returns a floating point number when +ndigits+\nis positive, +self+ for zero, and round down for negative.\n\n   1.round        #=> 1\n   1.round(2)     #=> 1.0\n   15.round(-1)   #=> 20",
  "gcd": "Returns the greatest common divisor (always positive).  0.gcd(x)\nand x.gcd(0) return abs(x).\n\n   2.gcd(2)                    #=> 2\n   3.gcd(-7)                   #=> 1\n   ((1<<31)-1).gcd((1<<61)-1)  #=> 1",
  "lcm": "Returns the least common multiple (always positive).  0.lcm(x) and\nx.lcm(0) return zero.\n\n   2.lcm(2)                    #=> 2\n   3.lcm(-7)                   #=> 21\n   ((1<<31)-1).lcm((1<<61)-1)  #=> 4951760154835678088235319297",
  "gcdlcm": "Returns an array; [int.gcd(int2), int.lcm(int2)].\n\n   2.gcdlcm(2)                    #=> [2, 2]\n   3.gcdlcm(-7)                   #=> [1, 21]\n   ((1<<31)-1).gcdlcm((1<<61)-1)  #=> [1, 4951760154835678088235319297]",
  "numerator": "Returns self.",
  "denominator": "Returns 1.",
  "to_r": "Returns the value as a rational.\n\n   1.to_r        #=> (1/1)\n   (1<<64).to_r  #=> (18446744073709551616/1)",
  "rationalize": "Returns the value as a rational.  The optional argument eps is\nalways ignored.",
  "big_mul_normal": "",
  "big_sq_fast": "",
  "big_mul_balance": "",
  "big_mul_karatsuba": "",
  "big_mul_toom3": "",
  "big_mul_gmp": "",
  "big_divrem_normal": "",
  "big_divrem_gmp": "",
  "gcd_normal": "",
  "gcd_gmp": "",
  "test_pack_raw": "",
  "test_pack": "",
  "test_unpack": "",
  "INTEGER_PACK_MSWORD_FIRST": "",
  "INTEGER_PACK_LSWORD_FIRST": "",
  "INTEGER_PACK_MSBYTE_FIRST": "",
  "INTEGER_PACK_LSBYTE_FIRST": "",
  "INTEGER_PACK_NATIVE_BYTE_ORDER": "",
  "INTEGER_PACK_2COMP": "",
  "INTEGER_PACK_LITTLE_ENDIAN": "",
  "INTEGER_PACK_BIG_ENDIAN": "",
  "INTEGER_PACK_FORCE_BIGNUM": "",
  "INTEGER_PACK_NEGATIVE": "",
  "INTEGER_PACK_FORCE_GENERIC_IMPLEMENTATION": "",
  "test_numbits_2comp_without_sign": "",
  "test_numbytes_2comp_with_sign": "",
  "big2str_generic": "",
  "big2str_poweroftwo": "",
  "big2str_gmp": ""
}