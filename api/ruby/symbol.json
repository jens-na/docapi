{
  "all_symbols": "Returns an array of all the symbols currently in Ruby's symbol\ntable.\n\n   Symbol.all_symbols.size    #=> 903\n   Symbol.all_symbols[1,20]   #=> [:floor, :ARGV, :Binding, :symlink,\n                                   :chown, :EOFError, :$;, :String,\n                                   :LOCK_SH, :\"setuid?\", :$<,\n                                   :default_proc, :compact, :extend,\n                                   :Tms, :getwd, :$=, :ThreadGroup,\n                                   :wait2, :$>]",
  "==": "Equality---If <i>sym</i> and <i>obj</i> are exactly the same\nsymbol, returns <code>true</code>.",
  "===": "Equality---If <i>sym</i> and <i>obj</i> are exactly the same\nsymbol, returns <code>true</code>.",
  "inspect": "Returns the representation of <i>sym</i> as a symbol literal.\n\n   :fred.inspect   #=> \":fred\"",
  "to_s": "Returns the name or string corresponding to <i>sym</i>.\n\n   :fred.id2name   #=> \"fred\"",
  "id2name": "Returns the name or string corresponding to <i>sym</i>.\n\n   :fred.id2name   #=> \"fred\"",
  "intern": "In general, <code>to_sym</code> returns the <code>Symbol</code> corresponding\nto an object. As <i>sym</i> is already a symbol, <code>self</code> is returned\nin this case.",
  "to_sym": "In general, <code>to_sym</code> returns the <code>Symbol</code> corresponding\nto an object. As <i>sym</i> is already a symbol, <code>self</code> is returned\nin this case.",
  "to_proc": "Returns a _Proc_ object which respond to the given method by _sym_.\n\n  (1..3).collect(&:to_s)  #=> [\"1\", \"2\", \"3\"]",
  "succ": "Same as <code>sym.to_s.succ.intern</code>.",
  "next": "Same as <code>sym.to_s.succ.intern</code>.",
  "<=>": "Compares +symbol+ with +other_symbol+ after calling #to_s on each of the\nsymbols. Returns -1, 0, +1 or nil depending on whether +symbol+ is less\nthan, equal to, or greater than +other_symbol+.\n\n +nil+ is returned if the two values are incomparable.\n\nSee String#<=> for more information.",
  "casecmp": "Case-insensitive version of <code>Symbol#<=></code>.",
  "=~": "Returns <code>sym.to_s =~ obj</code>.",
  "[]": "Returns <code>sym.to_s[]</code>.",
  "slice": "Returns <code>sym.to_s[]</code>.",
  "length": "Same as <code>sym.to_s.length</code>.",
  "size": "Same as <code>sym.to_s.length</code>.",
  "empty?": "Returns that _sym_ is :\"\" or not.",
  "match": "Returns <code>sym.to_s =~ obj</code>.",
  "upcase": "Same as <code>sym.to_s.upcase.intern</code>.",
  "downcase": "Same as <code>sym.to_s.downcase.intern</code>.",
  "capitalize": "Same as <code>sym.to_s.capitalize.intern</code>.",
  "swapcase": "Same as <code>sym.to_s.swapcase.intern</code>.",
  "encoding": "Returns the Encoding object that represents the encoding of _sym_."
}