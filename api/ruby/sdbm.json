{
  "open": "If called without a block, this is the same as SDBM.new.\n\nIf a block is given, the new database will be passed to the block and\nwill be safely closed after the block has executed.\n\nExample:\n\n    require 'sdbm'\n\n    SDBM.open('my_database') do |db|\n      db['hello'] = 'world'\n    end",
  "initialize": "Creates a new database handle by opening the given +filename+. SDBM actually\nuses two physical files, with extensions '.dir' and '.pag'. These extensions\nwill automatically be appended to the +filename+.\n\nIf the file does not exist, a new file will be created using the given\n+mode+, unless +mode+ is explicitly set to nil. In the latter case, no\ndatabase will be created.\n\nIf the file exists, it will be opened in read/write mode. If this fails, it\nwill be opened in read-only mode.",
  "close": "Closes the database file.\n\nRaises SDBMError if the database is already closed.",
  "closed?": "Returns +true+ if the database is closed.",
  "[]": "Returns the +value+ in the database associated with the given +key+ string.\n\nIf no value is found, returns +nil+.",
  "fetch": "Returns the +value+ in the database associated with the given +key+ string.\n\nIf a block is provided, the block will be called when there is no\n+value+ associated with the given +key+. The +key+ will be passed in as an\nargument to the block.\n\nIf no block is provided and no value is associated with the given +key+,\nthen an IndexError will be raised.",
  "[]=": "Stores a new +value+ in the database with the given +key+ as an index.\n\nIf the +key+ already exists, this will update the +value+ associated with\nthe +key+.\n\nReturns the given +value+.",
  "store": "Stores a new +value+ in the database with the given +key+ as an index.\n\nIf the +key+ already exists, this will update the +value+ associated with\nthe +key+.\n\nReturns the given +value+.",
  "index": ":nodoc:",
  "key": "Returns the +key+ associated with the given +value+. If more than one\n+key+ corresponds to the given +value+, then the first key to be found\nwill be returned. If no keys are found, +nil+ will be returned.",
  "select": "Returns a new Array of key-value pairs for which the block returns +true+.\n\nExample:\n\n   require 'sdbm'\n\n   SDBM.open 'my_database' do |db|\n     db['apple'] = 'fruit'\n     db['pear'] = 'fruit'\n     db['spinach'] = 'vegetable'\n\n     veggies = db.select do |key, value|\n       value == 'vegetable'\n     end #=> [[\"apple\", \"fruit\"], [\"pear\", \"fruit\"]]\n   end",
  "values_at": "Returns an Array of values corresponding to the given keys.",
  "length": "Returns the number of keys in the database.",
  "size": "Returns the number of keys in the database.",
  "empty?": "Returns +true+ if the database is empty.",
  "each": "Iterates over each key-value pair in the database.\n\nIf no block is given, returns an Enumerator.",
  "each_value": "Iterates over each +value+ in the database.\n\nIf no block is given, returns an Enumerator.",
  "each_key": "Iterates over each +key+ in the database.\n\nIf no block is given, returns an Enumerator.",
  "each_pair": "Iterates over each key-value pair in the database.\n\nIf no block is given, returns an Enumerator.",
  "keys": "Returns a new Array containing the keys in the database.",
  "values": "Returns a new Array containing the values in the database.",
  "shift": "Removes a key-value pair from the database and returns them as an\nArray. If the database is empty, returns +nil+.",
  "delete": "Deletes the key-value pair corresponding to the given +key+. If the\n+key+ exists, the deleted value will be returned, otherwise +nil+.\n\nIf a block is provided, the deleted +key+ and +value+ will be passed to\nthe block as arguments. If the +key+ does not exist in the database, the\nvalue will be +nil+.",
  "delete_if": "Iterates over the key-value pairs in the database, deleting those for\nwhich the block returns +true+.",
  "reject!": "Iterates over the key-value pairs in the database, deleting those for\nwhich the block returns +true+.",
  "reject": "Creates a new Hash using the key-value pairs from the database, then\ncalls Hash#reject with the given block, which returns a Hash with\nonly the key-value pairs for which the block returns +false+.",
  "clear": "Deletes all data from the database.",
  "invert": "Returns a Hash in which the key-value pairs have been inverted.\n\nExample:\n\n  require 'sdbm'\n\n  SDBM.open 'my_database' do |db|\n    db.update('apple' => 'fruit', 'spinach' => 'vegetable')\n\n    db.invert  #=> {\"fruit\" => \"apple\", \"vegetable\" => \"spinach\"}\n  end",
  "update": "Insert or update key-value pairs.\n\nThis method will work with any object which implements an each_pair\nmethod, such as a Hash.",
  "replace": "Empties the database, then inserts the given key-value pairs.\n\nThis method will work with any object which implements an each_pair\nmethod, such as a Hash.",
  "has_key?": "Returns +true+ if the database contains the given +key+.",
  "include?": "Returns +true+ if the database contains the given +key+.",
  "key?": "Returns +true+ if the database contains the given +key+.",
  "member?": "Returns +true+ if the database contains the given +key+.",
  "has_value?": "Returns +true+ if the database contains the given +value+.",
  "value?": "Returns +true+ if the database contains the given +value+.",
  "to_a": "Returns a new Array containing each key-value pair in the database.\n\nExample:\n\n  require 'sdbm'\n\n  SDBM.open 'my_database' do |db|\n    db.update('apple' => 'fruit', 'spinach' => 'vegetable')\n\n    db.to_a  #=> [[\"apple\", \"fruit\"], [\"spinach\", \"vegetable\"]]\n  end",
  "to_hash": "Returns a new Hash containing each key-value pair in the database."
}