{
  "initialize": "Creates a new PRNG using +seed+ to set the initial state. If +seed+ is\nomitted, the generator is initialized with Random.new_seed.\n\nSee Random.srand for more information on the use of seed values.",
  "rand": "Alias of Random::DEFAULT.rand.",
  "bytes": "Returns a random binary string containing +size+ bytes.\n\n  random_string = Random.new.bytes(10) # => \"\\xD7:R\\xAB?\\x83\\xCE\\xFAkO\"\n  random_string.size                   # => 10",
  "seed": "Returns the seed value used to initialize the generator. This may be used to\ninitialize another generator with the same state at a later time, causing it\nto produce the same sequence of numbers.\n\n  prng1 = Random.new(1234)\n  prng1.seed       #=> 1234\n  prng1.rand(100)  #=> 47\n\n  prng2 = Random.new(prng1.seed)\n  prng2.rand(100)  #=> 47",
  "initialize_copy": ":nodoc:",
  "marshal_dump": ":nodoc:",
  "marshal_load": ":nodoc:",
  "state": ":nodoc:",
  "left": ":nodoc:",
  "==": "Returns true if the two generators have the same internal state, otherwise\nfalse.  Equivalent generators will return the same sequence of\npseudo-random numbers.  Two generators will generally have the same state\nonly if they were initialized with the same seed\n\n  Random.new == Random.new             # => false\n  Random.new(1234) == Random.new(1234) # => true\n\nand have the same invocation history.\n\n  prng1 = Random.new(1234)\n  prng2 = Random.new(1234)\n  prng1 == prng2 # => true\n\n  prng1.rand     # => 0.1915194503788923\n  prng1 == prng2 # => false\n\n  prng2.rand     # => 0.1915194503788923\n  prng1 == prng2 # => true",
  "DEFAULT": "Direct access to Ruby's Pseudorandom number generator (PRNG).",
  "srand": "Seeds the system pseudo-random number generator, Random::DEFAULT, with\n+number+.  The previous seed value is returned.\n\nIf +number+ is omitted, seeds the generator using a source of entropy\nprovided by the operating system, if available (/dev/urandom on Unix systems\nor the RSA cryptographic provider on Windows), which is then combined with\nthe time, the process id, and a sequence number.\n\nsrand may be used to ensure repeatable sequences of pseudo-random numbers\nbetween different runs of the program. By setting the seed to a known value,\nprograms can be made deterministic during testing.\n\n  srand 1234               # => 268519324636777531569100071560086917274\n  [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]\n  [ rand(10), rand(1000) ] # => [4, 664]\n  srand 1234               # => 1234\n  [ rand, rand ]           # => [0.1915194503788923, 0.6221087710398319]",
  "new_seed": "Returns an arbitrary seed value. This is used by Random.new\nwhen no seed value is specified as an argument.\n\n  Random.new_seed  #=> 115032730400174366788466674494640623225"
}