{
  "MONTHNAMES": "An array of strings of full month names in English.  The first\nelement is nil.",
  "ABBR_MONTHNAMES": "An array of strings of abbreviated month names in English.  The\nfirst element is nil.",
  "DAYNAMES": "An array of strings of the full names of days of the week in English.\nThe first is \"Sunday\".",
  "ABBR_DAYNAMES": "An array of strings of abbreviated day names in English.  The\nfirst is \"Sun\".",
  "ITALY": "The Julian day number of the day of calendar reform for Italy\nand some catholic countries.",
  "ENGLAND": "The Julian day number of the day of calendar reform for England\nand her colonies.",
  "JULIAN": "The Julian day number of the day of calendar reform for the\nproleptic Julian calendar",
  "GREGORIAN": "The Julian day number of the day of calendar reform for the\nproleptic Gregorian calendar",
  "valid_jd?": "Just returns true.  It's nonsense, but is for symmetry.\n\n   Date.valid_jd?(2451944)\t\t#=> true\n\nSee also jd.",
  "valid_ordinal?": "Returns true if the given ordinal date is valid, and false if not.\n\n   Date.valid_ordinal?(2001,34)\t#=> true\n   Date.valid_ordinal?(2001,366)\t#=> false\n\nSee also jd and ordinal.",
  "valid_civil?": "Returns true if the given calendar date is valid, and false if not.\n\n   Date.valid_date?(2001,2,3)\t#=> true\n   Date.valid_date?(2001,2,29)\t#=> false\n\nSee also jd and civil.",
  "valid_date?": "Returns true if the given calendar date is valid, and false if not.\n\n   Date.valid_date?(2001,2,3)\t#=> true\n   Date.valid_date?(2001,2,29)\t#=> false\n\nSee also jd and civil.",
  "valid_commercial?": "Returns true if the given week date is valid, and false if not.\n\n   Date.valid_commercial?(2001,5,6)\t#=> true\n   Date.valid_commercial?(2001,5,8)\t#=> false\n\nSee also jd and commercial.",
  "julian_leap?": "Returns true if the given year is a leap year of the proleptic\nJulian calendar.\n\n   Date.julian_leap?(1900)\t\t#=> true\n   Date.julian_leap?(1901)\t\t#=> false",
  "gregorian_leap?": "Returns true if the given year is a leap year of the proleptic\nGregorian calendar.\n\n   Date.gregorian_leap?(1900)\t#=> false\n   Date.gregorian_leap?(2000)\t#=> true",
  "leap?": "Returns true if the year is a leap year.\n\n   Date.new(2000).leap?\t#=> true\n   Date.new(2001).leap?\t#=> false",
  "jd": "Returns the Julian day number.  This is a whole number, which is\nadjusted by the offset as the local time.\n\n   DateTime.new(2001,2,3,4,5,6,'+7').jd\t#=> 2451944\n   DateTime.new(2001,2,3,4,5,6,'-7').jd\t#=> 2451944",
  "ordinal": "Creates a date object denoting the given ordinal date.\n\nThe day of year should be a negative or a positive number (as a\nrelative day from the end of year when negative).  It should not be\nzero.\n\n   Date.ordinal(2001)\t#=> #<Date: 2001-01-01 ...>\n   Date.ordinal(2001,34)\t#=> #<Date: 2001-02-03 ...>\n   Date.ordinal(2001,-1)\t#=> #<Date: 2001-12-31 ...>\n\nSee also jd and new.",
  "civil": "Creates a date object denoting the given calendar date.\n\nIn this class, BCE years are counted astronomically.  Thus, the\nyear before the year 1 is the year zero, and the year preceding the\nyear zero is the year -1.  The month and the day of month should be\na negative or a positive number (as a relative month/day from the\nend of year/month when negative).  They should not be zero.\n\nThe last argument should be a Julian day number which denotes the\nday of calendar reform.  Date::ITALY (2299161=1582-10-15),\nDate::ENGLAND (2361222=1752-09-14), Date::GREGORIAN (the proleptic\nGregorian calendar) and Date::JULIAN (the proleptic Julian\ncalendar) can be specified as a day of calendar reform.\n\n   Date.new(2001)\t\t#=> #<Date: 2001-01-01 ...>\n   Date.new(2001,2,3)\t#=> #<Date: 2001-02-03 ...>\n   Date.new(2001,2,-1)\t#=> #<Date: 2001-02-28 ...>\n\nSee also jd.",
  "new": "Creates a date object denoting the given calendar date.\n\nIn this class, BCE years are counted astronomically.  Thus, the\nyear before the year 1 is the year zero, and the year preceding the\nyear zero is the year -1.  The month and the day of month should be\na negative or a positive number (as a relative month/day from the\nend of year/month when negative).  They should not be zero.\n\nThe last argument should be a Julian day number which denotes the\nday of calendar reform.  Date::ITALY (2299161=1582-10-15),\nDate::ENGLAND (2361222=1752-09-14), Date::GREGORIAN (the proleptic\nGregorian calendar) and Date::JULIAN (the proleptic Julian\ncalendar) can be specified as a day of calendar reform.\n\n   Date.new(2001)\t\t#=> #<Date: 2001-01-01 ...>\n   Date.new(2001,2,3)\t#=> #<Date: 2001-02-03 ...>\n   Date.new(2001,2,-1)\t#=> #<Date: 2001-02-28 ...>\n\nSee also jd.",
  "commercial": "Creates a date object denoting the given week date.\n\nThe week and the day of week should be a negative or a positive\nnumber (as a relative week/day from the end of year/week when\nnegative).  They should not be zero.\n\n   Date.commercial(2001)\t#=> #<Date: 2001-01-01 ...>\n   Date.commercial(2002)\t#=> #<Date: 2001-12-31 ...>\n   Date.commercial(2001,5,6)\t#=> #<Date: 2001-02-03 ...>\n\nSee also jd and new.",
  "today": "Date.today\t\t#=> #<Date: 2011-06-11 ..>\n\nCreates a date object denoting the present day.",
  "_strptime": "Parses the given representation of date and time with the given\ntemplate, and returns a hash of parsed elements.  _strptime does\nnot support specification of flags and width unlike strftime.\n\n   Date._strptime('2001-02-03', '%Y-%m-%d')\n\t\t\t#=> {:year=>2001, :mon=>2, :mday=>3}\n\n See also strptime(3) and strftime.",
  "strptime": "Parses the given representation of date and time with the given\ntemplate, and creates a date object.  strptime does not support\nspecification of flags and width unlike strftime.\n\n   Date.strptime('2001-02-03', '%Y-%m-%d')\t#=> #<Date: 2001-02-03 ...>\n   Date.strptime('03-02-2001', '%d-%m-%Y')\t#=> #<Date: 2001-02-03 ...>\n   Date.strptime('2001-034', '%Y-%j')\t#=> #<Date: 2001-02-03 ...>\n   Date.strptime('2001-W05-6', '%G-W%V-%u')\t#=> #<Date: 2001-02-03 ...>\n   Date.strptime('2001 04 6', '%Y %U %w')\t#=> #<Date: 2001-02-03 ...>\n   Date.strptime('2001 05 6', '%Y %W %u')\t#=> #<Date: 2001-02-03 ...>\n   Date.strptime('sat3feb01', '%a%d%b%y')\t#=> #<Date: 2001-02-03 ...>\n\nSee also strptime(3) and strftime.",
  "_parse": "Parses the given representation of date and time, and returns a\nhash of parsed elements.  This method does not function as a\nvalidator.\n\nIf the optional second argument is true and the detected year is in\nthe range \"00\" to \"99\", considers the year a 2-digit form and makes\nit full.\n\n   Date._parse('2001-02-03')\t#=> {:year=>2001, :mon=>2, :mday=>3}",
  "parse": "Parses the given representation of date and time, and creates a\ndate object.  This method does not function as a validator.\n\nIf the optional second argument is true and the detected year is in\nthe range \"00\" to \"99\", considers the year a 2-digit form and makes\nit full.\n\n   Date.parse('2001-02-03')\t\t#=> #<Date: 2001-02-03 ...>\n   Date.parse('20010203')\t\t#=> #<Date: 2001-02-03 ...>\n   Date.parse('3rd Feb 2001')\t#=> #<Date: 2001-02-03 ...>",
  "_iso8601": "Returns a hash of parsed elements.",
  "iso8601": "This method is equivalent to strftime('%F').",
  "_rfc3339": "Returns a hash of parsed elements.",
  "rfc3339": "This method is equivalent to strftime('%FT%T%:z').",
  "_xmlschema": "Returns a hash of parsed elements.",
  "xmlschema": "This method is equivalent to strftime('%F').",
  "_rfc2822": "Returns a hash of parsed elements.",
  "_rfc822": "Returns a hash of parsed elements.",
  "rfc2822": "This method is equivalent to strftime('%a, %-d %b %Y %T %z').",
  "rfc822": "This method is equivalent to strftime('%a, %-d %b %Y %T %z').",
  "_httpdate": "Returns a hash of parsed elements.",
  "httpdate": "This method is equivalent to strftime('%a, %d %b %Y %T GMT').\nSee also RFC 2616.",
  "_jisx0301": "Returns a hash of parsed elements.",
  "jisx0301": "Returns a string in a JIS X 0301 format.\n\n   Date.new(2001,2,3).jisx0301\t#=> \"H13.02.03\"",
  "initialize_copy": ":nodoc:",
  "ajd": "Returns the astronomical Julian day number.  This is a fractional\nnumber, which is not adjusted by the offset.\n\n   DateTime.new(2001,2,3,4,5,6,'+7').ajd\t#=> (11769328217/4800)\n   DateTime.new(2001,2,2,14,5,6,'-7').ajd\t#=> (11769328217/4800)",
  "amjd": "Returns the astronomical modified Julian day number.  This is\na fractional number, which is not adjusted by the offset.\n\n   DateTime.new(2001,2,3,4,5,6,'+7').amjd\t#=> (249325817/4800)\n   DateTime.new(2001,2,2,14,5,6,'-7').amjd\t#=> (249325817/4800)",
  "mjd": "Returns the modified Julian day number.  This is a whole number,\nwhich is adjusted by the offset as the local time.\n\n   DateTime.new(2001,2,3,4,5,6,'+7').mjd\t#=> 51943\n   DateTime.new(2001,2,3,4,5,6,'-7').mjd\t#=> 51943",
  "ld": "Returns the Lilian day number.  This is a whole number, which is\nadjusted by the offset as the local time.\n\n    Date.new(2001,2,3).ld\t\t#=> 152784",
  "year": "Returns the year.\n\n   Date.new(2001,2,3).year\t\t#=> 2001\n   (Date.new(1,1,1) - 1).year\t#=> 0",
  "yday": "Returns the day of the year (1-366).\n\n   Date.new(2001,2,3).yday\t\t#=> 34",
  "mon": "Returns the month (1-12).\n\n   Date.new(2001,2,3).mon\t\t#=> 2",
  "month": "Returns the month (1-12).\n\n   Date.new(2001,2,3).mon\t\t#=> 2",
  "mday": "Returns the day of the month (1-31).\n\n   Date.new(2001,2,3).mday\t\t#=> 3",
  "day": "Returns the day of the month (1-31).\n\n   Date.new(2001,2,3).mday\t\t#=> 3",
  "day_fraction": "Returns the fractional part of the day.\n\n   DateTime.new(2001,2,3,12).day_fraction\t#=> (1/2)",
  "cwyear": "Returns the calendar week based year.\n\n   Date.new(2001,2,3).cwyear\t\t#=> 2001\n   Date.new(2000,1,1).cwyear\t\t#=> 1999",
  "cweek": "Returns the calendar week number (1-53).\n\n   Date.new(2001,2,3).cweek\t\t#=> 5",
  "cwday": "Returns the day of calendar week (1-7, Monday is 1).\n\n   Date.new(2001,2,3).cwday\t\t#=> 6",
  "wday": "Returns the day of week (0-6, Sunday is zero).\n\n   Date.new(2001,2,3).wday\t\t#=> 6",
  "sunday?": "Returns true if the date is Sunday.",
  "monday?": "Returns true if the date is Monday.",
  "tuesday?": "Returns true if the date is Tuesday.",
  "wednesday?": "Returns true if the date is Wednesday.",
  "thursday?": "Returns true if the date is Thursday.",
  "friday?": "Returns true if the date is Friday.",
  "saturday?": "Returns true if the date is Saturday.",
  "hour": "Returns the hour (0-23).\n\n   DateTime.new(2001,2,3,4,5,6).hour\t\t#=> 4",
  "min": "Returns the minute (0-59).\n\n   DateTime.new(2001,2,3,4,5,6).min\t\t#=> 5",
  "minute": "Returns the minute (0-59).\n\n   DateTime.new(2001,2,3,4,5,6).min\t\t#=> 5",
  "sec": "Returns the second (0-59).\n\n   DateTime.new(2001,2,3,4,5,6).sec\t\t#=> 6",
  "second": "Returns the second (0-59).\n\n   DateTime.new(2001,2,3,4,5,6).sec\t\t#=> 6",
  "sec_fraction": "Returns the fractional part of the second.\n\n   DateTime.new(2001,2,3,4,5,6.5).sec_fraction\t#=> (1/2)",
  "second_fraction": "Returns the fractional part of the second.\n\n   DateTime.new(2001,2,3,4,5,6.5).sec_fraction\t#=> (1/2)",
  "offset": "Returns the offset.\n\n   DateTime.parse('04pm+0730').offset\t#=> (5/16)",
  "zone": "Returns the timezone.\n\n   DateTime.parse('04pm+0730').zone\t\t#=> \"+07:30\"",
  "julian?": "Retruns true if the date is before the day of calendar reform.\n\n    Date.new(1582,10,15).julian?\t\t#=> false\n    (Date.new(1582,10,15) - 1).julian?\t#=> true",
  "gregorian?": "Retunrs true if the date is on or after the day of calendar reform.\n\n    Date.new(1582,10,15).gregorian?\t\t#=> true\n    (Date.new(1582,10,15) - 1).gregorian?\t#=> false",
  "start": "Returns the Julian day number denoting the day of calendar reform.\n\n   Date.new(2001,2,3).start\t\t\t#=> 2299161.0\n   Date.new(2001,2,3,Date::GREGORIAN).start\t#=> -Infinity",
  "new_start": "Duplicates self and resets its the day of calendar reform.\n\n   d = Date.new(1582,10,15)\n   d.new_start(Date::JULIAN)\t\t#=> #<Date: 1582-10-05 ...>",
  "italy": "This method is equivalent to new_start(Date::ITALY).",
  "england": "This method is equivalent to new_start(Date::ENGLAND).",
  "julian": "This method is equivalent to new_start(Date::JULIAN).",
  "gregorian": "This method is equivalent to new_start(Date::GREGORIAN).",
  "new_offset": "Duplicates self and resets its offset.\n\n   d = DateTime.new(2001,2,3,4,5,6,'-02:00')\n\t\t\t#=> #<DateTime: 2001-02-03T04:05:06-02:00 ...>\n   d.new_offset('+09:00')\t#=> #<DateTime: 2001-02-03T15:05:06+09:00 ...>",
  "+": "Returns a date object pointing other days after self.  The other\nshould be a numeric value.  If the other is flonum, assumes its\nprecision is at most nanosecond.\n\n   Date.new(2001,2,3) + 1\t#=> #<Date: 2001-02-04 ...>\n   DateTime.new(2001,2,3) + Rational(1,2)\n\t\t\t#=> #<DateTime: 2001-02-03T12:00:00+00:00 ...>\n   DateTime.new(2001,2,3) + Rational(-1,2)\n\t\t\t#=> #<DateTime: 2001-02-02T12:00:00+00:00 ...>\n   DateTime.jd(0,12) + DateTime.new(2001,2,3).ajd\n\t\t\t#=> #<DateTime: 2001-02-03T00:00:00+00:00 ...>",
  "-": "Returns the difference between the two dates if the other is a date\nobject.  If the other is a numeric value, returns a date object\npointing other days before self.  If the other is flonum, assumes\nits precision is at most nanosecond.\n\n    Date.new(2001,2,3) - 1\t#=> #<Date: 2001-02-02 ...>\n    DateTime.new(2001,2,3) - Rational(1,2)\n\t\t\t#=> #<DateTime: 2001-02-02T12:00:00+00:00 ...>\n    Date.new(2001,2,3) - Date.new(2001)\n\t\t\t#=> (33/1)\n    DateTime.new(2001,2,3) - DateTime.new(2001,2,2,12)\n\t\t\t#=> (1/2)",
  "next_day": "This method is equivalent to d + n.",
  "prev_day": "This method is equivalent to d - n.",
  "next": "Returns a date object denoting the following day.",
  "succ": "Returns a date object denoting the following day.",
  ">>": "Returns a date object pointing n months after self.  The n should\nbe a numeric value.\n\n   Date.new(2001,2,3) >> 1\t#=> #<Date: 2001-03-03 ...>\n   Date.new(2001,1,31) >> 1\t#=> #<Date: 2001-02-28 ...>\n   Date.new(2001,2,3) >> -2\t#=> #<Date: 2000-12-03 ...>",
  "<<": "Returns a date object pointing n months before self.  The n should\nbe a numeric value.\n\n   Date.new(2001,2,3) << 1\t#=> #<Date: 2001-01-03 ...>\n   Date.new(2001,1,31) << 11\t#=> #<Date: 2000-02-29 ...>\n   Date.new(2001,2,3) << -1\t#=> #<Date: 2001-03-03 ...>",
  "next_month": "This method is equivalent to d >> n",
  "prev_month": "This method is equivalent to d << n",
  "next_year": "This method is equivalent to d >> (n * 12)",
  "prev_year": "This method is equivalent to d << (n * 12)",
  "step": "Iterates evaluation of the given block, which takes a date object.\nThe limit should be a date object.\n\n   Date.new(2001).step(Date.new(2001,-1,-1)).select{|d| d.sunday?}.size\n\t\t\t#=> 52",
  "upto": "This method is equivalent to step(max, 1){|date| ...}.",
  "downto": "This method is equivalent to step(min, -1){|date| ...}.",
  "<=>": "Compares the two dates and returns -1, zero, 1 or nil.  The other\nshould be a date object or a numeric value as an astronomical\nJulian day number.\n\n   Date.new(2001,2,3) <=> Date.new(2001,2,4)\t#=> -1\n   Date.new(2001,2,3) <=> Date.new(2001,2,3)\t#=> 0\n   Date.new(2001,2,3) <=> Date.new(2001,2,2)\t#=> 1\n   Date.new(2001,2,3) <=> Object.new\t\t#=> nil\n   Date.new(2001,2,3) <=> Rational(4903887,2)#=> 0\n\nSee also Comparable.",
  "===": "Returns true if they are the same day.\n\n   Date.new(2001,2,3) === Date.new(2001,2,3)\n\t\t\t\t\t#=> true\n   Date.new(2001,2,3) === Date.new(2001,2,4)\n\t\t\t\t#=> false\n   DateTime.new(2001,2,3) === DateTime.new(2001,2,3,12)\n\t\t\t\t#=> true\n   DateTime.new(2001,2,3) === DateTime.new(2001,2,3,0,0,0,'+24:00')\n\t\t\t\t#=> true\n   DateTime.new(2001,2,3) === DateTime.new(2001,2,4,0,0,0,'+24:00')\n\t\t\t\t#=> false",
  "eql?": ":nodoc:",
  "hash": ":nodoc:",
  "to_s": "Returns a string in an ISO 8601 format (This method doesn't use the\nexpanded representations).\n\n    Date.new(2001,2,3).to_s\t#=> \"2001-02-03\"",
  "inspect": "Returns the value as a string for inspection.\n\n   Date.new(2001,2,3).inspect\n\t#=> \"#<Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)>\"\n   DateTime.new(2001,2,3,4,5,6,'-7').inspect\n\t#=> \"#<DateTime: 2001-02-03T04:05:06-07:00 ((2451944j,39906s,0n),-25200s,2299161j)>\"",
  "strftime": "Formats date according to the directives in the given format\n string.\n The directives begins with a percent (%) character.\n Any text not listed as a directive will be passed through to the\n output string.\n\n The directive consists of a percent (%) character,\n zero or more flags, optional minimum field width,\n optional modifier and a conversion specifier\n as follows.\n\n   %<flags><width><modifier><conversion>\n\n Flags:\n   -  don't pad a numerical output.\n   _  use spaces for padding.\n   0  use zeros for padding.\n   ^  upcase the result string.\n   #  change case.\n\n The minimum field width specifies the minimum width.\n\n The modifiers are \"E\", \"O\", \":\", \"::\" and \":::\".\n \"E\" and \"O\" are ignored.  No effect to result currently.\n\n Format directives:\n\n   Date (Year, Month, Day):\n     %Y - Year with century (can be negative, 4 digits at least)\n             -0001, 0000, 1995, 2009, 14292, etc.\n     %C - year / 100 (round down.  20 in 2009)\n     %y - year % 100 (00..99)\n\n     %m - Month of the year, zero-padded (01..12)\n             %_m  blank-padded ( 1..12)\n             %-m  no-padded (1..12)\n     %B - The full month name (``January'')\n             %^B  uppercased (``JANUARY'')\n     %b - The abbreviated month name (``Jan'')\n             %^b  uppercased (``JAN'')\n     %h - Equivalent to %b\n\n     %d - Day of the month, zero-padded (01..31)\n             %-d  no-padded (1..31)\n     %e - Day of the month, blank-padded ( 1..31)\n\n     %j - Day of the year (001..366)\n\n   Time (Hour, Minute, Second, Subsecond):\n     %H - Hour of the day, 24-hour clock, zero-padded (00..23)\n     %k - Hour of the day, 24-hour clock, blank-padded ( 0..23)\n     %I - Hour of the day, 12-hour clock, zero-padded (01..12)\n     %l - Hour of the day, 12-hour clock, blank-padded ( 1..12)\n     %P - Meridian indicator, lowercase (``am'' or ``pm'')\n     %p - Meridian indicator, uppercase (``AM'' or ``PM'')\n\n     %M - Minute of the hour (00..59)\n\n     %S - Second of the minute (00..59)\n\n     %L - Millisecond of the second (000..999)\n     %N - Fractional seconds digits, default is 9 digits (nanosecond)\n             %3N  millisecond (3 digits)   %15N femtosecond (15 digits)\n             %6N  microsecond (6 digits)   %18N attosecond  (18 digits)\n             %9N  nanosecond  (9 digits)   %21N zeptosecond (21 digits)\n             %12N picosecond (12 digits)   %24N yoctosecond (24 digits)\n\n   Time zone:\n     %z - Time zone as hour and minute offset from UTC (e.g. +0900)\n             %:z - hour and minute offset from UTC with a colon (e.g. +09:00)\n             %::z - hour, minute and second offset from UTC (e.g. +09:00:00)\n             %:::z - hour, minute and second offset from UTC\n                                               (e.g. +09, +09:30, +09:30:30)\n     %Z - Time zone abbreviation name or something similar information.\n\n   Weekday:\n     %A - The full weekday name (``Sunday'')\n             %^A  uppercased (``SUNDAY'')\n     %a - The abbreviated name (``Sun'')\n             %^a  uppercased (``SUN'')\n     %u - Day of the week (Monday is 1, 1..7)\n     %w - Day of the week (Sunday is 0, 0..6)\n\n   ISO 8601 week-based year and week number:\n   The week 1 of YYYY starts with a Monday and includes YYYY-01-04.\n   The days in the year before the first week are in the last week of\n   the previous year.\n     %G - The week-based year\n     %g - The last 2 digits of the week-based year (00..99)\n     %V - Week number of the week-based year (01..53)\n\n   Week number:\n   The week 1 of YYYY starts with a Sunday or Monday (according to %U\n   or %W).  The days in the year before the first week are in week 0.\n     %U - Week number of the year.  The week starts with Sunday.  (00..53)\n     %W - Week number of the year.  The week starts with Monday.  (00..53)\n\n   Seconds since the Unix Epoch:\n     %s - Number of seconds since 1970-01-01 00:00:00 UTC.\n     %Q - Number of milliseconds since 1970-01-01 00:00:00 UTC.\n\n   Literal string:\n     %n - Newline character (\\n)\n     %t - Tab character (\\t)\n     %% - Literal ``%'' character\n\n   Combination:\n     %c - date and time (%a %b %e %T %Y)\n     %D - Date (%m/%d/%y)\n     %F - The ISO 8601 date format (%Y-%m-%d)\n     %v - VMS date (%e-%b-%Y)\n     %x - Same as %D\n     %X - Same as %T\n     %r - 12-hour time (%I:%M:%S %p)\n     %R - 24-hour time (%H:%M)\n     %T - 24-hour time (%H:%M:%S)\n     %+ - date(1) (%a %b %e %H:%M:%S %Z %Y)\n\n This method is similar to strftime() function defined in ISO C and POSIX.\n Several directives (%a, %A, %b, %B, %c, %p, %r, %x, %X, %E*, %O* and %Z)\n are locale dependent in the function.\n However this method is locale independent.\n So, the result may differ even if a same format string is used in other\n systems such as C.\n It is good practice to avoid %x and %X because there are corresponding\n locale independent representations, %D and %T.\n\n Examples:\n\n   d = DateTime.new(2007,11,19,8,37,48,\"-06:00\")\n\t\t\t#=> #<DateTime: 2007-11-19T08:37:48-0600 ...>\n   d.strftime(\"Printed on %m/%d/%Y\")   #=> \"Printed on 11/19/2007\"\n   d.strftime(\"at %I:%M%p\")            #=> \"at 08:37AM\"\n\n Various ISO 8601 formats:\n   %Y%m%d           => 20071119                  Calendar date (basic)\n   %F               => 2007-11-19                Calendar date (extended)\n   %Y-%m            => 2007-11                   Calendar date, reduced accuracy, specific month\n   %Y               => 2007                      Calendar date, reduced accuracy, specific year\n   %C               => 20                        Calendar date, reduced accuracy, specific century\n   %Y%j             => 2007323                   Ordinal date (basic)\n   %Y-%j            => 2007-323                  Ordinal date (extended)\n   %GW%V%u          => 2007W471                  Week date (basic)\n   %G-W%V-%u        => 2007-W47-1                Week date (extended)\n   %GW%V            => 2007W47                   Week date, reduced accuracy, specific week (basic)\n   %G-W%V           => 2007-W47                  Week date, reduced accuracy, specific week (extended)\n   %H%M%S           => 083748                    Local time (basic)\n   %T               => 08:37:48                  Local time (extended)\n   %H%M             => 0837                      Local time, reduced accuracy, specific minute (basic)\n   %H:%M            => 08:37                     Local time, reduced accuracy, specific minute (extended)\n   %H               => 08                        Local time, reduced accuracy, specific hour\n   %H%M%S,%L        => 083748,000                Local time with decimal fraction, comma as decimal sign (basic)\n   %T,%L            => 08:37:48,000              Local time with decimal fraction, comma as decimal sign (extended)\n   %H%M%S.%L        => 083748.000                Local time with decimal fraction, full stop as decimal sign (basic)\n   %T.%L            => 08:37:48.000              Local time with decimal fraction, full stop as decimal sign (extended)\n   %H%M%S%z         => 083748-0600               Local time and the difference from UTC (basic)\n   %T%:z            => 08:37:48-06:00            Local time and the difference from UTC (extended)\n   %Y%m%dT%H%M%S%z  => 20071119T083748-0600      Date and time of day for calendar date (basic)\n   %FT%T%:z         => 2007-11-19T08:37:48-06:00 Date and time of day for calendar date (extended)\n   %Y%jT%H%M%S%z    => 2007323T083748-0600       Date and time of day for ordinal date (basic)\n   %Y-%jT%T%:z      => 2007-323T08:37:48-06:00   Date and time of day for ordinal date (extended)\n   %GW%V%uT%H%M%S%z => 2007W471T083748-0600      Date and time of day for week date (basic)\n   %G-W%V-%uT%T%:z  => 2007-W47-1T08:37:48-06:00 Date and time of day for week date (extended)\n   %Y%m%dT%H%M      => 20071119T0837             Calendar date and local time (basic)\n   %FT%R            => 2007-11-19T08:37          Calendar date and local time (extended)\n   %Y%jT%H%MZ       => 2007323T0837Z             Ordinal date and UTC of day (basic)\n   %Y-%jT%RZ        => 2007-323T08:37Z           Ordinal date and UTC of day (extended)\n   %GW%V%uT%H%M%z   => 2007W471T0837-0600        Week date and local time and difference from UTC (basic)\n   %G-W%V-%uT%R%:z  => 2007-W47-1T08:37-06:00    Week date and local time and difference from UTC (extended)\n\nSee also strftime(3) and strptime.",
  "asctime": "Returns a string in asctime(3) format (but without \"\\n\\0\" at the\nend).  This method is equivalent to strftime('%c').\n\nSee also asctime(3) or ctime(3).",
  "ctime": "Returns a string in asctime(3) format (but without \"\\n\\0\" at the\nend).  This method is equivalent to strftime('%c').\n\nSee also asctime(3) or ctime(3).",
  "marshal_dump": ":nodoc:",
  "marshal_load": ":nodoc:",
  "_load": ":nodoc:",
  "to_time": "Returns a Time object which denotes self.",
  "to_date": "Returns self;",
  "to_datetime": "Returns a DateTime object which denotes self."
}