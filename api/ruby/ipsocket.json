{
  "addr": "Returns the local address as an array which contains\naddress_family, port, hostname and numeric_address.\n\nIf +reverse_lookup+ is +true+ or +:hostname+,\nhostname is obtained from numeric_address using reverse lookup.\nOr if it is +false+, or +:numeric+,\nhostname is same as numeric_address.\nOr if it is +nil+ or ommitted, obeys to +ipsocket.do_not_reverse_lookup+.\nSee +Socket.getaddrinfo+ also.\n\n  TCPSocket.open(\"www.ruby-lang.org\", 80) {|sock|\n    p sock.addr #=> [\"AF_INET\", 49429, \"hal\", \"192.168.0.128\"]\n    p sock.addr(true)  #=> [\"AF_INET\", 49429, \"hal\", \"192.168.0.128\"]\n    p sock.addr(false) #=> [\"AF_INET\", 49429, \"192.168.0.128\", \"192.168.0.128\"]\n    p sock.addr(:hostname)  #=> [\"AF_INET\", 49429, \"hal\", \"192.168.0.128\"]\n    p sock.addr(:numeric)   #=> [\"AF_INET\", 49429, \"192.168.0.128\", \"192.168.0.128\"]\n  }",
  "peeraddr": "Returns the remote address as an array which contains\naddress_family, port, hostname and numeric_address.\nIt is defined for connection oriented socket such as TCPSocket.\n\nIf +reverse_lookup+ is +true+ or +:hostname+,\nhostname is obtained from numeric_address using reverse lookup.\nOr if it is +false+, or +:numeric+,\nhostname is same as numeric_address.\nOr if it is +nil+ or ommitted, obeys to +ipsocket.do_not_reverse_lookup+.\nSee +Socket.getaddrinfo+ also.\n\n  TCPSocket.open(\"www.ruby-lang.org\", 80) {|sock|\n    p sock.peeraddr #=> [\"AF_INET\", 80, \"carbon.ruby-lang.org\", \"221.186.184.68\"]\n    p sock.peeraddr(true)  #=> [\"AF_INET\", 80, \"carbon.ruby-lang.org\", \"221.186.184.68\"]\n    p sock.peeraddr(false) #=> [\"AF_INET\", 80, \"221.186.184.68\", \"221.186.184.68\"]\n    p sock.peeraddr(:hostname) #=> [\"AF_INET\", 80, \"carbon.ruby-lang.org\", \"221.186.184.68\"]\n    p sock.peeraddr(:numeric)  #=> [\"AF_INET\", 80, \"221.186.184.68\", \"221.186.184.68\"]\n  }",
  "recvfrom": "Receives a message and return the message as a string and\nan address which the message come from.\n\n_maxlen_ is the maximum number of bytes to receive.\n\n_flags_ should be a bitwise OR of Socket::MSG_* constants.\n\nipaddr is same as IPSocket#{peeraddr,addr}.\n\n  u1 = UDPSocket.new\n  u1.bind(\"127.0.0.1\", 4913)\n  u2 = UDPSocket.new\n  u2.send \"uuuu\", 0, \"127.0.0.1\", 4913\n  p u1.recvfrom(10) #=> [\"uuuu\", [\"AF_INET\", 33230, \"localhost\", \"127.0.0.1\"]]",
  "getaddress": "Lookups the IP address of _host_.\n\n  IPSocket.getaddress(\"localhost\")     #=> \"127.0.0.1\"\n  IPSocket.getaddress(\"ip6-localhost\") #=> \"::1\""
}