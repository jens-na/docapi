{
  "new": "TracePoint.new(*events) { |obj| block }\t    -> obj\n\nReturns a new TracePoint object, not enabled by default.\n\nNext, in order to activate the trace, you must use TracePoint.enable\n\ntrace = TracePoint.new(:call) do |tp|\n    p [tp.lineno, tp.defined_class, tp.method_id, tp.event]\nend\n#=> #<TracePoint:disabled>\n\ntrace.enable\n#=> false\n\nputs \"Hello, TracePoint!\"\n# ...\n# [48, IRB::Notifier::AbstractNotifier, :printf, :call]\n# ...\n\nWhen you want to deactivate the trace, you must use TracePoint.disable\n\ntrace.disable\n\nSee TracePoint@Events for possible events and more information.\n\nA block must be given, otherwise a ThreadError is raised.\n\nIf the trace method isn't included in the given events filter, a\nRuntimeError is raised.\n\nTracePoint.trace(:line) do |tp|\n    p tp.raised_exception\nend\n#=> RuntimeError: 'raised_exception' not supported by this event\n\nIf the trace method is called outside block, a RuntimeError is raised.\n\n     TracePoint.trace(:line) do |tp|\n       $tp = tp\n     end\n     $tp.line #=> access from outside (RuntimeError)\n\nAccess from other threads is also forbidden.",
  "trace": "call-seq:\nTracePoint.trace(*events) { |obj| block }\t-> obj\n\n A convenience method for TracePoint.new, that activates the trace\n automatically.\n\n    trace = TracePoint.trace(:call) { |tp| [tp.lineno, tp.event] }\n    #=> #<TracePoint:enabled>\n\n    trace.enabled? #=> true",
  "enable": "trace.enable\t\t-> true or false\ntrace.enable { block }\t-> obj\n\nActivates the trace\n\nReturn true if trace was enabled.\nReturn false if trace was disabled.\n\ntrace.enabled?  #=> false\ntrace.enable    #=> false (previous state)\n                     #   trace is enabled\ntrace.enabled?  #=> true\ntrace.enable    #=> true (previous state)\n                     #   trace is still enabled\n\nIf a block is given, the trace will only be enabled within the scope of the\nblock.\n\ntrace.enabled?\n#=> false\n\ntrace.enable do\n    trace.enabled?\n    # only enabled for this block\nend\n\ntrace.enabled?\n#=> false\n\nNote: You cannot access event hooks within the block.\n\ntrace.enable { p tp.lineno }\n#=> RuntimeError: access from outside",
  "disable": "trace.disable\t\t-> true or false\ntrace.disable { block } -> obj\n\nDeactivates the trace\n\nReturn true if trace was enabled.\nReturn false if trace was disabled.\n\ntrace.enabled?\t#=> true\ntrace.disable\t#=> false (previous status)\ntrace.enabled?\t#=> false\ntrace.disable\t#=> false\n\nIf a block is given, the trace will only be disable within the scope of the\nblock.\n\ntrace.enabled?\n#=> true\n\ntrace.disable do\n    trace.enabled?\n    # only disabled for this block\nend\n\ntrace.enabled?\n#=> true\n\nNote: You cannot access event hooks within the block.\n\ntrace.disable { p tp.lineno }\n#=> RuntimeError: access from outside",
  "enabled?": "trace.enabled?\t    -> true or false\n\nThe current status of the trace",
  "inspect": "Return a string containing a human-readable TracePoint\nstatus.",
  "event": "Type of event\n\nSee TracePoint@Events for more information.",
  "lineno": "Line number of the event",
  "path": "Path of the file being run",
  "method_id": "Return the name of the method being called",
  "defined_class": "Return class or module of the method being called.\n\nclass C; def foo; end; end\n\ttrace = TracePoint.new(:call) do |tp|\n\t  p tp.defined_class #=> C\n\tend.enable do\n\t  C.new.foo\n\tend\n\nIf method is defined by a module, then that module is returned.\n\nmodule M; def foo; end; end\n\tclass C; include M; end;\n\ttrace = TracePoint.new(:call) do |tp|\n\t  p tp.defined_class #=> M\n\tend.enable do\n\t  C.new.foo\n\tend\n\n<b>Note:</b> #defined_class returns singleton class.\n\n6th block parameter of Kernel#set_trace_func passes original class\nof attached by singleton class.\n\n<b>This is a difference between Kernel#set_trace_func and TracePoint.</b>\n\nclass C; def self.foo; end; end\n\ttrace = TracePoint.new(:call) do |tp|\n\t  p tp.defined_class #=> #<Class:C>\n\tend.enable do\n\t  C.foo\n\tend",
  "binding": "Return the generated binding object from event",
  "self": "Return the trace object during event\n\nSame as TracePoint#binding:\ntrace.binding.eval('self')",
  "return_value": "Return value from +:return+, +c_return+, and +b_return+ event",
  "raised_exception": "Value from exception raised on the +:raise+ event"
}