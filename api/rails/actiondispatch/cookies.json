{
  "HTTP_HEADER": "",
  "GENERATOR_KEY": "",
  "SIGNED_COOKIE_SALT": "",
  "ENCRYPTED_COOKIE_SALT": "",
  "ENCRYPTED_SIGNED_COOKIE_SALT": "",
  "SECRET_TOKEN": "",
  "SECRET_KEY_BASE": "",
  "COOKIES_SERIALIZER": "",
  "MAX_COOKIE_SIZE": "Cookies can typically store 4096 bytes.",
  "CookieOverflow": "Raised when storing more than 4K of session data.",
  "ChainedCookieJars": "Include in a cookie jar to allow chaining, e.g. cookies.permanent.signed",
  "VerifyAndUpgradeLegacySignedMessage": "",
  "CookieJar": ":nodoc:",
  "PermanentCookieJar": ":nodoc:",
  "JsonSerializer": "",
  "NullSerializer": "Passing the NullSerializer downstream to the Message{Encryptor,Verifier}\nallows us to handle the (de)serialization step within the cookie jar,\nwhich gives us the opportunity to detect and migrate legacy cookies.",
  "SerializedCookieJars": "",
  "SignedCookieJar": ":nodoc:",
  "UpgradeLegacySignedCookieJar": "UpgradeLegacySignedCookieJar is used instead of SignedCookieJar if\nconfig.secret_token and secrets.secret_key_base are both set. It reads\nlegacy cookies signed with the old dummy key generator and re-saves\nthem using the new key generator to provide a smooth upgrade path.",
  "EncryptedCookieJar": ":nodoc:",
  "UpgradeLegacyEncryptedCookieJar": "UpgradeLegacyEncryptedCookieJar is used by ActionDispatch::Session::CookieStore\ninstead of EncryptedCookieJar if config.secret_token and secrets.secret_key_base\nare both set. It reads legacy cookies signed with the old dummy key generator and\nencrypts and re-saves them using the new key generator to provide a smooth upgrade path.",
  "initialize": "",
  "call": ""
}