{
  "URL_OPTIONS": "",
  "SCOPE_OPTIONS": "",
  "Constraints": ":nodoc:",
  "Mapping": ":nodoc:",
  "normalize_path": "Invokes Journey::Router::Utils.normalize_path and ensure that\n(:locale) becomes (/:locale) instead of /(:locale). Except\nfor root cases, where the latter is the correct one.",
  "normalize_name": "",
  "Base": "",
  "HttpHelpers": "",
  "Scoping": "You may wish to organize groups of controllers under a namespace.\nMost commonly, you might group a number of administrative controllers\nunder an +admin+ namespace. You would place these controllers under\nthe <tt>app/controllers/admin</tt> directory, and you can group them\ntogether in your router:\n\n  namespace \"admin\" do\n    resources :posts, :comments\n  end\n\nThis will create a number of routes for each of the posts and comments\ncontroller. For <tt>Admin::PostsController</tt>, Rails will create:\n\n  GET       /admin/posts\n  GET       /admin/posts/new\n  POST      /admin/posts\n  GET       /admin/posts/1\n  GET       /admin/posts/1/edit\n  PATCH/PUT /admin/posts/1\n  DELETE    /admin/posts/1\n\nIf you want to route /posts (without the prefix /admin) to\n<tt>Admin::PostsController</tt>, you could use\n\n  scope module: \"admin\" do\n    resources :posts\n  end\n\nor, for a single case\n\n  resources :posts, module: \"admin\"\n\nIf you want to route /admin/posts to +PostsController+\n(without the Admin:: module prefix), you could use\n\n  scope \"/admin\" do\n    resources :posts\n  end\n\nor, for a single case\n\n  resources :posts, path: \"/admin/posts\"\n\nIn each of these cases, the named routes remain the same as if you did\nnot use scope. In the last case, the following paths map to\n+PostsController+:\n\n  GET       /admin/posts\n  GET       /admin/posts/new\n  POST      /admin/posts\n  GET       /admin/posts/1\n  GET       /admin/posts/1/edit\n  PATCH/PUT /admin/posts/1\n  DELETE    /admin/posts/1",
  "Resources": "Resource routing allows you to quickly declare all of the common routes\nfor a given resourceful controller. Instead of declaring separate routes\nfor your +index+, +show+, +new+, +edit+, +create+, +update+ and +destroy+\nactions, a resourceful route declares them in a single line of code:\n\n resources :photos\n\nSometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, /profile always shows the profile of\nthe currently logged in user. In this case, you can use a singular resource\nto map /profile (rather than /profile/:id) to the show action.\n\n resource :profile\n\nIt's common to have resources that are logically children of other\nresources:\n\n  resources :magazines do\n    resources :ads\n  end\n\nYou may wish to organize groups of controllers under a namespace. Most\ncommonly, you might group a number of administrative controllers under\nan +admin+ namespace. You would place these controllers under the\n<tt>app/controllers/admin</tt> directory, and you can group them together\nin your router:\n\n  namespace \"admin\" do\n    resources :posts, :comments\n  end\n\nBy default the +:id+ parameter doesn't accept dots. If you need to\nuse dots as part of the +:id+ parameter add a constraint which\noverrides this restriction, e.g:\n\n  resources :articles, id: /[^\\/]+/\n\nThis allows any character other than a slash as part of your +:id+.",
  "Concerns": "Routing Concerns allow you to declare common routes that can be reused\ninside others resources and routes.\n\n  concern :commentable do\n    resources :comments\n  end\n\n  concern :image_attachable do\n    resources :images, only: :index\n  end\n\nThese concerns are used in Resources routing:\n\n  resources :messages, concerns: [:commentable, :image_attachable]\n\nor in a scope or namespace:\n\n  namespace :posts do\n    concerns :commentable\n  end",
  "initialize": ":nodoc:"
}