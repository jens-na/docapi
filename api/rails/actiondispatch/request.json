{
  "LOCALHOST": "",
  "ENV_METHODS": "",
  "initialize": "",
  "key?": "",
  "RFC2616": "List of HTTP request methods from the following RFCs:\nHypertext Transfer Protocol -- HTTP/1.1 (http://www.ietf.org/rfc/rfc2616.txt)\nHTTP Extensions for Distributed Authoring -- WEBDAV (http://www.ietf.org/rfc/rfc2518.txt)\nVersioning Extensions to WebDAV (http://www.ietf.org/rfc/rfc3253.txt)\nOrdered Collections Protocol (WebDAV) (http://www.ietf.org/rfc/rfc3648.txt)\nWeb Distributed Authoring and Versioning (WebDAV) Access Control Protocol (http://www.ietf.org/rfc/rfc3744.txt)\nWeb Distributed Authoring and Versioning (WebDAV) SEARCH (http://www.ietf.org/rfc/rfc5323.txt)\nPATCH Method for HTTP (http://www.ietf.org/rfc/rfc5789.txt)",
  "RFC2518": "",
  "RFC3253": "",
  "RFC3648": "",
  "RFC3744": "",
  "RFC5323": "",
  "RFC5789": "",
  "HTTP_METHODS": "",
  "HTTP_METHOD_LOOKUP": "",
  "request_method": "Returns the HTTP \\method that the application should see.\nIn the case where the \\method was overridden by a middleware\n(for instance, if a HEAD request was converted to a GET,\nor if a _method parameter was used to determine the \\method\nthe application should use), this \\method returns the overridden\nvalue, not the original.",
  "request_method_symbol": "Returns a symbol form of the #request_method",
  "method": "Returns the original value of the environment's REQUEST_METHOD,\neven if it was overridden by middleware. See #request_method for\nmore information.",
  "method_symbol": "Returns a symbol form of the #method",
  "get?": "Is this a GET (or HEAD) request?\nEquivalent to <tt>request.request_method_symbol == :get</tt>.",
  "post?": "Is this a POST request?\nEquivalent to <tt>request.request_method_symbol == :post</tt>.",
  "patch?": "Is this a PATCH request?\nEquivalent to <tt>request.request_method == :patch</tt>.",
  "put?": "Is this a PUT request?\nEquivalent to <tt>request.request_method_symbol == :put</tt>.",
  "delete?": "Is this a DELETE request?\nEquivalent to <tt>request.request_method_symbol == :delete</tt>.",
  "head?": "Is this a HEAD request?\nEquivalent to <tt>request.request_method_symbol == :head</tt>.",
  "headers": "Provides access to the request's HTTP headers, for example:\n\n  request.headers[\"Content-Type\"] # => \"text/plain\"",
  "original_fullpath": "",
  "fullpath": "Returns the +String+ full path including params of the last URL requested.\n\n   # get \"/articles\"\n   request.fullpath # => \"/articles\"\n\n   # get \"/articles?page=2\"\n   request.fullpath # => \"/articles?page=2\"",
  "original_url": "Returns the original request URL as a +String+.\n\n   # get \"/articles?page=2\"\n   request.original_url # => \"http://www.example.com/articles?page=2\"",
  "media_type": "The +String+ MIME type of the request.\n\n   # get \"/articles\"\n   request.media_type # => \"application/x-www-form-urlencoded\"",
  "content_length": "Returns the content length of the request as an integer.",
  "xml_http_request?": "Returns true if the \"X-Requested-With\" header contains \"XMLHttpRequest\"\n(case-insensitive). All major JavaScript libraries send this header with\nevery Ajax request.",
  "xhr?": "Returns true if the \"X-Requested-With\" header contains \"XMLHttpRequest\"\n(case-insensitive). All major JavaScript libraries send this header with\nevery Ajax request.",
  "ip": "",
  "remote_ip": "Originating IP address, usually set by the RemoteIp middleware.",
  "uuid": "Returns the unique request id, which is based off either the X-Request-Id header that can\nbe generated by a firewall, load balancer, or web server or by the RequestId middleware\n(which sets the action_dispatch.request_id environment variable).\n\nThis unique ID is useful for tracing a request from end-to-end as part of logging or debugging.\nThis relies on the rack variable set by the ActionDispatch::RequestId middleware.",
  "server_software": "Returns the lowercase name of the HTTP server software.",
  "raw_post": "Read the request \\body. This is useful for web services that need to\nwork with raw requests directly.",
  "body": "The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap it in a StringIO.",
  "form_data?": "",
  "body_stream": ":nodoc:",
  "reset_session": "TODO This should be broken apart into AD::Request::Session and probably\nbe included by the session middleware.",
  "session=": ":nodoc:",
  "session_options=": "",
  "GET": "Override Rack's GET method to support indifferent access",
  "query_parameters": "Override Rack's GET method to support indifferent access",
  "POST": "Override Rack's POST method to support indifferent access",
  "request_parameters": "Override Rack's POST method to support indifferent access",
  "authorization": "Returns the authorization header regardless of whether it was specified directly or through one of the\nproxy alternatives.",
  "local?": "True if the request came from localhost, 127.0.0.1.",
  "deep_munge": "Extracted into ActionDispatch::Request::Utils.deep_munge, but kept here for backwards compatibility.",
  "parse_query": "",
  "check_method": "",
  "Utils": ":nodoc:",
  "SessionTest": "",
  "Session": "Session is responsible for lazily loading the session from store.",
  "flash": "Access the contents of the flash. Use <tt>flash[\"notice\"]</tt> to\nread a notice you put there or <tt>flash[\"notice\"] = \"hello\"</tt>\nto put a new one.",
  "cookie_jar": ""
}