{
  "from_session_value": "",
  "to_session_value": "",
  "initialize": ":nodoc:",
  "initialize_copy": "",
  "[]=": "",
  "[]": "",
  "update": ":nodoc:",
  "keys": "",
  "key?": "",
  "delete": "",
  "to_hash": "",
  "empty?": "",
  "clear": "",
  "each": "",
  "merge!": ":nodoc:",
  "replace": ":nodoc:",
  "now": "Sets a flash that will not be available to the next action, only to the current.\n\n    flash.now[:message] = \"Hello current action\"\n\nThis method enables you to use the flash as a central messaging system in your app.\nWhen you need to pass an object to the next action, you use the standard flash assign (<tt>[]=</tt>).\nWhen you need to pass an object to the current action, you use <tt>now</tt>, and your object will\nvanish when the current action is done.\n\nEntries set via <tt>now</tt> are accessed the same way as standard entries: <tt>flash['my-key']</tt>.\n\nAlso, brings two convenience accessors:\n\n  flash.now.alert = \"Beware now!\"\n  # Equivalent to flash.now[:alert] = \"Beware now!\"\n\n  flash.now.notice = \"Good luck now!\"\n  # Equivalent to flash.now[:notice] = \"Good luck now!\"",
  "keep": "Keeps either the entire current flash or a specific flash entry available for the next action:\n\n   flash.keep            # keeps the entire flash\n   flash.keep(:notice)   # keeps only the \"notice\" entry, the rest of the flash is discarded",
  "discard": "Marks the entire flash or a single flash entry to be discarded by the end of the current action:\n\n    flash.discard              # discard the entire flash at the end of the current action\n    flash.discard(:warning)    # discard only the \"warning\" entry at the end of the current action",
  "sweep": "Mark for removal entries that were kept, and delete unkept ones.\n\nThis method is called automatically by filters, so you generally don't need to care about it.",
  "alert": "Convenience accessor for <tt>flash[:alert]</tt>.",
  "alert=": "Convenience accessor for <tt>flash[:alert]=</tt>.",
  "notice": "Convenience accessor for <tt>flash[:notice]</tt>.",
  "notice=": "Convenience accessor for <tt>flash[:notice]=</tt>.",
  "now_is_loaded?": "",
  "stringify_array": ""
}