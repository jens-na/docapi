{
  "DOMAIN_REGEXP": "This regular expression is used to split the levels of a domain.\nThe top level domain can be any string without a period or\n**.**, ***.** style TLDs like co.uk or com.au\n\nwww.example.co.uk gives:\n$& => example.co.uk\n\nexample.com gives:\n$& => example.com\n\nlots.of.subdomains.example.local gives:\n$& => example.local",
  "options_for_env": ":nodoc:",
  "build": "",
  "initialize": "",
  "committed?": "",
  "commit!": "",
  "each": "",
  "[]": "Returns the value of the cookie by +name+, or +nil+ if no such cookie exists.",
  "fetch": "",
  "key?": "",
  "has_key?": "",
  "update": "",
  "handle_options": ":nodoc:",
  "[]=": "Sets the cookie named +name+. The second argument may be the very cookie\nvalue, or a hash of options as documented above.",
  "delete": "Removes the cookie on the client machine by setting the value to an empty string\nand the expiration date in the past. Like <tt>[]=</tt>, you can pass in\nan options hash to delete cookies with extra data such as a <tt>:path</tt>.",
  "deleted?": "Whether the given cookie is to be deleted by this CookieJar.\nLike <tt>[]=</tt>, you can pass in an options hash to test if a\ndeletion applies to a specific <tt>:path</tt>, <tt>:domain</tt> etc.",
  "clear": "Removes all cookies on the client machine by calling <tt>delete</tt> for each cookie",
  "write": "",
  "recycle!": ":nodoc:",
  "write_cookie?": ""
}