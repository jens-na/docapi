{
  "request": "The request that the response is responding to.",
  "request=": "The request that the response is responding to.",
  "status": "The HTTP status code.",
  "sending_file=": "Sets the attribute sending_file",
  "header": "Get and set headers for this response.",
  "header=": "Get and set headers for this response.",
  "headers=": "Get and set headers for this response.",
  "headers": "Get and set headers for this response.",
  "content_type": "Sets the HTTP response's content MIME type. For example, in the controller\nyou could write this:\n\n response.content_type = \"text/plain\"\n\nIf a character set has been defined for this response (see charset=) then\nthe character set information will also be included in the content type\ninformation.",
  "charset": "The charset of the response. HTML wants to know the encoding of the\ncontent you're giving them, so we need to send that along.",
  "charset=": "The charset of the response. HTML wants to know the encoding of the\ncontent you're giving them, so we need to send that along.",
  "CONTENT_TYPE": "",
  "SET_COOKIE": "",
  "LOCATION": "",
  "NO_CONTENT_CODES": "",
  "Buffer": ":nodoc:",
  "stream": "The underlying body, as a streamable object.",
  "initialize": "",
  "await_commit": "",
  "await_sent": "",
  "commit!": "",
  "sending!": "",
  "sent!": "",
  "sending?": "",
  "committed?": "",
  "sent?": "",
  "status=": "Sets the HTTP status code.",
  "content_type=": "Sets the HTTP content type.",
  "response_code": "The response code of the request.",
  "code": "Returns a string to ensure compatibility with <tt>Net::HTTPResponse</tt>.",
  "message": "Returns the corresponding message for the current HTTP status code:\n\n  response.status = 200\n  response.message # => \"OK\"\n\n  response.status = 404\n  response.message # => \"Not Found\"",
  "status_message": "Returns the corresponding message for the current HTTP status code:\n\n  response.status = 200\n  response.message # => \"OK\"\n\n  response.status = 404\n  response.message # => \"Not Found\"",
  "respond_to?": "",
  "to_path": "",
  "body": "Returns the content of the response as a string. This contains the contents\nof any calls to <tt>render</tt>.",
  "EMPTY": "",
  "body=": "Allows you to manually set or override the response body.",
  "body_parts": "",
  "set_cookie": "",
  "delete_cookie": "",
  "location": "The location header we'll be responding with.",
  "redirect_url": "The location header we'll be responding with.",
  "location=": "Sets the location header we'll be responding with.",
  "close": "",
  "to_a": "Turns the Response into a Rack-compatible array of the status, headers,\nand body.",
  "prepare!": "Turns the Response into a Rack-compatible array of the status, headers,\nand body.",
  "to_ary": "Turns the Response into a Rack-compatible array of the status, headers,\nand body.",
  "cookies": "Returns the response cookies, converted to a Hash of (name => value) pairs\n\n  assert_equal 'AuthorOfNewPage', r.cookies['author']",
  "before_committed": "",
  "before_sending": "",
  "merge_default_headers": "",
  "build_buffer": "",
  "munge_body_object": "",
  "assign_default_content_type_and_charset!": "",
  "append_charset?": "",
  "rack_response": ""
}