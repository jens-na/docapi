{
  "Queue": "Threadsafe, fair, FIFO queue.  Meant to be used by ConnectionPool\nwith which it shares a Monitor.  But could be a generic Queue.\n\nThe Queue in stdlib's 'thread' could replace this class except\nstdlib's doesn't support waiting with a timeout.",
  "Reaper": "Every +frequency+ seconds, the reaper will call +reap+ on +pool+.\nA reaper instantiated with a nil frequency will never reap the\nconnection pool.\n\nConfigure the frequency by setting \"reaping_frequency\" in your\ndatabase yaml file.",
  "automatic_reconnect": "Returns the value of attribute automatic_reconnect",
  "automatic_reconnect=": "Sets the attribute automatic_reconnect",
  "checkout_timeout": "Returns the value of attribute checkout_timeout",
  "checkout_timeout=": "Sets the attribute checkout_timeout",
  "spec": "Returns the value of attribute spec",
  "connections": "Returns the value of attribute connections",
  "size": "Returns the value of attribute size",
  "reaper": "Returns the value of attribute reaper",
  "initialize": "Creates a new ConnectionPool object. +spec+ is a ConnectionSpecification\nobject which describes database connection information (e.g. adapter,\nhost name, username, password, etc), as well as the maximum size for\nthis ConnectionPool.\n\nThe default ConnectionPool maximum size is 5.",
  "connection": "Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary.\n\n#connection can be called any number of times; the connection is\nheld in a hash keyed by the thread id.",
  "active_connection?": "Is there an open connection that is being used for the current thread?",
  "release_connection": "Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread association\nand returns the connection to the pool.",
  "with_connection": "If a connection already exists yield it to the block. If no connection\nexists checkout a connection, yield it to the block, and checkin the\nconnection when finished.",
  "connected?": "Returns true if a connection has already been opened.",
  "disconnect!": "Disconnects all connections in the pool, and clears the pool.",
  "clear_reloadable_connections!": "Clears the cache which maps classes.",
  "checkout": "Check-out a database connection from the pool, indicating that you want\nto use it. You should call #checkin when you no longer need this.\n\nThis is done by either returning and leasing existing connection, or by\ncreating a new connection and leasing it.\n\nIf all connections are leased and the pool is at capacity (meaning the\nnumber of currently leased connections is greater than or equal to the\nsize limit set), an ActiveRecord::ConnectionTimeoutError exception will be raised.\n\nReturns: an AbstractAdapter object.\n\nRaises:\n- ConnectionTimeoutError: no connection can be obtained from the pool.",
  "checkin": "Check-in a database connection back into the pool, indicating that you\nno longer need this connection.\n\n+conn+: an AbstractAdapter object, which was obtained by earlier by\ncalling +checkout+ on this pool.",
  "remove": "Remove a connection from the connection pool.  The connection will\nremain open and active but will no longer be managed by this pool.",
  "reap": "Recover lost connections for the pool.  A lost connection can occur if\na programmer forgets to checkin a connection at the end of a thread\nor a thread dies unexpectedly.",
  "acquire_connection": "Acquire a connection by one of 1) immediately removing one\nfrom the queue of available connections, 2) creating a new\nconnection if the pool is not at capacity, 3) waiting on the\nqueue for a connection to become available.\n\nRaises:\n- ConnectionTimeoutError if a connection could not be acquired",
  "release": "",
  "new_connection": "",
  "current_connection_id": ":nodoc:",
  "checkout_new_connection": "",
  "checkout_and_verify": ""
}