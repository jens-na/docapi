{
  "configurations": ":nodoc:",
  "initialize": "Accepts a hash two layers deep, keys on the first layer represent\nenvironments such as \"production\". Keys must be strings.",
  "resolve": "Returns a hash with database connection information.\n\n== Examples\n\nFull hash Configuration.\n\n  configurations = { \"production\" => { \"host\" => \"localhost\", \"database\" => \"foo\", \"adapter\" => \"sqlite3\" } }\n  Resolver.new(configurations).resolve(:production)\n  # => { \"host\" => \"localhost\", \"database\" => \"foo\", \"adapter\" => \"sqlite3\"}\n\nInitialized with URL configuration strings.\n\n  configurations = { \"production\" => \"postgresql://localhost/foo\" }\n  Resolver.new(configurations).resolve(:production)\n  # => { \"host\" => \"localhost\", \"database\" => \"foo\", \"adapter\" => \"postgresql\" }",
  "resolve_all": "Expands each key in @configurations hash into fully resolved hash",
  "spec": "Returns an instance of ConnectionSpecification for a given adapter.\nAccepts a hash one layer deep that contains all connection information.\n\n== Example\n\n  config = { \"production\" => { \"host\" => \"localhost\", \"database\" => \"foo\", \"adapter\" => \"sqlite3\" } }\n  spec = Resolver.new(config).spec(:production)\n  spec.adapter_method\n  # => \"sqlite3\"\n  spec.config\n  # => { \"host\" => \"localhost\", \"database\" => \"foo\", \"adapter\" => \"sqlite3\" }",
  "resolve_connection": "Returns fully resolved connection, accepts hash, string or symbol.\nAlways returns a hash.\n\n== Examples\n\nSymbol representing current environment.\n\n  Resolver.new(\"production\" => {}).resolve_connection(:production)\n  # => {}\n\nOne layer deep hash of connection values.\n\n  Resolver.new({}).resolve_connection(\"adapter\" => \"sqlite3\")\n  # => { \"adapter\" => \"sqlite3\" }\n\nConnection URL.\n\n  Resolver.new({}).resolve_connection(\"postgresql://localhost/foo\")\n  # => { \"host\" => \"localhost\", \"database\" => \"foo\", \"adapter\" => \"postgresql\" }",
  "resolve_string_connection": "",
  "resolve_symbol_connection": "Takes the environment such as `:production` or `:development`.\nThis requires that the @configurations was initialized with a key that\nmatches.\n\n  Resolver.new(\"production\" => {}).resolve_symbol_connection(:production)\n  # => {}",
  "resolve_hash_connection": "Accepts a hash. Expands the \"url\" key that contains a\nURL database connection to a full connection\nhash and merges with the rest of the hash.\nConnection details inside of the \"url\" key win any merge conflicts",
  "resolve_url_connection": "Takes a connection URL.\n\n  Resolver.new({}).resolve_url_connection(\"postgresql://localhost/foo\")\n  # => { \"host\" => \"localhost\", \"database\" => \"foo\", \"adapter\" => \"postgresql\" }"
}