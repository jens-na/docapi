{
  "SIMPLE_INT": "",
  "visitor": "Returns the value of attribute visitor",
  "visitor=": "Sets the attribute visitor",
  "pool": "Returns the value of attribute pool",
  "pool=": "Sets the attribute pool",
  "schema_cache": "Returns the value of attribute schema_cache",
  "last_use": "Returns the value of attribute last_use",
  "in_use": "Returns the value of attribute in_use",
  "logger": "Returns the value of attribute logger",
  "in_use?": "Returns the value of attribute in_use",
  "type_cast_config_to_integer": "",
  "type_cast_config_to_boolean": "",
  "initialize": ":nodoc:",
  "valid_type?": "",
  "schema_creation": "",
  "lease": "",
  "schema_cache=": "",
  "expire": "",
  "unprepared_visitor": "",
  "unprepared_statement": "",
  "adapter_name": "Returns the human-readable name of the adapter. Use mixed case - one\ncan always use downcase if needed.",
  "supports_migrations?": "Does this adapter support migrations? Backend specific, as the\nabstract adapter always returns +false+.",
  "supports_primary_key?": "Can this adapter determine the primary key for tables not attached\nto an Active Record class, such as join tables? Backend specific, as\nthe abstract adapter always returns +false+.",
  "supports_count_distinct?": "Does this adapter support using DISTINCT within COUNT? This is +true+\nfor all adapters except sqlite.",
  "supports_ddl_transactions?": "Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get rolled back by a transaction? PostgreSQL,\nSQL Server, and others support this. MySQL and others do not.",
  "supports_bulk_alter?": "",
  "supports_savepoints?": "Does this adapter support savepoints? PostgreSQL and MySQL do,\nSQLite < 3.6.8 does not.",
  "prefetch_primary_key?": "Should primary key values be selected from their corresponding\nsequence before the insert statement? If true, next_sequence_value\nis called before each insert to set the record's primary key.\nThis is false for all adapters but Firebird.",
  "supports_index_sort_order?": "Does this adapter support index sort order?",
  "supports_partial_index?": "Does this adapter support partial indices?",
  "supports_explain?": "Does this adapter support explain? As of this writing sqlite3,\nmysql2, and postgresql are the only ones that do.",
  "supports_transaction_isolation?": "Does this adapter support setting the isolation level for a transaction?",
  "supports_extensions?": "Does this adapter support database extensions? As of this writing only\npostgresql does.",
  "disable_extension": "This is meant to be implemented by the adapters that support extensions",
  "enable_extension": "This is meant to be implemented by the adapters that support extensions",
  "extensions": "A list of extensions, to be filled in by adapters that support them. At\nthe moment only postgresql does.",
  "index_algorithms": "A list of index algorithms, to be filled by adapters that support them.\nMySQL and PostgreSQL have support for them right now.",
  "substitute_at": "Returns a bind substitution value given a bind +index+ and +column+\nNOTE: The column param is currently being used by the sqlserver-adapter",
  "disable_referential_integrity": "Override to turn off referential integrity while executing <tt>&block</tt>.",
  "active?": "Checks whether the connection to the database is still active. This includes\nchecking whether the database is actually capable of responding, i.e. whether\nthe connection isn't stale.",
  "active_threadsafe?": "Adapter should redefine this if it needs a threadsafe way to approximate\nif the connection is active",
  "reconnect!": "Disconnects from the database if already connected, and establishes a\nnew connection with the database. Implementors should call super if they\noverride the default implementation.",
  "disconnect!": "Disconnects from the database if already connected. Otherwise, this\nmethod does nothing.",
  "reset!": "Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related server-side state. Usually a\ndatabase-dependent operation.\n\nThe default implementation does nothing; the implementation should be\noverridden by concrete adapters.",
  "clear_cache!": "Clear any caching the database adapter may be doing, for example\nclearing the prepared statement cache. This is database specific.",
  "requires_reloading?": "Returns true if its required to reload the connection between requests for development mode.\nThis is not the case for Ruby/MySQL and it's not necessary for any adapters except SQLite.",
  "verify!": "Checks whether the connection to the database is still active (i.e. not stale).\nThis is done under the hood by calling <tt>active?</tt>. If the connection\nis no longer active, then this method will reconnect to the database.",
  "raw_connection": "Provides access to the underlying database driver for this adapter. For\nexample, this method returns a Mysql object in case of MysqlAdapter,\nand a PGconn object in case of PostgreSQLAdapter.\n\nThis is useful for when you need to call a proprietary method such as\nPostgreSQL's lo_* methods.",
  "open_transactions": "",
  "create_savepoint": "",
  "rollback_to_savepoint": "",
  "release_savepoint": "",
  "case_sensitive_modifier": "",
  "case_insensitive_comparison": "",
  "current_savepoint_name": "",
  "close": "Check the connection back in to the connection pool",
  "translate_exception_class": "",
  "log": "",
  "translate_exception": "",
  "without_prepared_statement?": "",
  "SchemaCreation": ":nodoc:"
}