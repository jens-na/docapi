{
  "QuotingTest": "",
  "ExplainTest": "",
  "InactivePGconn": "",
  "StatementPoolTest": "",
  "OID": "",
  "ColumnDefinition": "",
  "ColumnMethods": "",
  "TableDefinition": "",
  "Table": "",
  "ADAPTER_NAME": "",
  "NATIVE_DATABASE_TYPES": "",
  "adapter_name": "Returns 'PostgreSQL' as adapter name for identification purposes.",
  "prepare_column_options": "Adds `:array` option to the default set provided by the\nAbstractAdapter",
  "migration_keys": "Adds `:array` as a valid migration key",
  "supports_statement_cache?": "Returns +true+, since this connection adapter supports prepared statement\ncaching.",
  "supports_index_sort_order?": "",
  "supports_partial_index?": "",
  "supports_transaction_isolation?": "",
  "index_algorithms": "",
  "StatementPool": "",
  "BindSubstitution": ":nodoc:",
  "initialize": "Initializes and connects a PostgreSQL adapter.",
  "clear_cache!": "Clears the prepared statements cache.",
  "active?": "Is this connection alive and ready for queries?",
  "active_threadsafe?": "",
  "reconnect!": "Close then reopen the connection.",
  "reset!": "",
  "disconnect!": "Disconnects from the database if already connected. Otherwise, this\nmethod does nothing.",
  "native_database_types": ":nodoc:",
  "supports_migrations?": "Returns true, since this connection adapter supports migrations.",
  "supports_primary_key?": "Does PostgreSQL support finding primary key on non-Active Record tables?",
  "set_standard_conforming_strings": "Enable standard-conforming strings if available.",
  "supports_insert_with_returning?": "",
  "supports_ddl_transactions?": "",
  "supports_explain?": "",
  "supports_extensions?": "Returns true if pg > 9.1",
  "supports_ranges?": "Range datatypes weren't introduced until PostgreSQL 9.2",
  "enable_extension": "",
  "disable_extension": "",
  "extension_enabled?": "",
  "extensions": "",
  "table_alias_length": "Returns the configured supported identifier length supported by PostgreSQL",
  "session_auth=": "Set the authorized user for this session",
  "Utils": "",
  "use_insert_returning?": "",
  "valid_type?": "",
  "update_table_definition": ":nodoc:",
  "postgresql_version": "Returns the version of the connected PostgreSQL server.",
  "FOREIGN_KEY_VIOLATION": "See http://www.postgresql.org/docs/9.1/static/errcodes-appendix.html",
  "UNIQUE_VIOLATION": "",
  "translate_exception": "",
  "type_map": "",
  "reload_type_map": "",
  "add_oid": "",
  "initialize_type_map": "",
  "FEATURE_NOT_SUPPORTED": ":nodoc:",
  "exec_no_cache": "",
  "exec_cache": "",
  "sql_key": "Returns the statement identifier for the client side cache\nof statements",
  "prepare_statement": "Prepare the statement if it hasn't been prepared, return\nthe statement key.",
  "MONEY_COLUMN_TYPE_OID": "The internal PostgreSQL identifier of the money data type.",
  "BYTEA_COLUMN_TYPE_OID": "The internal PostgreSQL identifier of the BYTEA data type.",
  "connect": "Connects to a PostgreSQL server and sets up the adapter depending on the\nconnected server's characteristics.",
  "configure_connection": "Configures the encoding, verbosity, schema search path, and time zone of the connection.\nThis is called by #connect and should not be called manually.",
  "last_insert_id": "Returns the current ID of a table's sequence.",
  "last_insert_id_value": "",
  "last_insert_id_result": ":nodoc:",
  "select": "Executes a SELECT query and returns the results, performing any data type\nconversions that are required to be performed here instead of in PostgreSQLColumn.",
  "column_definitions": "Returns the list of a table's column names, data types, and default values.\n\nThe underlying query is roughly:\n SELECT column.name, column.type, default.value\n   FROM column LEFT JOIN default\n     ON column.table_id = default.table_id\n    AND column.num = default.column_num\n  WHERE column.table_id = get_table_id('table_name')\n    AND column.num > 0\n    AND NOT column.is_dropped\n  ORDER BY column.num\n\nIf the table name is not prefixed with a schema, the database will\ntake the first match from the schema search path.\n\nQuery implementation notes:\n - format_type includes the column size constraint, e.g. varchar(50)\n - ::regclass is a function that gives the id for a table name",
  "extract_pg_identifier_from_name": "",
  "extract_table_ref_from_insert_sql": "",
  "create_table_definition": "",
  "Quoting": "",
  "SchemaCreation": "",
  "schema_creation": "",
  "SchemaStatements": "",
  "DatabaseStatements": "",
  "ReferentialIntegrity": ""
}