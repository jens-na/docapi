{
  "handle_dependency": ":nodoc:",
  "insert_record": "",
  "count_records": "Returns the number of records in this collection.\n\nIf the association has a counter cache it gets that value. Otherwise\nit will attempt to do a count via SQL, bounded to <tt>:limit</tt> if\nthere's one. Some configuration options like :group make it impossible\nto do an SQL count, in those cases the array count will be used.\n\nThat does not depend on whether the collection has already been loaded\nor not. The +size+ method is the one that takes the loaded flag into\naccount and delegates to +count_records+ if needed.\n\nIf the collection is empty the target is set to an empty array and\nthe loaded flag is set to true as well.",
  "has_cached_counter?": "",
  "cached_counter_attribute_name": "",
  "update_counter": "",
  "inverse_updates_counter_cache?": "This shit is nasty. We need to avoid the following situation:\n\n  * An associated record is deleted via record.destroy\n  * Hence the callbacks run, and they find a belongs_to on the record with a\n    :counter_cache options which points back at our owner. So they update the\n    counter cache.\n  * In which case, we must make sure to *not* update the counter cache, or else\n    it will be decremented twice.\n\nHence this method.",
  "delete_count": "",
  "delete_or_nullify_all_records": "",
  "delete_records": "Deletes the records according to the <tt>:dependent</tt> option.",
  "foreign_key_present?": ""
}