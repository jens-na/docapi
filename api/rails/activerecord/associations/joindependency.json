{
  "Aliases": ":nodoc:",
  "alias_tracker": "Returns the value of attribute alias_tracker",
  "base_klass": "Returns the value of attribute base_klass",
  "join_root": "Returns the value of attribute join_root",
  "make_tree": "",
  "walk_tree": "",
  "initialize": "base is the base class on which operation is taking place.\nassociations is the list of associations which are joined using hash, symbol or array.\njoins is the list of all string join commands and arel nodes.\n\n Example :\n\n class Physician < ActiveRecord::Base\n   has_many :appointments\n   has_many :patients, through: :appointments\n end\n\n If I execute `@physician.patients.to_a` then\n   base # => Physician\n   associations # => []\n   joins # =>  [#<Arel::Nodes::InnerJoin: ...]\n\n However if I execute `Physician.joins(:appointments).to_a` then\n   base # => Physician\n   associations # => [:appointments]\n   joins # =>  []",
  "reflections": "",
  "join_constraints": "",
  "aliases": "",
  "instantiate": "",
  "make_constraints": "",
  "make_outer_joins": "",
  "make_inner_joins": "",
  "table_aliases_for": "",
  "construct_tables!": "",
  "table_alias_for": "",
  "walk": "",
  "find_reflection": "",
  "build": "",
  "construct": "",
  "construct_model": "",
  "JoinBase": ":nodoc:",
  "JoinPart": "A JoinPart represents a part of a JoinDependency. It is inherited\nby JoinBase and JoinAssociation. A JoinBase represents the Active Record which\neverything else is being joined onto. A JoinAssociation represents an association which\nis joining to the base. A JoinAssociation may result in more than one actual join\noperations (for example a has_and_belongs_to_many JoinAssociation would result in\ntwo; one for the join table and one for the target table).",
  "JoinAssociation": ":nodoc:"
}