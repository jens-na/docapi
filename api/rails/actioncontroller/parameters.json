{
  "NEVER_UNPERMITTED_PARAMS": "Never raise an UnpermittedParameters exception because of these params\nare present. They are added by Rails and it's of no concern.",
  "initialize": "Returns a new instance of <tt>ActionController::Parameters</tt>.\nAlso, sets the +permitted+ attribute to the default value of\n<tt>ActionController::Parameters.permit_all_parameters</tt>.\n\n  class Person < ActiveRecord::Base\n  end\n\n  params = ActionController::Parameters.new(name: 'Francesco')\n  params.permitted?  # => false\n  Person.new(params) # => ActiveModel::ForbiddenAttributesError\n\n  ActionController::Parameters.permit_all_parameters = true\n\n  params = ActionController::Parameters.new(name: 'Francesco')\n  params.permitted?  # => true\n  Person.new(params) # => #<Person id: nil, name: \"Francesco\">",
  "converted_arrays": "Attribute that keeps track of converted arrays, if any, to avoid double\nlooping in the common use case permit + mass-assignment. Defined in a\nmethod to instantiate it only if needed.",
  "permitted?": "Returns +true+ if the parameter is permitted, +false+ otherwise.\n\n  params = ActionController::Parameters.new\n  params.permitted? # => false\n  params.permit!\n  params.permitted? # => true",
  "permit!": "Sets the +permitted+ attribute to +true+. This can be used to pass\nmass assignment. Returns +self+.\n\n  class Person < ActiveRecord::Base\n  end\n\n  params = ActionController::Parameters.new(name: 'Francesco')\n  params.permitted?  # => false\n  Person.new(params) # => ActiveModel::ForbiddenAttributesError\n  params.permit!\n  params.permitted?  # => true\n  Person.new(params) # => #<Person id: nil, name: \"Francesco\">",
  "require": "Ensures that a parameter is present. If it's present, returns\nthe parameter at the given +key+, otherwise raises an\n<tt>ActionController::ParameterMissing</tt> error.\n\n  ActionController::Parameters.new(person: { name: 'Francesco' }).require(:person)\n  # => {\"name\"=>\"Francesco\"}\n\n  ActionController::Parameters.new(person: nil).require(:person)\n  # => ActionController::ParameterMissing: param not found: person\n\n  ActionController::Parameters.new(person: {}).require(:person)\n  # => ActionController::ParameterMissing: param not found: person",
  "required": "Ensures that a parameter is present. If it's present, returns\nthe parameter at the given +key+, otherwise raises an\n<tt>ActionController::ParameterMissing</tt> error.\n\n  ActionController::Parameters.new(person: { name: 'Francesco' }).require(:person)\n  # => {\"name\"=>\"Francesco\"}\n\n  ActionController::Parameters.new(person: nil).require(:person)\n  # => ActionController::ParameterMissing: param not found: person\n\n  ActionController::Parameters.new(person: {}).require(:person)\n  # => ActionController::ParameterMissing: param not found: person\nAlias of #require.",
  "permit": "Returns a new <tt>ActionController::Parameters</tt> instance that\nincludes only the given +filters+ and sets the +permitted+ attribute\nfor the object to +true+. This is useful for limiting which attributes\nshould be allowed for mass updating.\n\n  params = ActionController::Parameters.new(user: { name: 'Francesco', age: 22, role: 'admin' })\n  permitted = params.require(:user).permit(:name, :age)\n  permitted.permitted?      # => true\n  permitted.has_key?(:name) # => true\n  permitted.has_key?(:age)  # => true\n  permitted.has_key?(:role) # => false\n\nOnly permitted scalars pass the filter. For example, given\n\n  params.permit(:name)\n\n+:name+ passes it is a key of +params+ whose associated value is of type\n+String+, +Symbol+, +NilClass+, +Numeric+, +TrueClass+, +FalseClass+,\n+Date+, +Time+, +DateTime+, +StringIO+, +IO+,\n+ActionDispatch::Http::UploadedFile+ or +Rack::Test::UploadedFile+.\nOtherwise, the key +:name+ is filtered out.\n\nYou may declare that the parameter should be an array of permitted scalars\nby mapping it to an empty array:\n\n  params = ActionController::Parameters.new(tags: ['rails', 'parameters'])\n  params.permit(tags: [])\n\nYou can also use +permit+ on nested parameters, like:\n\n  params = ActionController::Parameters.new({\n    person: {\n      name: 'Francesco',\n      age:  22,\n      pets: [{\n        name: 'Purplish',\n        category: 'dogs'\n      }]\n    }\n  })\n\n  permitted = params.permit(person: [ :name, { pets: :name } ])\n  permitted.permitted?                    # => true\n  permitted[:person][:name]               # => \"Francesco\"\n  permitted[:person][:age]                # => nil\n  permitted[:person][:pets][0][:name]     # => \"Purplish\"\n  permitted[:person][:pets][0][:category] # => nil\n\nNote that if you use +permit+ in a key that points to a hash,\nit won't allow all the hash. You also need to specify which\nattributes inside the hash should be whitelisted.\n\n  params = ActionController::Parameters.new({\n    person: {\n      contact: {\n        email: 'none@test.com',\n        phone: '555-1234'\n      }\n    }\n  })\n\n  params.require(:person).permit(:contact)\n  # => {}\n\n  params.require(:person).permit(contact: :phone)\n  # => {\"contact\"=>{\"phone\"=>\"555-1234\"}}\n\n  params.require(:person).permit(contact: [ :email, :phone ])\n  # => {\"contact\"=>{\"email\"=>\"none@test.com\", \"phone\"=>\"555-1234\"}}",
  "[]": "Returns a parameter for the given +key+. If not found,\nreturns +nil+.\n\n  params = ActionController::Parameters.new(person: { name: 'Francesco' })\n  params[:person] # => {\"name\"=>\"Francesco\"}\n  params[:none]   # => nil",
  "fetch": "Returns a parameter for the given +key+. If the +key+\ncan't be found, there are several options: With no other arguments,\nit will raise an <tt>ActionController::ParameterMissing</tt> error;\nif more arguments are given, then that will be returned; if a block\nis given, then that will be run and its result returned.\n\n  params = ActionController::Parameters.new(person: { name: 'Francesco' })\n  params.fetch(:person)               # => {\"name\"=>\"Francesco\"}\n  params.fetch(:none)                 # => ActionController::ParameterMissing: param not found: none\n  params.fetch(:none, 'Francesco')    # => \"Francesco\"\n  params.fetch(:none) { 'Francesco' } # => \"Francesco\"",
  "slice": "Returns a new <tt>ActionController::Parameters</tt> instance that\nincludes only the given +keys+. If the given +keys+\ndon't exist, returns an empty hash.\n\n  params = ActionController::Parameters.new(a: 1, b: 2, c: 3)\n  params.slice(:a, :b) # => {\"a\"=>1, \"b\"=>2}\n  params.slice(:d)     # => {}",
  "dup": "Returns an exact copy of the <tt>ActionController::Parameters</tt>\ninstance. +permitted+ state is kept on the duped object.\n\n  params = ActionController::Parameters.new(a: 1)\n  params.permit!\n  params.permitted?        # => true\n  copy_params = params.dup # => {\"a\"=>1}\n  copy_params.permitted?   # => true",
  "permitted=": "",
  "convert_hashes_to_parameters": "",
  "convert_value_to_parameters": "",
  "each_element": "",
  "fields_for_style?": "",
  "unpermitted_parameters!": "",
  "unpermitted_keys": "",
  "PERMITTED_SCALAR_TYPES": "This is a white list of permitted scalar types that includes the ones\nsupported in XML and JSON requests.\n\nThis list is in particular used to filter ordinary requests, String goes\nas first element to quickly short-circuit the common case.\n\nIf you modify this collection please update the API of +permit+ above.",
  "permitted_scalar?": "",
  "permitted_scalar_filter": "",
  "array_of_permitted_scalars?": "",
  "array_of_permitted_scalars_filter": "",
  "EMPTY_ARRAY": "",
  "hash_filter": ""
}