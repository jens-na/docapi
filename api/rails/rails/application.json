{
  "inherited": "",
  "new": "",
  "assets": "Returns the value of attribute assets",
  "assets=": "Sets the attribute assets",
  "sandbox": "Returns the value of attribute sandbox",
  "sandbox=": "Sets the attribute sandbox",
  "sandbox?": "Returns the value of attribute sandbox",
  "reloaders": "Returns the value of attribute reloaders",
  "INITIAL_VARIABLES": "",
  "initialize": "",
  "initialized?": "Returns true if the application is initialized.",
  "call": "Implements call according to the Rack API. It simply\ndispatches the request to the underlying middleware stack.",
  "reload_routes!": "Reload application routes regardless if they changed or not.",
  "key_generator": "Return the application's KeyGenerator",
  "message_verifier": "Returns a message verifier object.\n\nThis verifier can be used to generate and verify signed messages in the application.\n\nIt is recommended not to use the same verifier for different things, so you can get different\nverifiers passing the +verifier_name+ argument.\n\n==== Parameters\n\n* +verifier_name+ - the name of the message verifier.\n\n==== Examples\n\n    message = Rails.application.message_verifier('sensitive_data').generate('my sensible data')\n    Rails.application.message_verifier('sensitive_data').verify(message)\n    # => 'my sensible data'\n\nSee the +ActiveSupport::MessageVerifier+ documentation for more information.",
  "env_config": "Stores some of the Rails initial environment parameters which\nwill be used by middlewares and engines to configure themselves.",
  "rake_tasks": "If you try to define a set of rake tasks on the instance, these will get\npassed up to the rake tasks defined on the application's class.",
  "initializer": "Sends the initializers to the +initializer+ method defined in the\nRails::Initializable module. Each Rails::Application class has its own\nset of initializers, as defined by the Initializable module.",
  "runner": "Sends any runner called in the instance of a new application up\nto the +runner+ method defined in Rails::Railtie.",
  "isolate_namespace": "Sends the +isolate_namespace+ method up to the class method.",
  "add_lib_to_load_path!": "This method is called just after an application inherits from Rails::Application,\nallowing the developer to load classes in lib and use them during application\nconfiguration.\n\n  class MyApplication < Rails::Application\n    require \"my_backend\" # in lib/my_backend\n    config.i18n.backend = MyBackend\n  end\n\nNotice this method takes into consideration the default root path. So if you\nare changing config.root inside your application definition or having a custom\nRails application, you will need to add lib to $LOAD_PATH on your own in case\nyou need to load files in lib/ during the application configuration as well.",
  "require_environment!": ":nodoc:",
  "routes_reloader": ":nodoc:",
  "watchable_args": "Returns an array of file paths appended with a hash of\ndirectories-extensions suitable for ActiveSupport::FileUpdateChecker\nAPI.",
  "initialize!": "Initialize the application passing the given group. By default, the\ngroup is :default",
  "initializers": ":nodoc:",
  "config": ":nodoc:",
  "config=": ":nodoc:",
  "secrets": ":nodoc:",
  "secrets=": ":nodoc:",
  "to_app": ":nodoc:",
  "helpers_paths": ":nodoc:",
  "build_middleware_stack": "",
  "run_tasks_blocks": ":nodoc:",
  "run_generators_blocks": ":nodoc:",
  "run_runner_blocks": ":nodoc:",
  "run_console_blocks": ":nodoc:",
  "ordered_railties": "Returns the ordered railties for this application considering railties_order.",
  "railties_initializers": ":nodoc:",
  "default_middleware_stack": ":nodoc:",
  "build_original_fullpath": ":nodoc:",
  "validate_secret_key_config!": ":nodoc:",
  "Finisher": "",
  "Bootstrap": "",
  "Configuration": "",
  "RoutesReloader": "",
  "DefaultMiddlewareStack": ""
}