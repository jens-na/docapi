{
  "source_root": "Returns the source root for this generator using default_source_root as default.",
  "desc": "Tries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default description.",
  "namespace": "Convenience method to get the namespace from the class name. It's the\nsame as Thor default except that the Generator at the end of the class\nis removed.",
  "hide!": "Convenience method to hide this generator from the available ones when\nrunning rails generator command.",
  "hook_for": "Invoke a generator based on the value supplied by the user to the\ngiven option named \"name\". A class option is created when this method\nis invoked and you can set a hash to customize it.\n\n==== Examples\n\n  module Rails::Generators\n    class ControllerGenerator < Base\n      hook_for :test_framework, aliases: \"-t\"\n    end\n  end\n\nThe example above will create a test framework option and will invoke\na generator based on the user supplied value.\n\nFor example, if the user invoke the controller generator as:\n\n  rails generate controller Account --test-framework=test_unit\n\nThe controller generator will then try to invoke the following generators:\n\n  \"rails:test_unit\", \"test_unit:controller\", \"test_unit\"\n\nNotice that \"rails:generators:test_unit\" could be loaded as well, what\nRails looks for is the first and last parts of the namespace. This is what\nallows any test framework to hook into Rails as long as it provides any\nof the hooks above.\n\n==== Options\n\nThe first and last part used to find the generator to be invoked are\nguessed based on class invokes hook_for, as noticed in the example above.\nThis can be customized with two options: :in and :as.\n\nLet's suppose you are creating a generator that needs to invoke the\ncontroller generator from test unit. Your first attempt is:\n\n  class AwesomeGenerator < Rails::Generators::Base\n    hook_for :test_framework\n  end\n\nThe lookup in this case for test_unit as input is:\n\n  \"test_unit:awesome\", \"test_unit\"\n\nWhich is not the desired lookup. You can change it by providing the\n:as option:\n\n  class AwesomeGenerator < Rails::Generators::Base\n    hook_for :test_framework, as: :controller\n  end\n\nAnd now it will lookup at:\n\n  \"test_unit:controller\", \"test_unit\"\n\nSimilarly, if you want it to also lookup in the rails namespace, you just\nneed to provide the :in value:\n\n  class AwesomeGenerator < Rails::Generators::Base\n    hook_for :test_framework, in: :rails, as: :controller\n  end\n\nAnd the lookup is exactly the same as previously:\n\n  \"rails:test_unit\", \"test_unit:controller\", \"test_unit\"\n\n==== Switches\n\nAll hooks come with switches for user interface. If you do not want\nto use any test framework, you can do:\n\n  rails generate controller Account --skip-test-framework\n\nOr similarly:\n\n  rails generate controller Account --no-test-framework\n\n==== Boolean hooks\n\nIn some cases, you may want to provide a boolean hook. For example, webrat\ndevelopers might want to have webrat available on controller generator.\nThis can be achieved as:\n\n  Rails::Generators::ControllerGenerator.hook_for :webrat, type: :boolean\n\nThen, if you want webrat to be invoked, just supply:\n\n  rails generate controller Account --webrat\n\nThe hooks lookup is similar as above:\n\n  \"rails:generators:webrat\", \"webrat:generators:controller\", \"webrat\"\n\n==== Custom invocations\n\nYou can also supply a block to hook_for to customize how the hook is\ngoing to be invoked. The block receives two arguments, an instance\nof the current class and the class to be invoked.\n\nFor example, in the resource generator, the controller should be invoked\nwith a pluralized class name. But by default it is invoked with the same\nname as the resource generator, which is singular. To change this, we\ncan give a block to customize how the controller can be invoked.\n\n  hook_for :resource_controller do |instance, controller|\n    instance.invoke controller, [ instance.name.pluralize ]\n  end",
  "remove_hook_for": "Remove a previously added hook.\n\n  remove_hook_for :orm",
  "class_option": "Make class option aware of Rails::Generators.options and Rails::Generators.aliases.",
  "default_source_root": "Returns the default source root for a given generator. This is used internally\nby rails to set its generators source root. If you want to customize your source\nroot, you should use source_root.",
  "base_root": "Returns the base root for a common set of generators. This is used to dynamically\nguess the default source root.",
  "inherited": "Cache source root and add lib/generators/base/generator/templates to\nsource paths.",
  "class_collisions": "Check whether the given class names are already taken by user\napplication or Ruby on Rails.",
  "extract_last_module": "Takes in an array of nested modules and extracts the last module",
  "banner": "Use Rails default banner.",
  "base_name": "Sets the base_name taking into account the current class namespace.",
  "generator_name": "Removes the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will return \"model\" as generator name.",
  "default_value_for_option": "Returns the default value for the option name given doing a lookup in\nRails::Generators.options.",
  "default_aliases_for_option": "Return default aliases for the option name given doing a lookup in\nRails::Generators.aliases.",
  "default_for_option": "Return default for the option name given doing a lookup in config.",
  "hooks": "Keep hooks configuration that are used on prepare_for_invocation.",
  "prepare_for_invocation": "Prepare class invocation to search on Rails namespace if a previous\nadded hook is being used.",
  "add_shebang_option!": "Small macro to add ruby as an option to the generator with proper\ndefault value plus an instance helper method called shebang.",
  "usage_path": "",
  "default_generator_root": ""
}