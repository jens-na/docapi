{
  "test_implements_enumerable": "",
  "test_found_items_are_cached": "",
  "test_reload_expires_cache_of_found_items": "",
  "test_delegates_finds_and_calculations_to_the_base_class": "",
  "test_method_missing_priority_when_delegating": "",
  "test_scope_should_respond_to_own_methods_and_methods_of_the_proxy": "",
  "test_scopes_with_options_limit_finds_to_those_matching_the_criteria_specified": "",
  "test_scopes_with_string_name_can_be_composed": "",
  "test_scopes_are_composable": "",
  "test_procedural_scopes": "",
  "test_procedural_scopes_returning_nil": "",
  "test_scope_with_object": "",
  "test_has_many_associations_have_access_to_scopes": "",
  "test_scope_with_STI": "",
  "test_has_many_through_associations_have_access_to_scopes": "",
  "test_scopes_honor_current_scopes_from_when_defined": "",
  "test_active_records_have_scope_named__all__": "",
  "test_active_records_have_scope_named__scoped__": "",
  "test_first_and_last_should_allow_integers_for_limit": "",
  "test_first_and_last_should_not_use_query_when_results_are_loaded": "",
  "test_empty_should_not_load_results": "",
  "test_any_should_not_load_results": "",
  "test_any_should_call_proxy_found_if_using_a_block": "",
  "test_any_should_not_fire_query_if_scope_loaded": "",
  "test_model_class_should_respond_to_any": "",
  "test_many_should_not_load_results": "",
  "test_many_should_call_proxy_found_if_using_a_block": "",
  "test_many_should_not_fire_query_if_scope_loaded": "",
  "test_many_should_return_false_if_none_or_one": "",
  "test_many_should_return_true_if_more_than_one": "",
  "test_model_class_should_respond_to_many": "",
  "test_should_build_on_top_of_scope": "",
  "test_should_build_new_on_top_of_scope": "",
  "test_should_create_on_top_of_scope": "",
  "test_should_create_with_bang_on_top_of_scope": "",
  "test_should_build_on_top_of_chained_scopes": "",
  "test_reserved_scope_names": "",
  "test_spaces_in_scope_names": "Method delegation for scope names which look like /\\A[a-zA-Z_]\\w*[!?]?\\z/\nhas been done by evaluating a string with a plain def statement. For scope\nnames which contain spaces this approach doesn't work.",
  "test_find_all_should_behave_like_select": "",
  "test_rand_should_select_a_random_object_from_proxy": "",
  "test_should_use_where_in_query_for_scope": "",
  "test_size_should_use_count_when_results_are_not_loaded": "",
  "test_size_should_use_length_when_results_are_loaded": "",
  "test_should_not_duplicates_where_values": "",
  "test_chaining_with_duplicate_joins": "",
  "test_chaining_applies_last_conditions_when_creating": "",
  "test_chaining_combines_conditions_when_searching": "",
  "test_scopes_batch_finders": "",
  "test_table_names_for_chaining_scopes_with_and_without_table_name_included": "",
  "test_scopes_on_relations": "",
  "test_index_on_scope": "",
  "test_nested_scopes_queries_size": "",
  "test_scopes_are_cached_on_associations": "Note: these next two are kinda odd because they are essentially just testing that the\nquery cache works as it should, but they are here for legacy reasons as they was previously\na separate cache on association proxies, and these show that that is not necessary.",
  "test_scopes_with_arguments_are_cached_on_associations": "",
  "test_scopes_to_get_newest": "",
  "test_scopes_are_reset_on_association_reload": "",
  "test_scoped_are_lazy_loaded_if_table_still_does_not_exist": "",
  "test_eager_default_scope_relations_are_remove": "",
  "test_subclass_merges_scopes_properly": ""
}