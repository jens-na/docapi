{
  "closing": "Either +nil+, <tt>:close</tt>, or <tt>:self</tt>",
  "attributes": "Either +nil+, or a hash of attributes for this node.",
  "name": "The name of this tag.",
  "initialize": "Create a new node as a child of the given parent, using the given content\nto describe the node. It will be parsed and the node name, attributes and\nclosing status extracted.",
  "[]": "A convenience for obtaining an attribute of the node. Returns +nil+ if\nthe node has no attributes.",
  "childless?": "Returns non-+nil+ if this tag can contain child nodes.",
  "to_s": "Returns a textual representation of the node",
  "find": "If either the node or any of its children meet the given conditions, the\nmatching node is returned. Otherwise, +nil+ is returned. (See the\ndescription of the valid conditions in the +match+ method.)",
  "tag?": "Returns +true+, indicating that this node represents an HTML tag.",
  "match": "Returns +true+ if the node meets any of the given conditions. The\n+conditions+ parameter must be a hash of any of the following keys\n(all are optional):\n\n* <tt>:tag</tt>: the node name must match the corresponding value\n* <tt>:attributes</tt>: a hash. The node's values must match the\n  corresponding values in the hash.\n* <tt>:parent</tt>: a hash. The node's parent must match the\n  corresponding hash.\n* <tt>:child</tt>: a hash. At least one of the node's immediate children\n  must meet the criteria described by the hash.\n* <tt>:ancestor</tt>: a hash. At least one of the node's ancestors must\n  meet the criteria described by the hash.\n* <tt>:descendant</tt>: a hash. At least one of the node's descendants\n  must meet the criteria described by the hash.\n* <tt>:sibling</tt>: a hash. At least one of the node's siblings must\n  meet the criteria described by the hash.\n* <tt>:after</tt>: a hash. The node must be after any sibling meeting\n  the criteria described by the hash, and at least one sibling must match.\n* <tt>:before</tt>: a hash. The node must be before any sibling meeting\n  the criteria described by the hash, and at least one sibling must match.\n* <tt>:children</tt>: a hash, for counting children of a node. Accepts the\n  keys:\n** <tt>:count</tt>: either a number or a range which must equal (or\n   include) the number of children that match.\n** <tt>:less_than</tt>: the number of matching children must be less than\n   this number.\n** <tt>:greater_than</tt>: the number of matching children must be\n   greater than this number.\n** <tt>:only</tt>: another hash consisting of the keys to use\n   to match on the children, and only matching children will be\n   counted.\n\nConditions are matched using the following algorithm:\n\n* if the condition is a string, it must be a substring of the value.\n* if the condition is a regexp, it must match the value.\n* if the condition is a number, the value must match number.to_s.\n* if the condition is +true+, the value must not be +nil+.\n* if the condition is +false+ or +nil+, the value must be +nil+.\n\nUsage:\n\n  # test if the node is a \"span\" tag\n  node.match tag: \"span\"\n\n  # test if the node's parent is a \"div\"\n  node.match parent: { tag: \"div\" }\n\n  # test if any of the node's ancestors are \"table\" tags\n  node.match ancestor: { tag: \"table\" }\n\n  # test if any of the node's immediate children are \"em\" tags\n  node.match child: { tag: \"em\" }\n\n  # test if any of the node's descendants are \"strong\" tags\n  node.match descendant: { tag: \"strong\" }\n\n  # test if the node has between 2 and 4 span tags as immediate children\n  node.match children: { count: 2..4, only: { tag: \"span\" } }\n\n  # get funky: test to see if the node is a \"div\", has a \"ul\" ancestor\n  # and an \"li\" parent (with \"class\" = \"enum\"), and whether or not it has\n  # a \"span\" descendant that contains # text matching /hello world/:\n  node.match tag: \"div\",\n             ancestor: { tag: \"ul\" },\n             parent: { tag: \"li\",\n                          attributes: { class: \"enum\" } },\n             descendant: { tag: \"span\",\n                              child: /hello world/ }",
  "==": "",
  "match_condition": "Match the given value to the given condition.",
  "select": ""
}