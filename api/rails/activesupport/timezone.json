{
  "MAPPING": "Keys are Rails TimeZone names, values are TZInfo identifiers.",
  "UTC_OFFSET_WITH_COLON": "",
  "UTC_OFFSET_WITHOUT_COLON": "",
  "seconds_to_utc_offset": "Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this into an +HH:MM formatted string.\n\n  TimeZone.seconds_to_utc_offset(-21_600) # => \"-06:00\"",
  "find_tzinfo": "",
  "create": "",
  "new": "Returns a TimeZone instance with the given name, or +nil+ if no\nsuch TimeZone instance exists. (This exists to support the use of\nthis class with the +composed_of+ macro.)",
  "all": "Returns an array of all TimeZone objects. There are multiple\nTimeZone objects per time zone, in many cases, to make it easier\nfor users to find their own time zone.",
  "zones_map": "",
  "[]": "Locate a specific time zone object. If the argument is a string, it\nis interpreted to mean the name of the timezone to locate. If it is a\nnumeric value it is either the hour offset, or the second offset, of the\ntimezone to find. (The first one with that offset will be returned.)\nReturns +nil+ if no such time zone is known to the system.",
  "us_zones": "A convenience method for returning a collection of TimeZone objects\nfor time zones in the USA.",
  "name": "Returns the value of attribute name",
  "tzinfo": "Returns the value of attribute tzinfo",
  "initialize": "Create a new TimeZone object with the given name and offset. The\noffset is the number of seconds that this time zone is offset from UTC\n(GMT). Seconds were chosen as the offset unit because that is the unit\nthat Ruby uses to represent time zone offsets (see Time#utc_offset).",
  "utc_offset": "Returns the offset of this time zone from UTC in seconds.",
  "formatted_offset": "Returns the offset of this time zone as a formatted string, of the\nformat \"+HH:MM\".",
  "<=>": "Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name.",
  "=~": "Compare #name and TZInfo identifier to a supplied regexp, returning +true+\nif a match is found.",
  "to_s": "Returns a textual representation of this time zone.",
  "local": "Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof +self+ from given values.\n\n  Time.zone = 'Hawaii'                    # => \"Hawaii\"\n  Time.zone.local(2007, 2, 1, 15, 30, 45) # => Thu, 01 Feb 2007 15:30:45 HST -10:00",
  "at": "Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof +self+ from number of seconds since the Unix epoch.\n\n  Time.zone = 'Hawaii'        # => \"Hawaii\"\n  Time.utc(2000).to_f         # => 946684800.0\n  Time.zone.at(946684800.0)   # => Fri, 31 Dec 1999 14:00:00 HST -10:00",
  "parse": "Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof +self+ from parsed string.\n\n  Time.zone = 'Hawaii'                   # => \"Hawaii\"\n  Time.zone.parse('1999-12-31 14:00:00') # => Fri, 31 Dec 1999 14:00:00 HST -10:00\n\nIf upper components are missing from the string, they are supplied from\nTimeZone#now:\n\n  Time.zone.now               # => Fri, 31 Dec 1999 14:00:00 HST -10:00\n  Time.zone.parse('22:30:00') # => Fri, 31 Dec 1999 22:30:00 HST -10:00\n\nHowever, if the date component is not provided, but any other upper\ncomponents are supplied, then the day of the month defaults to 1:\n\n  Time.zone.parse('Mar 2000') # => Wed, 01 Mar 2000 00:00:00 HST -10:00",
  "now": "Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented by +self+.\n\n  Time.zone = 'Hawaii'  # => \"Hawaii\"\n  Time.zone.now         # => Wed, 23 Jan 2008 20:24:27 HST -10:00",
  "today": "Return the current date in this time zone.",
  "tomorrow": "Returns the next date in this time zone.",
  "yesterday": "Returns the previous date in this time zone.",
  "utc_to_local": "Adjust the given time to the simultaneous time in the time zone\nrepresented by +self+. Returns a Time.utc() instance -- if you want an\nActiveSupport::TimeWithZone instance, use Time#in_time_zone() instead.",
  "local_to_utc": "Adjust the given time to the simultaneous time in UTC. Returns a\nTime.utc() instance.",
  "period_for_utc": "Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.",
  "period_for_local": "Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.",
  "periods_for_local": ":nodoc:",
  "time_now": ""
}