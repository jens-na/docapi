{
  "name": "Report class name as 'Time' to thwart type checking.",
  "time_zone": "Returns the value of attribute time_zone",
  "initialize": "",
  "time": "Returns a Time or DateTime instance that represents the time in +time_zone+.",
  "utc": "Returns a Time or DateTime instance that represents the time in UTC.",
  "comparable_time": "Returns a Time or DateTime instance that represents the time in UTC.",
  "getgm": "Returns a Time or DateTime instance that represents the time in UTC.",
  "getutc": "Returns a Time or DateTime instance that represents the time in UTC.",
  "gmtime": "Returns a Time or DateTime instance that represents the time in UTC.",
  "period": "Returns the underlying TZInfo::TimezonePeriod.",
  "in_time_zone": "Returns the simultaneous time in <tt>Time.zone</tt>, or the specified zone.",
  "localtime": "Returns a <tt>Time.local()</tt> instance of the simultaneous time in your\nsystem's <tt>ENV['TZ']</tt> zone.",
  "getlocal": "Returns a <tt>Time.local()</tt> instance of the simultaneous time in your\nsystem's <tt>ENV['TZ']</tt> zone.",
  "dst?": "Returns true if the current time is within Daylight Savings Time for the\nspecified time zone.\n\n  Time.zone = 'Eastern Time (US & Canada)'    # => 'Eastern Time (US & Canada)'\n  Time.zone.parse(\"2012-5-30\").dst?           # => true\n  Time.zone.parse(\"2012-11-30\").dst?          # => false",
  "isdst": "Returns true if the current time is within Daylight Savings Time for the\nspecified time zone.\n\n  Time.zone = 'Eastern Time (US & Canada)'    # => 'Eastern Time (US & Canada)'\n  Time.zone.parse(\"2012-5-30\").dst?           # => true\n  Time.zone.parse(\"2012-11-30\").dst?          # => false",
  "utc?": "Returns true if the current time zone is set to UTC.\n\n  Time.zone = 'UTC'                           # => 'UTC'\n  Time.zone.now.utc?                          # => true\n  Time.zone = 'Eastern Time (US & Canada)'    # => 'Eastern Time (US & Canada)'\n  Time.zone.now.utc?                          # => false",
  "gmt?": "Returns true if the current time zone is set to UTC.\n\n  Time.zone = 'UTC'                           # => 'UTC'\n  Time.zone.now.utc?                          # => true\n  Time.zone = 'Eastern Time (US & Canada)'    # => 'Eastern Time (US & Canada)'\n  Time.zone.now.utc?                          # => false",
  "utc_offset": "Returns the offset from current time to UTC time in seconds.",
  "gmt_offset": "Returns the offset from current time to UTC time in seconds.",
  "gmtoff": "Returns the offset from current time to UTC time in seconds.",
  "formatted_offset": "Returns a formatted string of the offset from UTC, or an alternative\nstring if the time zone is already UTC.\n\n  Time.zone = 'Eastern Time (US & Canada)'   # => \"Eastern Time (US & Canada)\"\n  Time.zone.now.formatted_offset(true)       # => \"-05:00\"\n  Time.zone.now.formatted_offset(false)      # => \"-0500\"\n  Time.zone = 'UTC'                          # => \"UTC\"\n  Time.zone.now.formatted_offset(true, \"0\")  # => \"0\"",
  "zone": "Time uses +zone+ to display the time zone abbreviation, so we're\nduck-typing it.",
  "inspect": "",
  "xmlschema": "",
  "iso8601": "",
  "as_json": "Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:%S +offset style by setting\n<tt>ActiveSupport::JSON::Encoding.use_standard_json_time_format</tt>\nto +false+.\n\n  # With ActiveSupport::JSON::Encoding.use_standard_json_time_format = true\n  Time.utc(2005,2,1,15,15,10).in_time_zone(\"Hawaii\").to_json\n  # => \"2005-02-01T05:15:10.000-10:00\"\n\n  # With ActiveSupport::JSON::Encoding.use_standard_json_time_format = false\n  Time.utc(2005,2,1,15,15,10).in_time_zone(\"Hawaii\").to_json\n  # => \"2005/02/01 05:15:10 -1000\"",
  "encode_with": "",
  "httpdate": "Returns a string of the object's date and time in the format used by\nHTTP requests.\n\n  Time.zone.now.httpdate  # => \"Tue, 01 Jan 2013 04:39:43 GMT\"",
  "rfc2822": "Returns a string of the object's date and time in the RFC 2822 standard\nformat.\n\n  Time.zone.now.rfc2822  # => \"Tue, 01 Jan 2013 04:51:39 +0000\"",
  "rfc822": "Returns a string of the object's date and time in the RFC 2822 standard\nformat.\n\n  Time.zone.now.rfc2822  # => \"Tue, 01 Jan 2013 04:51:39 +0000\"",
  "to_s": "<tt>:db</tt> format outputs time in UTC; all others output time in local.\nUses TimeWithZone's +strftime+, so <tt>%Z</tt> and <tt>%z</tt> work correctly.",
  "to_formatted_s": "<tt>:db</tt> format outputs time in UTC; all others output time in local.\nUses TimeWithZone's +strftime+, so <tt>%Z</tt> and <tt>%z</tt> work correctly.",
  "strftime": "Replaces <tt>%Z</tt> and <tt>%z</tt> directives with +zone+ and\n+formatted_offset+, respectively, before passing to Time#strftime, so\nthat zone information is correct",
  "<=>": "Use the time in UTC for comparisons.",
  "between?": "Returns true if the current object's time is within the specified\n+min+ and +max+ time.",
  "past?": "Returns true if the current object's time is in the past.",
  "today?": "Returns true if the current object's time falls within\nthe current day.",
  "future?": "Returns true if the current object's time is in the future.",
  "eql?": "",
  "hash": "",
  "+": "",
  "-": "",
  "since": "",
  "ago": "",
  "advance": "",
  "to_a": "",
  "to_f": "",
  "to_i": "",
  "tv_sec": "",
  "to_r": "",
  "to_time": "Return an instance of Time in the system timezone.",
  "to_datetime": "",
  "acts_like_time?": "So that +self+ <tt>acts_like?(:time)</tt>.",
  "is_a?": "Say we're a Time to thwart type checking.",
  "kind_of?": "Say we're a Time to thwart type checking.",
  "freeze": "",
  "marshal_dump": "",
  "marshal_load": "",
  "respond_to_missing?": "Ensure proxy class responds to all methods that underlying time instance\nresponds to.",
  "method_missing": "Send the missing method to +time+ instance, and wrap result in a new\nTimeWithZone with the existing +time_zone+.",
  "get_period_and_ensure_valid_local_time": "",
  "transfer_time_values_to_utc_constructor": "",
  "duration_of_variable_length?": "",
  "wrap_with_time_zone": ""
}