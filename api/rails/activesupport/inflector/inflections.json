{
  "instance": "",
  "plurals": "Returns the value of attribute plurals",
  "singulars": "Returns the value of attribute singulars",
  "uncountables": "Returns the value of attribute uncountables",
  "humans": "Returns the value of attribute humans",
  "acronyms": "Returns the value of attribute acronyms",
  "acronym_regex": "Returns the value of attribute acronym_regex",
  "initialize": "",
  "initialize_dup": "Private, for the test suite.",
  "acronym": "Specifies a new acronym. An acronym must be specified as it will appear\nin a camelized string. An underscore string that contains the acronym\nwill retain the acronym when passed to +camelize+, +humanize+, or\n+titleize+. A camelized string that contains the acronym will maintain\nthe acronym when titleized or humanized, and will convert the acronym\ninto a non-delimited single lowercase word when passed to +underscore+.\n\n  acronym 'HTML'\n  titleize 'html'     # => 'HTML'\n  camelize 'html'     # => 'HTML'\n  underscore 'MyHTML' # => 'my_html'\n\nThe acronym, however, must occur as a delimited unit and not be part of\nanother word for conversions to recognize it:\n\n  acronym 'HTTP'\n  camelize 'my_http_delimited' # => 'MyHTTPDelimited'\n  camelize 'https'             # => 'Https', not 'HTTPs'\n  underscore 'HTTPS'           # => 'http_s', not 'https'\n\n  acronym 'HTTPS'\n  camelize 'https'   # => 'HTTPS'\n  underscore 'HTTPS' # => 'https'\n\nNote: Acronyms that are passed to +pluralize+ will no longer be\nrecognized, since the acronym will not occur as a delimited unit in the\npluralized result. To work around this, you must specify the pluralized\nform as an acronym as well:\n\n   acronym 'API'\n   camelize(pluralize('api')) # => 'Apis'\n\n   acronym 'APIs'\n   camelize(pluralize('api')) # => 'APIs'\n\n+acronym+ may be used to specify any word that contains an acronym or\notherwise needs to maintain a non-standard capitalization. The only\nrestriction is that the word must begin with a capital letter.\n\n  acronym 'RESTful'\n  underscore 'RESTful'           # => 'restful'\n  underscore 'RESTfulController' # => 'restful_controller'\n  titleize 'RESTfulController'   # => 'RESTful Controller'\n  camelize 'restful'             # => 'RESTful'\n  camelize 'restful_controller'  # => 'RESTfulController'\n\n  acronym 'McDonald'\n  underscore 'McDonald' # => 'mcdonald'\n  camelize 'mcdonald'   # => 'McDonald'",
  "plural": "Specifies a new pluralization rule and its replacement. The rule can\neither be a string or a regular expression. The replacement should\nalways be a string that may include references to the matched data from\nthe rule.",
  "singular": "Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular expression. The replacement should\nalways be a string that may include references to the matched data from\nthe rule.",
  "irregular": "Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This can only be used for strings, not\nregular expressions. You simply pass the irregular in singular and\nplural form.\n\n  irregular 'octopus', 'octopi'\n  irregular 'person', 'people'",
  "uncountable": "Add uncountable words that shouldn't be attempted inflected.\n\n  uncountable 'money'\n  uncountable 'money', 'information'\n  uncountable %w( money information rice )",
  "human": "Specifies a humanized form of a string by a regular expression rule or\nby a string mapping. When using a regular expression based replacement,\nthe normal humanize formatting is called after the replacement. When a\nstring is used, the human form should be specified as desired (example:\n'The name', not 'the_name').\n\n  human /_cnt$/i, '\\1_count'\n  human 'legacy_col_person_name', 'Name'",
  "clear": "Clears the loaded inflections within a given scope (default is\n<tt>:all</tt>). Give the scope as a symbol of the inflection type, the\noptions are: <tt>:plurals</tt>, <tt>:singulars</tt>, <tt>:uncountables</tt>,\n<tt>:humans</tt>.\n\n  clear :all\n  clear :plurals"
}