{
  "DEFAULT_PREFIX": "",
  "POSITION": "",
  "AMPM_TRANSLATION": "",
  "initialize": "",
  "select_datetime": "",
  "select_date": "",
  "select_time": "",
  "select_second": "",
  "select_minute": "",
  "select_hour": "",
  "select_day": "",
  "select_month": "",
  "select_year": "",
  "set_day_if_discarded": "If the day is hidden, the day should be set to the 1st so all month and year choices are\nvalid. Otherwise, February 31st or February 29th, 2011 can be selected, which are invalid.",
  "month_names": "Returns translated month names, but also ensures that a custom month\nname array has a leading nil element.",
  "translated_month_names": "Returns translated month names.\n => [nil, \"January\", \"February\", \"March\",\n          \"April\", \"May\", \"June\", \"July\",\n          \"August\", \"September\", \"October\",\n          \"November\", \"December\"]\n\nIf <tt>:use_short_month</tt> option is set\n => [nil, \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n          \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
  "month_name": "Looks up month names by number (1-based):\n\n  month_name(1) # => \"January\"\n\nIf the <tt>:use_month_numbers</tt> option is passed:\n\n  month_name(1) # => 1\n\nIf the <tt>:use_two_month_numbers</tt> option is passed:\n\n  month_name(1) # => '01'\n\nIf the <tt>:add_month_numbers</tt> option is passed:\n\n  month_name(1) # => \"1 - January\"\n\nIf the <tt>:month_format_string</tt> option is passed:\n\n  month_name(1) # => \"January (01)\"\n\ndepending on the format string.",
  "date_order": "",
  "translated_date_order": "",
  "build_options_and_select": "Build full select tag from date type and options.",
  "build_options": "Build select option html from date value and options.\n build_options(15, start: 1, end: 31)\n => \"<option value=\"1\">1</option>\n     <option value=\"2\">2</option>\n     <option value=\"3\">3</option>...\"\n\nIf <tt>use_two_digit_numbers: true</tt> option is passed\n build_options(15, start: 1, end: 31, use_two_digit_numbers: true)\n => \"<option value=\"1\">01</option>\n     <option value=\"2\">02</option>\n     <option value=\"3\">03</option>...\"\n\nIf <tt>:step</tt> options is passed\n build_options(15, start: 1, end: 31, step: 2)\n => \"<option value=\"1\">1</option>\n     <option value=\"3\">3</option>\n     <option value=\"5\">5</option>...\"",
  "build_select": "Builds select tag from date type and html select options.\n build_select(:month, \"<option value=\"1\">January</option>...\")\n => \"<select id=\"post_written_on_2i\" name=\"post[written_on(2i)]\">\n       <option value=\"1\">January</option>...\n     </select>\"",
  "prompt_option_tag": "Builds a prompt option tag with supplied options or from default options.\n prompt_option_tag(:month, prompt: 'Select month')\n => \"<option value=\"\">Select month</option>\"",
  "build_hidden": "Builds hidden input tag for date part and value.\n build_hidden(:year, 2008)\n => \"<input id=\"post_written_on_1i\" name=\"post[written_on(1i)]\" type=\"hidden\" value=\"2008\" />\"",
  "input_name_from_type": "Returns the name attribute for the input tag.\n => post[written_on(1i)]",
  "input_id_from_type": "Returns the id attribute for the input tag.\n => \"post_written_on_1i\"",
  "build_selects_from_types": "Given an ordering of datetime components, create the selection HTML\nand join them with their appropriate separators.",
  "separator": "Returns the separator for a given datetime component."
}