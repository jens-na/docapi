{
  "date_select": "Wraps ActionView::Helpers::DateHelper#date_select for form builders:\n\n  <%= form_for @person do |f| %>\n    <%= f.date_select :birth_date %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "time_select": "Wraps ActionView::Helpers::DateHelper#time_select for form builders:\n\n  <%= form_for @race do |f| %>\n    <%= f.time_select :average_lap %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "datetime_select": "Wraps ActionView::Helpers::DateHelper#datetime_select for form builders:\n\n  <%= form_for @person do |f| %>\n    <%= f.datetime_select :last_request_at %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "object_name": "Returns the value of attribute object_name",
  "object_name=": "Sets the attribute object_name",
  "object": "Returns the value of attribute object",
  "object=": "Sets the attribute object",
  "options": "Returns the value of attribute options",
  "options=": "Sets the attribute options",
  "multipart": "Returns the value of attribute multipart",
  "index": "Returns the value of attribute index",
  "multipart?": "Returns the value of attribute multipart",
  "multipart=": "",
  "_to_partial_path": "",
  "to_partial_path": "",
  "to_model": "",
  "initialize": "",
  "fields_for": "Creates a scope around a specific model object like form_for, but\ndoesn't create the form tags themselves. This makes fields_for suitable\nfor specifying additional model objects in the same form.\n\nAlthough the usage and purpose of +field_for+ is similar to +form_for+'s,\nits method signature is slightly different. Like +form_for+, it yields\na FormBuilder object associated with a particular model object to a block,\nand within the block allows methods to be called on the builder to\ngenerate fields associated with the model object. Fields may reflect\na model object in two ways - how they are named (hence how submitted\nvalues appear within the +params+ hash in the controller) and what\ndefault values are shown when the form the fields appear in is first\ndisplayed. In order for both of these features to be specified independently,\nboth an object name (represented by either a symbol or string) and the\nobject itself can be passed to the method separately -\n\n  <%= form_for @person do |person_form| %>\n    First name: <%= person_form.text_field :first_name %>\n    Last name : <%= person_form.text_field :last_name %>\n\n    <%= fields_for :permission, @person.permission do |permission_fields| %>\n      Admin?  : <%= permission_fields.check_box :admin %>\n    <% end %>\n\n    <%= person_form.submit %>\n  <% end %>\n\nIn this case, the checkbox field will be represented by an HTML +input+\ntag with the +name+ attribute <tt>permission[admin]</tt>, and the submitted\nvalue will appear in the controller as <tt>params[:permission][:admin]</tt>.\nIf <tt>@person.permission</tt> is an existing record with an attribute\n+admin+, the initial state of the checkbox when first displayed will\nreflect the value of <tt>@person.permission.admin</tt>.\n\nOften this can be simplified by passing just the name of the model\nobject to +fields_for+ -\n\n  <%= fields_for :permission do |permission_fields| %>\n    Admin?: <%= permission_fields.check_box :admin %>\n  <% end %>\n\n...in which case, if <tt>:permission</tt> also happens to be the name of an\ninstance variable <tt>@permission</tt>, the initial state of the input\nfield will reflect the value of that variable's attribute <tt>@permission.admin</tt>.\n\nAlternatively, you can pass just the model object itself (if the first\nargument isn't a string or symbol +fields_for+ will realize that the\nname has been omitted) -\n\n  <%= fields_for @person.permission do |permission_fields| %>\n    Admin?: <%= permission_fields.check_box :admin %>\n  <% end %>\n\nand +fields_for+ will derive the required name of the field from the\n_class_ of the model object, e.g. if <tt>@person.permission</tt>, is\nof class +Permission+, the field will still be named <tt>permission[admin]</tt>.\n\nNote: This also works for the methods in FormOptionHelper and\nDateHelper that are designed to work with an object as base, like\nFormOptionHelper#collection_select and DateHelper#datetime_select.\n\n=== Nested Attributes Examples\n\nWhen the object belonging to the current scope has a nested attribute\nwriter for a certain attribute, fields_for will yield a new scope\nfor that attribute. This allows you to create forms that set or change\nthe attributes of a parent object and its associations in one go.\n\nNested attribute writers are normal setter methods named after an\nassociation. The most common way of defining these writers is either\nwith +accepts_nested_attributes_for+ in a model definition or by\ndefining a method with the proper name. For example: the attribute\nwriter for the association <tt>:address</tt> is called\n<tt>address_attributes=</tt>.\n\nWhether a one-to-one or one-to-many style form builder will be yielded\ndepends on whether the normal reader method returns a _single_ object\nor an _array_ of objects.\n\n==== One-to-one\n\nConsider a Person class which returns a _single_ Address from the\n<tt>address</tt> reader method and responds to the\n<tt>address_attributes=</tt> writer method:\n\n  class Person\n    def address\n      @address\n    end\n\n    def address_attributes=(attributes)\n      # Process the attributes hash\n    end\n  end\n\nThis model can now be used with a nested fields_for, like so:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :address do |address_fields| %>\n      Street  : <%= address_fields.text_field :street %>\n      Zip code: <%= address_fields.text_field :zip_code %>\n    <% end %>\n    ...\n  <% end %>\n\nWhen address is already an association on a Person you can use\n+accepts_nested_attributes_for+ to define the writer method for you:\n\n  class Person < ActiveRecord::Base\n    has_one :address\n    accepts_nested_attributes_for :address\n  end\n\nIf you want to destroy the associated model through the form, you have\nto enable it first using the <tt>:allow_destroy</tt> option for\n+accepts_nested_attributes_for+:\n\n  class Person < ActiveRecord::Base\n    has_one :address\n    accepts_nested_attributes_for :address, allow_destroy: true\n  end\n\nNow, when you use a form element with the <tt>_destroy</tt> parameter,\nwith a value that evaluates to +true+, you will destroy the associated\nmodel (eg. 1, '1', true, or 'true'):\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :address do |address_fields| %>\n      ...\n      Delete: <%= address_fields.check_box :_destroy %>\n    <% end %>\n    ...\n  <% end %>\n\n==== One-to-many\n\nConsider a Person class which returns an _array_ of Project instances\nfrom the <tt>projects</tt> reader method and responds to the\n<tt>projects_attributes=</tt> writer method:\n\n  class Person\n    def projects\n      [@project1, @project2]\n    end\n\n    def projects_attributes=(attributes)\n      # Process the attributes hash\n    end\n  end\n\nNote that the <tt>projects_attributes=</tt> writer method is in fact\nrequired for fields_for to correctly identify <tt>:projects</tt> as a\ncollection, and the correct indices to be set in the form markup.\n\nWhen projects is already an association on Person you can use\n+accepts_nested_attributes_for+ to define the writer method for you:\n\n  class Person < ActiveRecord::Base\n    has_many :projects\n    accepts_nested_attributes_for :projects\n  end\n\nThis model can now be used with a nested fields_for. The block given to\nthe nested fields_for call will be repeated for each instance in the\ncollection:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :projects do |project_fields| %>\n      <% if project_fields.object.active? %>\n        Name: <%= project_fields.text_field :name %>\n      <% end %>\n    <% end %>\n    ...\n  <% end %>\n\nIt's also possible to specify the instance to be used:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <% @person.projects.each do |project| %>\n      <% if project.active? %>\n        <%= person_form.fields_for :projects, project do |project_fields| %>\n          Name: <%= project_fields.text_field :name %>\n        <% end %>\n      <% end %>\n    <% end %>\n    ...\n  <% end %>\n\nOr a collection to be used:\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :projects, @active_projects do |project_fields| %>\n      Name: <%= project_fields.text_field :name %>\n    <% end %>\n    ...\n  <% end %>\n\nIf you want to destroy any of the associated models through the\nform, you have to enable it first using the <tt>:allow_destroy</tt>\noption for +accepts_nested_attributes_for+:\n\n  class Person < ActiveRecord::Base\n    has_many :projects\n    accepts_nested_attributes_for :projects, allow_destroy: true\n  end\n\nThis will allow you to specify which models to destroy in the\nattributes hash by adding a form element for the <tt>_destroy</tt>\nparameter with a value that evaluates to +true+\n(eg. 1, '1', true, or 'true'):\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :projects do |project_fields| %>\n      Delete: <%= project_fields.check_box :_destroy %>\n    <% end %>\n    ...\n  <% end %>\n\nWhen a collection is used you might want to know the index of each\nobject into the array. For this purpose, the <tt>index</tt> method\nis available in the FormBuilder object.\n\n  <%= form_for @person do |person_form| %>\n    ...\n    <%= person_form.fields_for :projects do |project_fields| %>\n      Project #<%= project_fields.index %>\n      ...\n    <% end %>\n    ...\n  <% end %>\n\nNote that fields_for will automatically generate a hidden field\nto store the ID of the record. There are circumstances where this\nhidden field is not needed and you can pass <tt>include_id: false</tt>\nto prevent fields_for from rendering it automatically.",
  "label": "Returns a label tag tailored for labelling an input field for a specified attribute (identified by +method+) on an object\nassigned to the template (identified by +object+). The text of label will default to the attribute name unless a translation\nis found in the current I18n locale (through helpers.label.<modelname>.<attribute>) or you specify it explicitly.\nAdditional options on the label tag can be passed as a hash with +options+. These options will be tagged\nonto the HTML as an HTML element attribute as in the example shown, except for the <tt>:value</tt> option, which is designed to\ntarget labels for radio_button tags (where the value is used in the ID of the input tag).\n\n==== Examples\n  label(:post, :title)\n  # => <label for=\"post_title\">Title</label>\n\nYou can localize your labels based on model and attribute names.\nFor example you can define the following in your locale (e.g. en.yml)\n\n  helpers:\n    label:\n      post:\n        body: \"Write your entire text here\"\n\nWhich then will result in\n\n  label(:post, :body)\n  # => <label for=\"post_body\">Write your entire text here</label>\n\nLocalization can also be based purely on the translation of the attribute-name\n(if you are using ActiveRecord):\n\n  activerecord:\n    attributes:\n      post:\n        cost: \"Total cost\"\n\n  label(:post, :cost)\n  # => <label for=\"post_cost\">Total cost</label>\n\n  label(:post, :title, \"A short title\")\n  # => <label for=\"post_title\">A short title</label>\n\n  label(:post, :title, \"A short title\", class: \"title_label\")\n  # => <label for=\"post_title\" class=\"title_label\">A short title</label>\n\n  label(:post, :privacy, \"Public Post\", value: \"public\")\n  # => <label for=\"post_privacy_public\">Public Post</label>\n\n  label(:post, :terms) do\n    'Accept <a href=\"/terms\">Terms</a>.'.html_safe\n  end",
  "check_box": "Returns a checkbox tag tailored for accessing a specified attribute (identified by +method+) on an object\nassigned to the template (identified by +object+). This object must be an instance object (@object) and not a local object.\nIt's intended that +method+ returns an integer and if that integer is above zero, then the checkbox is checked.\nAdditional options on the input tag can be passed as a hash with +options+. The +checked_value+ defaults to 1\nwhile the default +unchecked_value+ is set to 0 which is convenient for boolean values.\n\n==== Gotcha\n\nThe HTML specification says unchecked check boxes are not successful, and\nthus web browsers do not send them. Unfortunately this introduces a gotcha:\nif an +Invoice+ model has a +paid+ flag, and in the form that edits a paid\ninvoice the user unchecks its check box, no +paid+ parameter is sent. So,\nany mass-assignment idiom like\n\n  @invoice.update(params[:invoice])\n\nwouldn't update the flag.\n\nTo prevent this the helper generates an auxiliary hidden field before\nthe very check box. The hidden field has the same name and its\nattributes mimic an unchecked check box.\n\nThis way, the client either sends only the hidden field (representing\nthe check box is unchecked), or both fields. Since the HTML specification\nsays key/value pairs have to be sent in the same order they appear in the\nform, and parameters extraction gets the last occurrence of any repeated\nkey in the query string, that works for ordinary forms.\n\nUnfortunately that workaround does not work when the check box goes\nwithin an array-like parameter, as in\n\n  <%= fields_for \"project[invoice_attributes][]\", invoice, index: nil do |form| %>\n    <%= form.check_box :paid %>\n    ...\n  <% end %>\n\nbecause parameter name repetition is precisely what Rails seeks to distinguish\nthe elements of the array. For each item with a checked check box you\nget an extra ghost item with only that attribute, assigned to \"0\".\n\nIn that case it is preferable to either use +check_box_tag+ or to use\nhashes instead of arrays.\n\n  # Let's say that @post.validated? is 1:\n  check_box(\"post\", \"validated\")\n  # => <input name=\"post[validated]\" type=\"hidden\" value=\"0\" />\n  #    <input checked=\"checked\" type=\"checkbox\" id=\"post_validated\" name=\"post[validated]\" value=\"1\" />\n\n  # Let's say that @puppy.gooddog is \"no\":\n  check_box(\"puppy\", \"gooddog\", {}, \"yes\", \"no\")\n  # => <input name=\"puppy[gooddog]\" type=\"hidden\" value=\"no\" />\n  #    <input type=\"checkbox\" id=\"puppy_gooddog\" name=\"puppy[gooddog]\" value=\"yes\" />\n\n  check_box(\"eula\", \"accepted\", { class: 'eula_check' }, \"yes\", \"no\")\n  # => <input name=\"eula[accepted]\" type=\"hidden\" value=\"no\" />\n  #    <input type=\"checkbox\" class=\"eula_check\" id=\"eula_accepted\" name=\"eula[accepted]\" value=\"yes\" />",
  "radio_button": "Returns a radio button tag for accessing a specified attribute (identified by +method+) on an object\nassigned to the template (identified by +object+). If the current value of +method+ is +tag_value+ the\nradio button will be checked.\n\nTo force the radio button to be checked pass <tt>checked: true</tt> in the\n+options+ hash. You may pass HTML options there as well.\n\n  # Let's say that @post.category returns \"rails\":\n  radio_button(\"post\", \"category\", \"rails\")\n  radio_button(\"post\", \"category\", \"java\")\n  # => <input type=\"radio\" id=\"post_category_rails\" name=\"post[category]\" value=\"rails\" checked=\"checked\" />\n  #    <input type=\"radio\" id=\"post_category_java\" name=\"post[category]\" value=\"java\" />\n\n  radio_button(\"user\", \"receive_newsletter\", \"yes\")\n  radio_button(\"user\", \"receive_newsletter\", \"no\")\n  # => <input type=\"radio\" id=\"user_receive_newsletter_yes\" name=\"user[receive_newsletter]\" value=\"yes\" />\n  #    <input type=\"radio\" id=\"user_receive_newsletter_no\" name=\"user[receive_newsletter]\" value=\"no\" checked=\"checked\" />",
  "hidden_field": "Returns a hidden input tag tailored for accessing a specified attribute (identified by +method+) on an object\nassigned to the template (identified by +object+). Additional options on the input tag can be passed as a\nhash with +options+. These options will be tagged onto the HTML as an HTML element attribute as in the example\nshown.\n\n==== Examples\n  hidden_field(:signup, :pass_confirm)\n  # => <input type=\"hidden\" id=\"signup_pass_confirm\" name=\"signup[pass_confirm]\" value=\"#{@signup.pass_confirm}\" />\n\n  hidden_field(:post, :tag_list)\n  # => <input type=\"hidden\" id=\"post_tag_list\" name=\"post[tag_list]\" value=\"#{@post.tag_list}\" />\n\n  hidden_field(:user, :token)\n  # => <input type=\"hidden\" id=\"user_token\" name=\"user[token]\" value=\"#{@user.token}\" />",
  "file_field": "Returns a file upload input tag tailored for accessing a specified attribute (identified by +method+) on an object\nassigned to the template (identified by +object+). Additional options on the input tag can be passed as a\nhash with +options+. These options will be tagged onto the HTML as an HTML element attribute as in the example\nshown.\n\nUsing this method inside a +form_for+ block will set the enclosing form's encoding to <tt>multipart/form-data</tt>.\n\n==== Options\n* Creates standard HTML attributes for the tag.\n* <tt>:disabled</tt> - If set to true, the user will not be able to use this input.\n* <tt>:multiple</tt> - If set to true, *in most updated browsers* the user will be allowed to select multiple files.\n* <tt>:accept</tt> - If set to one or multiple mime-types, the user will be suggested a filter when choosing a file. You still need to set up model validations.\n\n==== Examples\n  file_field(:user, :avatar)\n  # => <input type=\"file\" id=\"user_avatar\" name=\"user[avatar]\" />\n\n  file_field(:post, :image, :multiple => true)\n  # => <input type=\"file\" id=\"post_image\" name=\"post[image]\" multiple=\"true\" />\n\n  file_field(:post, :attached, accept: 'text/html')\n  # => <input accept=\"text/html\" type=\"file\" id=\"post_attached\" name=\"post[attached]\" />\n\n  file_field(:post, :image, accept: 'image/png,image/gif,image/jpeg')\n  # => <input type=\"file\" id=\"post_image\" name=\"post[image]\" accept=\"image/png,image/gif,image/jpeg\" />\n\n  file_field(:attachment, :file, class: 'file_input')\n  # => <input type=\"file\" id=\"attachment_file\" name=\"attachment[file]\" class=\"file_input\" />",
  "submit": "Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource or not to create the proper label:\n\n  <%= form_for @post do |f| %>\n    <%= f.submit %>\n  <% end %>\n\nIn the example above, if @post is a new record, it will use \"Create Post\" as\nsubmit button label, otherwise, it uses \"Update Post\".\n\nThose labels can be customized using I18n, under the helpers.submit key and accept\nthe %{model} as translation interpolation:\n\n  en:\n    helpers:\n      submit:\n        create: \"Create a %{model}\"\n        update: \"Confirm changes to %{model}\"\n\nIt also searches for a key specific for the given object:\n\n  en:\n    helpers:\n      submit:\n        post:\n          create: \"Add %{model}\"",
  "button": "Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource or not to create the proper label:\n\n  <%= form_for @post do |f| %>\n    <%= f.button %>\n  <% end %>\n\nIn the example above, if @post is a new record, it will use \"Create Post\" as\nbutton label, otherwise, it uses \"Update Post\".\n\nThose labels can be customized using I18n, under the helpers.submit key\n(the same as submit helper) and accept the %{model} as translation interpolation:\n\n  en:\n    helpers:\n      submit:\n        create: \"Create a %{model}\"\n        update: \"Confirm changes to %{model}\"\n\nIt also searches for a key specific for the given object:\n\n  en:\n    helpers:\n      submit:\n        post:\n          create: \"Add %{model}\"\n\n==== Examples\n  button(\"Create a post\")\n  # => <button name='button' type='submit'>Create post</button>\n\n  button do\n    content_tag(:strong, 'Ask me!')\n  end\n  # => <button name='button' type='submit'>\n  #      <strong>Ask me!</strong>\n  #    </button>",
  "emitted_hidden_id?": "",
  "objectify_options": "",
  "submit_default_value": "",
  "nested_attributes_association?": "",
  "fields_for_with_nested_attributes": "",
  "fields_for_nested_model": "",
  "nested_child_index": "",
  "select": "Wraps ActionView::Helpers::FormOptionsHelper#select for form builders:\n\n  <%= form_for @post do |f| %>\n    <%= f.select :person_id, Person.all.collect { |p| [ p.name, p.id ] }, include_blank: true %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "collection_select": "Wraps ActionView::Helpers::FormOptionsHelper#collection_select for form builders:\n\n  <%= form_for @post do |f| %>\n    <%= f.collection_select :person_id, Author.all, :id, :name_with_initial, prompt: true %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "grouped_collection_select": "Wraps ActionView::Helpers::FormOptionsHelper#grouped_collection_select for form builders:\n\n  <%= form_for @city do |f| %>\n    <%= f.grouped_collection_select :country_id, @continents, :countries, :name, :id, :name %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "time_zone_select": "Wraps ActionView::Helpers::FormOptionsHelper#time_zone_select for form builders:\n\n  <%= form_for @user do |f| %>\n    <%= f.time_zone_select :time_zone, nil, include_blank: true %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "collection_check_boxes": "Wraps ActionView::Helpers::FormOptionsHelper#collection_check_boxes for form builders:\n\n  <%= form_for @post do |f| %>\n    <%= f.collection_check_boxes :author_ids, Author.all, :id, :name_with_initial %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details.",
  "collection_radio_buttons": "Wraps ActionView::Helpers::FormOptionsHelper#collection_radio_buttons for form builders:\n\n  <%= form_for @post do |f| %>\n    <%= f.collection_radio_buttons :author_id, Author.all, :id, :name_with_initial %>\n    <%= f.submit %>\n  <% end %>\n\nPlease refer to the documentation of the base helper for details."
}