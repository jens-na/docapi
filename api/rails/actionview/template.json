{
  "locals": "Returns the value of attribute locals",
  "locals=": "Sets the attribute locals",
  "formats": "Returns the value of attribute formats",
  "formats=": "Sets the attribute formats",
  "variants": "Returns the value of attribute variants",
  "variants=": "Sets the attribute variants",
  "virtual_path": "Returns the value of attribute virtual_path",
  "virtual_path=": "Sets the attribute virtual_path",
  "source": "Returns the value of attribute source",
  "identifier": "Returns the value of attribute identifier",
  "handler": "Returns the value of attribute handler",
  "original_encoding": "Returns the value of attribute original_encoding",
  "updated_at": "Returns the value of attribute updated_at",
  "Finalizer": "This finalizer is needed (and exactly with a proc inside another proc)\notherwise templates leak in development.",
  "initialize": "",
  "supports_streaming?": "Returns if the underlying handler supports streaming. If so,\na streaming buffer *may* be passed when it start rendering.",
  "render": "Render a template. If the template was not compiled yet, it is done\nexactly before rendering.\n\nThis method is instrumented as \"!render_template.action_view\". Notice that\nwe use a bang in this instrumentation because you don't want to\nconsume this in production. This is only slow if it's being listened to.",
  "type": "",
  "refresh": "Receives a view object and return a template similar to self by using @virtual_path.\n\nThis method is useful if you have a template object but it does not contain its source\nanymore since it was already compiled. In such cases, all you need to do is to call\nrefresh passing in the view object.\n\nNotice this method raises an error if the template to be refreshed does not have a\nvirtual path set (true just for inline templates).",
  "inspect": "",
  "encode!": "This method is responsible for properly setting the encoding of the\nsource. Until this point, we assume that the source is BINARY data.\nIf no additional information is supplied, we assume the encoding is\nthe same as <tt>Encoding.default_external</tt>.\n\nThe user can also specify the encoding via a comment on the first\nline of the template (# encoding: NAME-OF-ENCODING). This will work\nwith any template engine, as we process out the encoding comment\nbefore passing the source on to the template engine, leaving a\nblank line in its stead.",
  "compile!": "Compile a template. This method ensures a template is compiled\njust once and removes the source after it is compiled.",
  "compile": "Among other things, this method is responsible for properly setting\nthe encoding of the compiled template.\n\nIf the template engine handles encodings, we send the encoded\nString to the engine without further processing. This allows\nthe template engine to support additional mechanisms for\nspecifying the encoding. For instance, ERB supports <%# encoding: %>\n\nOtherwise, after we figure out the correct encoding, we then\nencode the source into <tt>Encoding.default_internal</tt>.\nIn general, this means that templates will be UTF-8 inside of Rails,\nregardless of the original source encoding.",
  "handle_render_error": ":nodoc:",
  "locals_code": ":nodoc:",
  "method_name": ":nodoc:",
  "identifier_method_name": ":nodoc:",
  "instrument": "",
  "HTML": ":nodoc:",
  "Text": ":nodoc:",
  "Error": "The Template::Error exception is raised when the compilation or rendering of the template\nfails. This exception then gathers a bunch of intimate details and uses it to report a\nprecise exception message.",
  "Types": "",
  "Handlers": ":nodoc:"
}