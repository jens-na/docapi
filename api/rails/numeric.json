{
  "as_json": ":nodoc:",
  "seconds": "Enables the use of time calculations and declarations, like 45.minutes + 2.hours + 4.years.\n\nThese methods use Time#advance for precise date calculations when using from_now, ago, etc.\nas well as adding or subtracting their results from a Time object. For example:\n\n  # equivalent to Time.current.advance(months: 1)\n  1.month.from_now\n\n  # equivalent to Time.current.advance(years: 2)\n  2.years.from_now\n\n  # equivalent to Time.current.advance(months: 4, years: 5)\n  (4.months + 5.years).from_now\n\nWhile these methods provide precise calculation when used as in the examples above, care\nshould be taken to note that this is not true if the result of `months', `years', etc is\nconverted before use:\n\n  # equivalent to 30.days.to_i.from_now\n  1.month.to_i.from_now\n\n  # equivalent to 365.25.days.to_f.from_now\n  1.year.to_f.from_now\n\nIn such cases, Ruby's core\nDate[http://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html] and\nTime[http://ruby-doc.org/stdlib/libdoc/time/rdoc/Time.html] should be used for precision\ndate and time arithmetic.",
  "second": "Enables the use of time calculations and declarations, like 45.minutes + 2.hours + 4.years.\n\nThese methods use Time#advance for precise date calculations when using from_now, ago, etc.\nas well as adding or subtracting their results from a Time object. For example:\n\n  # equivalent to Time.current.advance(months: 1)\n  1.month.from_now\n\n  # equivalent to Time.current.advance(years: 2)\n  2.years.from_now\n\n  # equivalent to Time.current.advance(months: 4, years: 5)\n  (4.months + 5.years).from_now\n\nWhile these methods provide precise calculation when used as in the examples above, care\nshould be taken to note that this is not true if the result of `months', `years', etc is\nconverted before use:\n\n  # equivalent to 30.days.to_i.from_now\n  1.month.to_i.from_now\n\n  # equivalent to 365.25.days.to_f.from_now\n  1.year.to_f.from_now\n\nIn such cases, Ruby's core\nDate[http://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html] and\nTime[http://ruby-doc.org/stdlib/libdoc/time/rdoc/Time.html] should be used for precision\ndate and time arithmetic.",
  "minutes": "",
  "minute": "",
  "hours": "",
  "hour": "",
  "days": "",
  "day": "",
  "weeks": "",
  "week": "",
  "fortnights": "",
  "fortnight": "",
  "ago": "Reads best without arguments:  10.minutes.ago",
  "until": "Reads best without arguments:  10.minutes.ago\nReads best with argument:  10.minutes.until(time)",
  "since": "Reads best with argument:  10.minutes.since(time)",
  "from_now": "Reads best with argument:  10.minutes.since(time)\nReads best without arguments:  10.minutes.from_now",
  "in_milliseconds": "Used with the standard time durations, like 1.hour.in_milliseconds -- \nso we can feed them to JavaScript functions like getTime().",
  "blank?": "No number is blank:\n\n  1.blank? # => false\n  0.blank? # => false",
  "KILOBYTE": "",
  "MEGABYTE": "",
  "GIGABYTE": "",
  "TERABYTE": "",
  "PETABYTE": "",
  "EXABYTE": "",
  "bytes": "Enables the use of byte calculations and declarations, like 45.bytes + 2.6.megabytes",
  "byte": "Enables the use of byte calculations and declarations, like 45.bytes + 2.6.megabytes",
  "kilobytes": "",
  "kilobyte": "",
  "megabytes": "",
  "megabyte": "",
  "gigabytes": "",
  "gigabyte": "",
  "terabytes": "",
  "terabyte": "",
  "petabytes": "",
  "petabyte": "",
  "exabytes": "",
  "exabyte": "",
  "duplicable?": "Numbers are not duplicable:\n\n 3.duplicable? # => false\n 3.dup         # => TypeError: can't dup Fixnum",
  "to_formatted_s": "Provides options for converting numbers into formatted strings.\nOptions are provided for phone numbers, currency, percentage,\nprecision, positional notation, file size and pretty printing.\n\n==== Options\n\nFor details on which formats use which options, see ActiveSupport::NumberHelper\n\n==== Examples\n\n Phone Numbers:\n 5551234.to_s(:phone)                                     # => 555-1234\n 1235551234.to_s(:phone)                                  # => 123-555-1234\n 1235551234.to_s(:phone, area_code: true)                 # => (123) 555-1234\n 1235551234.to_s(:phone, delimiter: ' ')                  # => 123 555 1234\n 1235551234.to_s(:phone, area_code: true, extension: 555) # => (123) 555-1234 x 555\n 1235551234.to_s(:phone, country_code: 1)                 # => +1-123-555-1234\n 1235551234.to_s(:phone, country_code: 1, extension: 1343, delimiter: '.')\n # => +1.123.555.1234 x 1343\n\n Currency:\n 1234567890.50.to_s(:currency)                 # => $1,234,567,890.50\n 1234567890.506.to_s(:currency)                # => $1,234,567,890.51\n 1234567890.506.to_s(:currency, precision: 3)  # => $1,234,567,890.506\n 1234567890.506.to_s(:currency, locale: :fr)   # => 1 234 567 890,51 â‚¬\n -1234567890.50.to_s(:currency, negative_format: '(%u%n)')\n # => ($1,234,567,890.50)\n 1234567890.50.to_s(:currency, unit: '&pound;', separator: ',', delimiter: '')\n # => &pound;1234567890,50\n 1234567890.50.to_s(:currency, unit: '&pound;', separator: ',', delimiter: '', format: '%n %u')\n # => 1234567890,50 &pound;\n\n Percentage:\n 100.to_s(:percentage)                                  # => 100.000%\n 100.to_s(:percentage, precision: 0)                    # => 100%\n 1000.to_s(:percentage, delimiter: '.', separator: ',') # => 1.000,000%\n 302.24398923423.to_s(:percentage, precision: 5)        # => 302.24399%\n 1000.to_s(:percentage, locale: :fr)                    # => 1 000,000%\n 100.to_s(:percentage, format: '%n  %')                 # => 100  %\n\n Delimited:\n 12345678.to_s(:delimited)                     # => 12,345,678\n 12345678.05.to_s(:delimited)                  # => 12,345,678.05\n 12345678.to_s(:delimited, delimiter: '.')     # => 12.345.678\n 12345678.to_s(:delimited, delimiter: ',')     # => 12,345,678\n 12345678.05.to_s(:delimited, separator: ' ')  # => 12,345,678 05\n 12345678.05.to_s(:delimited, locale: :fr)     # => 12 345 678,05\n 98765432.98.to_s(:delimited, delimiter: ' ', separator: ',')\n # => 98 765 432,98\n\n Rounded:\n 111.2345.to_s(:rounded)                                      # => 111.235\n 111.2345.to_s(:rounded, precision: 2)                        # => 111.23\n 13.to_s(:rounded, precision: 5)                              # => 13.00000\n 389.32314.to_s(:rounded, precision: 0)                       # => 389\n 111.2345.to_s(:rounded, significant: true)                   # => 111\n 111.2345.to_s(:rounded, precision: 1, significant: true)     # => 100\n 13.to_s(:rounded, precision: 5, significant: true)           # => 13.000\n 111.234.to_s(:rounded, locale: :fr)                          # => 111,234\n 13.to_s(:rounded, precision: 5, significant: true, strip_insignificant_zeros: true)\n # => 13\n 389.32314.to_s(:rounded, precision: 4, significant: true)    # => 389.3\n 1111.2345.to_s(:rounded, precision: 2, separator: ',', delimiter: '.')\n # => 1.111,23\n\n Human-friendly size in Bytes:\n 123.to_s(:human_size)                                   # => 123 Bytes\n 1234.to_s(:human_size)                                  # => 1.21 KB\n 12345.to_s(:human_size)                                 # => 12.1 KB\n 1234567.to_s(:human_size)                               # => 1.18 MB\n 1234567890.to_s(:human_size)                            # => 1.15 GB\n 1234567890123.to_s(:human_size)                         # => 1.12 TB\n 1234567.to_s(:human_size, precision: 2)                 # => 1.2 MB\n 483989.to_s(:human_size, precision: 2)                  # => 470 KB\n 1234567.to_s(:human_size, precision: 2, separator: ',') # => 1,2 MB\n 1234567890123.to_s(:human_size, precision: 5)           # => \"1.1229 TB\"\n 524288000.to_s(:human_size, precision: 5)               # => \"500 MB\"\n\n Human-friendly format:\n 123.to_s(:human)                                       # => \"123\"\n 1234.to_s(:human)                                      # => \"1.23 Thousand\"\n 12345.to_s(:human)                                     # => \"12.3 Thousand\"\n 1234567.to_s(:human)                                   # => \"1.23 Million\"\n 1234567890.to_s(:human)                                # => \"1.23 Billion\"\n 1234567890123.to_s(:human)                             # => \"1.23 Trillion\"\n 1234567890123456.to_s(:human)                          # => \"1.23 Quadrillion\"\n 1234567890123456789.to_s(:human)                       # => \"1230 Quadrillion\"\n 489939.to_s(:human, precision: 2)                      # => \"490 Thousand\"\n 489939.to_s(:human, precision: 4)                      # => \"489.9 Thousand\"\n 1234567.to_s(:human, precision: 4,\n                  significant: false)                   # => \"1.2346 Million\"\n 1234567.to_s(:human, precision: 1,\n                  separator: ',',\n                  significant: false)                   # => \"1,2 Million\"",
  "html_safe?": ""
}