{
  "as_json": ":nodoc:",
  "acts_like_date?": "Duck-types as a Date-like class. See Object#acts_like?.",
  "DATE_FORMATS": "",
  "to_formatted_s": "Convert to a formatted string. See DATE_FORMATS for predefined formats.\n\nThis method is aliased to <tt>to_s</tt>.\n\n  date = Date.new(2007, 11, 10)       # => Sat, 10 Nov 2007\n\n  date.to_formatted_s(:db)            # => \"2007-11-10\"\n  date.to_s(:db)                      # => \"2007-11-10\"\n\n  date.to_formatted_s(:short)         # => \"10 Nov\"\n  date.to_formatted_s(:long)          # => \"November 10, 2007\"\n  date.to_formatted_s(:long_ordinal)  # => \"November 10th, 2007\"\n  date.to_formatted_s(:rfc822)        # => \"10 Nov 2007\"\n  date.to_formatted_s(:iso8601)       # => \"2007-11-10\"\n\n== Adding your own date formats to to_formatted_s\nYou can add your own formats to the Date::DATE_FORMATS hash.\nUse the format name as the hash key and either a strftime string\nor Proc instance that takes a date argument as the value.\n\n  # config/initializers/date_formats.rb\n  Date::DATE_FORMATS[:month_and_year] = '%B %Y'\n  Date::DATE_FORMATS[:short_ordinal] = ->(date) { date.strftime(\"%B #{date.day.ordinalize}\") }",
  "to_default_s": "",
  "to_s": "Convert to a formatted string. See DATE_FORMATS for predefined formats.\n\nThis method is aliased to <tt>to_s</tt>.\n\n  date = Date.new(2007, 11, 10)       # => Sat, 10 Nov 2007\n\n  date.to_formatted_s(:db)            # => \"2007-11-10\"\n  date.to_s(:db)                      # => \"2007-11-10\"\n\n  date.to_formatted_s(:short)         # => \"10 Nov\"\n  date.to_formatted_s(:long)          # => \"November 10, 2007\"\n  date.to_formatted_s(:long_ordinal)  # => \"November 10th, 2007\"\n  date.to_formatted_s(:rfc822)        # => \"10 Nov 2007\"\n  date.to_formatted_s(:iso8601)       # => \"2007-11-10\"\n\n== Adding your own date formats to to_formatted_s\nYou can add your own formats to the Date::DATE_FORMATS hash.\nUse the format name as the hash key and either a strftime string\nor Proc instance that takes a date argument as the value.\n\n  # config/initializers/date_formats.rb\n  Date::DATE_FORMATS[:month_and_year] = '%B %Y'\n  Date::DATE_FORMATS[:short_ordinal] = ->(date) { date.strftime(\"%B #{date.day.ordinalize}\") }",
  "readable_inspect": "Overrides the default inspect method with a human readable one, e.g., \"Mon, 21 Feb 2005\"",
  "default_inspect": "",
  "inspect": "Overrides the default inspect method with a human readable one, e.g., \"Mon, 21 Feb 2005\"",
  "to_time": "Converts a Date instance to a Time, where the time is set to the beginning of the day.\nThe timezone can be either :local or :utc (default :local).\n\n  date = Date.new(2007, 11, 10)  # => Sat, 10 Nov 2007\n\n  date.to_time                   # => Sat Nov 10 00:00:00 0800 2007\n  date.to_time(:local)           # => Sat Nov 10 00:00:00 0800 2007\n\n  date.to_time(:utc)             # => Sat Nov 10 00:00:00 UTC 2007",
  "xmlschema": "",
  "beginning_of_week_default": "Returns the value of attribute beginning_of_week_default",
  "beginning_of_week_default=": "Sets the attribute beginning_of_week_default",
  "beginning_of_week": "Returns the week start (e.g. :monday) for the current request, if this has been set (via Date.beginning_of_week=).\nIf <tt>Date.beginning_of_week</tt> has not been set for the current request, returns the week start specified in <tt>config.beginning_of_week</tt>.\nIf no config.beginning_of_week was specified, returns :monday.",
  "beginning_of_week=": "Sets <tt>Date.beginning_of_week</tt> to a week start (e.g. :monday) for current request/thread.\n\nThis method accepts any of the following day symbols:\n:monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday",
  "find_beginning_of_week!": "Returns week start day symbol (e.g. :monday), or raises an ArgumentError for invalid day symbol.",
  "yesterday": "Returns a new Date representing the date 1 day ago (i.e. yesterday's date).",
  "tomorrow": "Returns a new Date representing the date 1 day after today (i.e. tomorrow's date).",
  "current": "Returns Time.zone.today when <tt>Time.zone</tt> or <tt>config.time_zone</tt> are set, otherwise just returns Date.today.",
  "ago": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)\nand then subtracts the specified number of seconds.",
  "since": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)\nand then adds the specified number of seconds",
  "in": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)\nand then adds the specified number of seconds",
  "beginning_of_day": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)",
  "midnight": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)",
  "at_midnight": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)",
  "at_beginning_of_day": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)",
  "middle_of_day": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)",
  "midday": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)",
  "noon": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)",
  "at_midday": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)",
  "at_noon": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)",
  "at_middle_of_day": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)",
  "end_of_day": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the end of the day (23:59:59)",
  "at_end_of_day": "Converts Date to a Time (or DateTime if necessary) with the time portion set to the end of the day (23:59:59)",
  "plus_with_duration": ":nodoc:",
  "plus_without_duration": "",
  "+": ":nodoc:",
  "minus_with_duration": ":nodoc:",
  "minus_without_duration": "",
  "-": ":nodoc:",
  "advance": "Provides precise Date calculations for years, months, and days. The +options+ parameter takes a hash with\nany of these keys: <tt>:years</tt>, <tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>.",
  "change": "Returns a new Date where one or more of the elements have been changed according to the +options+ parameter.\nThe +options+ parameter is a hash with a combination of these keys: <tt>:year</tt>, <tt>:month</tt>, <tt>:day</tt>.\n\n  Date.new(2007, 5, 12).change(day: 1)               # => Date.new(2007, 5, 1)\n  Date.new(2007, 5, 12).change(year: 2005, month: 1) # => Date.new(2005, 1, 12)",
  "compare_with_coercion": "Allow Date to be compared with Time by converting to DateTime and relying on the <=> from there.",
  "compare_without_coercion": "",
  "<=>": "Allow Date to be compared with Time by converting to DateTime and relying on the <=> from there."
}