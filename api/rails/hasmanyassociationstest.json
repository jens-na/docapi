{
  "setup": "",
  "test_anonymous_has_many": "",
  "test_create_from_association_should_respect_default_scope": "",
  "test_build_from_association_should_respect_scope": "",
  "test_create_from_association_with_nil_values_should_work": "",
  "test_do_not_call_callbacks_for_delete_all": "",
  "test_building_the_associated_object_with_implicit_sti_base_class": "",
  "test_building_the_associated_object_with_explicit_sti_base_class": "",
  "test_building_the_associated_object_with_sti_subclass": "",
  "test_building_the_associated_object_with_an_invalid_type": "",
  "test_building_the_associated_object_with_an_unrelated_type": "",
  "test_association_keys_bypass_attribute_protection": "",
  "test_association_protect_foreign_key": "",
  "test_build_and_create_should_not_happen_within_scope": "When creating objects on the association, we must not do it within a scope (even though it\nwould be convenient), because this would cause that scope to be applied to any callbacks etc.",
  "test_no_sql_should_be_fired_if_association_already_loaded": "",
  "test_create_resets_cached_counters": "",
  "force_signal37_to_load_all_clients_of_firm": "",
  "test_counting_with_counter_sql": "sometimes tests on Oracle fail if ORDER BY is not provided therefore add always :order with :first",
  "test_counting": "",
  "test_counting_with_single_hash": "",
  "test_counting_with_column_name_and_hash": "",
  "test_counting_with_association_limit": "",
  "test_finding": "",
  "test_finding_array_compatibility": "",
  "test_find_many_with_merged_options": "",
  "test_find_should_append_to_association_order": "",
  "test_dynamic_find_should_respect_association_order": "",
  "test_cant_save_has_many_readonly_association": "",
  "test_finding_default_orders": "",
  "test_finding_with_different_class_name_and_order": "",
  "test_finding_with_foreign_key": "",
  "test_finding_with_condition": "",
  "test_finding_with_condition_hash": "",
  "test_finding_using_primary_key": "",
  "test_belongs_to_sanity": "",
  "test_find_ids": "",
  "test_find_ids_and_inverse_of": "",
  "test_find_all": "",
  "test_find_each": "",
  "test_find_each_with_conditions": "",
  "test_find_in_batches": "",
  "test_find_all_sanitized": "",
  "test_find_first": "",
  "test_find_first_sanitized": "",
  "test_find_all_with_include_and_conditions": "",
  "test_find_in_collection": "",
  "test_find_grouped": "",
  "test_find_scoped_grouped": "",
  "test_find_scoped_grouped_having": "",
  "test_default_select": "",
  "test_select_query_method": "",
  "test_select_with_block": "",
  "test_select_without_foreign_key": "",
  "test_adding": "",
  "test_adding_using_create": "",
  "test_create_with_bang_on_has_many_when_parent_is_new_raises": "",
  "test_regular_create_on_has_many_when_parent_is_new_raises": "",
  "test_create_with_bang_on_has_many_raises_when_record_not_saved": "",
  "test_create_with_bang_on_habtm_when_parent_is_new_raises": "",
  "test_adding_a_mismatch_class": "",
  "test_adding_a_collection": "",
  "test_transactions_when_adding_to_persisted": "",
  "test_transactions_when_adding_to_new_record": "",
  "test_inverse_on_before_validate": "",
  "test_new_aliased_to_build": "",
  "test_build": "",
  "test_collection_size_after_building": "",
  "test_collection_not_empty_after_building": "",
  "test_collection_size_twice_for_regressions": "",
  "test_build_many": "",
  "test_build_followed_by_save_does_not_load_target": "",
  "test_build_without_loading_association": "",
  "test_build_via_block": "",
  "test_build_many_via_block": "",
  "test_create_without_loading_association": "",
  "test_create": "",
  "test_create_many": "",
  "test_create_followed_by_save_does_not_load_target": "",
  "test_deleting": "",
  "test_deleting_before_save": "",
  "test_deleting_updates_counter_cache": "",
  "test_pushing_association_updates_counter_cache": "",
  "test_deleting_updates_counter_cache_without_dependent_option": "",
  "test_deleting_updates_counter_cache_with_dependent_delete_all": "",
  "test_deleting_updates_counter_cache_with_dependent_destroy": "",
  "test_custom_named_counter_cache": "",
  "test_calling_update_attributes_on_id_changes_the_counter_cache": "",
  "test_calling_update_attributes_changing_ids_doesnt_change_counter_cache": "",
  "test_deleting_a_collection": "",
  "test_delete_all": "",
  "test_delete_all_with_not_yet_loaded_association_collection": "",
  "test_transaction_when_deleting_persisted": "",
  "test_transaction_when_deleting_new_record": "",
  "test_clearing_an_association_collection": "",
  "test_clearing_updates_counter_cache": "",
  "test_clearing_updates_counter_cache_when_inverse_counter_cache_is_a_symbol_with_dependent_destroy": "",
  "test_clearing_a_dependent_association_collection": "",
  "test_delete_all_with_option_delete_all": "",
  "test_delete_all_accepts_limited_parameters": "",
  "test_clearing_an_exclusively_dependent_association_collection": "",
  "test_dependent_association_respects_optional_conditions_on_delete": "",
  "test_dependent_association_respects_optional_sanitized_conditions_on_delete": "",
  "test_dependent_association_respects_optional_hash_conditions_on_delete": "",
  "test_delete_all_association_with_primary_key_deletes_correct_records": "",
  "test_creation_respects_hash_condition": "",
  "test_clearing_without_initial_access": "",
  "test_deleting_a_item_which_is_not_in_the_collection": "",
  "test_deleting_by_fixnum_id": "",
  "test_deleting_by_string_id": "",
  "test_deleting_self_type_mismatch": "",
  "test_destroying": "",
  "test_destroying_by_fixnum_id": "",
  "test_destroying_by_string_id": "",
  "test_destroying_a_collection": "",
  "test_destroy_all": "",
  "test_dependence": "",
  "test_dependence_for_associations_with_hash_condition": "",
  "test_destroy_dependent_when_deleted_from_association": "",
  "test_three_levels_of_dependence": "",
  "test_dependence_with_transaction_support_on_failure": "",
  "test_dependence_on_account": "",
  "test_depends_and_nullify": "",
  "test_restrict_with_exception": "",
  "test_restrict_with_error": "",
  "test_included_in_collection": "",
  "test_included_in_collection_for_new_records": "",
  "test_adding_array_and_collection": "",
  "test_replace_with_less": "",
  "test_replace_with_less_and_dependent_nullify": "",
  "test_replace_with_new": "",
  "test_replace_failure": "",
  "test_transactions_when_replacing_on_persisted": "",
  "test_transactions_when_replacing_on_new_record": "",
  "test_get_ids": "",
  "test_get_ids_for_loaded_associations": "",
  "test_get_ids_for_unloaded_associations_does_not_load_them": "",
  "test_get_ids_ignores_include_option": "",
  "test_get_ids_for_ordered_association": "",
  "test_get_ids_for_association_on_new_record_does_not_try_to_find_records": "",
  "test_set_ids_for_association_on_new_record_applies_association_correctly": "",
  "test_assign_ids_ignoring_blanks": "",
  "test_get_ids_for_through": "",
  "test_modifying_a_through_a_has_many_should_raise": "",
  "test_dynamic_find_should_respect_association_order_for_through": "",
  "test_has_many_through_respects_hash_conditions": "",
  "test_include_uses_array_include_after_loaded": "",
  "test_include_checks_if_record_exists_if_target_not_loaded": "",
  "test_include_returns_false_for_non_matching_record_to_verify_scoping": "",
  "test_calling_first_nth_or_last_on_association_should_not_load_association": "",
  "test_calling_first_or_last_on_loaded_association_should_not_fetch_with_query": "",
  "test_calling_first_or_last_on_existing_record_with_build_should_load_association": "",
  "test_calling_first_nth_or_last_on_existing_record_with_create_should_not_load_association": "",
  "test_calling_first_nth_or_last_on_new_record_should_not_run_queries": "",
  "test_custom_primary_key_on_new_record_should_fetch_with_query": "",
  "test_has_many_custom_primary_key": "",
  "test_has_many_assignment_with_custom_primary_key": "",
  "test_blank_custom_primary_key_on_new_record_should_not_run_queries": "",
  "test_calling_first_or_last_with_integer_on_association_should_not_load_association": "",
  "test_calling_many_should_count_instead_of_loading_association": "",
  "test_calling_many_on_loaded_association_should_not_use_query": "",
  "test_calling_many_should_defer_to_collection_if_using_a_block": "",
  "test_calling_many_should_return_false_if_none_or_one": "",
  "test_calling_many_should_return_true_if_more_than_one": "",
  "test_joins_with_namespaced_model_should_use_correct_type": "",
  "test_association_proxy_transaction_method_starts_transaction_in_association_class": "",
  "test_sending_new_to_association_proxy_should_have_same_effect_as_calling_new": "",
  "test_respond_to_private_class_methods": "",
  "test_creating_using_primary_key": "",
  "test_defining_has_many_association_with_delete_all_dependency_lazily_evaluates_target_class": "",
  "test_defining_has_many_association_with_nullify_dependency_lazily_evaluates_target_class": "",
  "test_attributes_are_being_set_when_initialized_from_has_many_association_with_where_clause": "",
  "test_attributes_are_being_set_when_initialized_from_has_many_association_with_multiple_where_clauses": "",
  "test_include_method_in_has_many_association_should_return_true_for_instance_added_with_build": "",
  "test_load_target_respects_protected_attributes": "",
  "test_to_a_should_dup_target": "",
  "test_merging_with_custom_attribute_writer": "",
  "test_abstract_class_with_polymorphic_has_many": "",
  "test_build_with_polymorphic_has_many_does_not_allow_to_override_type_and_id": "",
  "test_dont_call_save_callbacks_twice_on_has_many": "",
  "test_association_attributes_are_available_to_after_initialize": "",
  "test_attributes_are_set_when_initialized_from_has_many_null_relationship": "",
  "test_attributes_are_set_when_initialized_from_polymorphic_has_many_null_relationship": "",
  "test_replace": "",
  "test_replace_returns_target": "",
  "test_collection_association_with_private_kernel_method": ""
}