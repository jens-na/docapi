{
  "months": "Enables the use of time calculations and declarations, like <tt>45.minutes +\n2.hours + 4.years</tt>.\n\nThese methods use Time#advance for precise date calculations when using\n<tt>from_now</tt>, +ago+, etc. as well as adding or subtracting their\nresults from a Time object.\n\n  # equivalent to Time.now.advance(months: 1)\n  1.month.from_now\n\n  # equivalent to Time.now.advance(years: 2)\n  2.years.from_now\n\n  # equivalent to Time.now.advance(months: 4, years: 5)\n  (4.months + 5.years).from_now\n\nWhile these methods provide precise calculation when used as in the examples\nabove, care should be taken to note that this is not true if the result of\n+months+, +years+, etc is converted before use:\n\n  # equivalent to 30.days.to_i.from_now\n  1.month.to_i.from_now\n\n  # equivalent to 365.25.days.to_f.from_now\n  1.year.to_f.from_now\n\nIn such cases, Ruby's core\nDate[http://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html] and\nTime[http://ruby-doc.org/stdlib/libdoc/time/rdoc/Time.html] should be used for precision\ndate and time arithmetic.",
  "month": "Enables the use of time calculations and declarations, like <tt>45.minutes +\n2.hours + 4.years</tt>.\n\nThese methods use Time#advance for precise date calculations when using\n<tt>from_now</tt>, +ago+, etc. as well as adding or subtracting their\nresults from a Time object.\n\n  # equivalent to Time.now.advance(months: 1)\n  1.month.from_now\n\n  # equivalent to Time.now.advance(years: 2)\n  2.years.from_now\n\n  # equivalent to Time.now.advance(months: 4, years: 5)\n  (4.months + 5.years).from_now\n\nWhile these methods provide precise calculation when used as in the examples\nabove, care should be taken to note that this is not true if the result of\n+months+, +years+, etc is converted before use:\n\n  # equivalent to 30.days.to_i.from_now\n  1.month.to_i.from_now\n\n  # equivalent to 365.25.days.to_f.from_now\n  1.year.to_f.from_now\n\nIn such cases, Ruby's core\nDate[http://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html] and\nTime[http://ruby-doc.org/stdlib/libdoc/time/rdoc/Time.html] should be used for precision\ndate and time arithmetic.",
  "years": "",
  "year": "",
  "multiple_of?": "Check whether the integer is evenly divisible by the argument.\n\n  0.multiple_of?(0)  # => true\n  6.multiple_of?(5)  # => false\n  10.multiple_of?(2) # => true",
  "ordinalize": "Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such as 1st, 2nd, 3rd, 4th.\n\n 1.ordinalize     # => \"1st\"\n 2.ordinalize     # => \"2nd\"\n 1002.ordinalize  # => \"1002nd\"\n 1003.ordinalize  # => \"1003rd\"\n -11.ordinalize   # => \"-11th\"\n -1001.ordinalize # => \"-1001st\"",
  "ordinal": "Ordinal returns the suffix used to denote the position\nin an ordered sequence such as 1st, 2nd, 3rd, 4th.\n\n 1.ordinal     # => \"st\"\n 2.ordinal     # => \"nd\"\n 1002.ordinal  # => \"nd\"\n 1003.ordinal  # => \"rd\"\n -11.ordinal   # => \"th\"\n -1001.ordinal # => \"st\""
}