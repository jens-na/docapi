{
  "abstract": "Returns the value of attribute abstract",
  "abstract?": "Returns the value of attribute abstract",
  "abstract!": "Define a controller as abstract. See internal_methods for more\ndetails.",
  "inherited": ":nodoc:",
  "internal_methods": "A list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, and gets a list of all public\ninstance methods on that abstract class. Public instance methods of\na controller would normally be considered action methods, so methods\ndeclared on abstract classes are being removed.\n(ActionController::Metal and ActionController::Base are defined as abstract)",
  "hidden_actions": "The list of hidden actions. Defaults to an empty array.\nThis can be modified by other modules or subclasses\nto specify particular actions as hidden.\n\n==== Returns\n* <tt>Array</tt> - An array of method names that should not be considered actions.",
  "action_methods": "Delegates to the class' #action_methods",
  "clear_action_methods!": "action_methods are cached and there is sometimes need to refresh\nthem. clear_action_methods! allows you to do that, so next time\nyou run action_methods, they will be recalculated",
  "controller_path": "Delegates to the class' #controller_path",
  "method_added": "Refresh the cached action_methods when a new action_method is added.",
  "process": "Calls the action going through the entire action dispatch stack.\n\nThe actual method that is called is determined by calling\n#method_for_action. If no method can handle the action, then an\nAbstractController::ActionNotFound error is raised.\n\n==== Returns\n* <tt>self</tt>",
  "available_action?": "Returns true if a method for the action is available and\ncan be dispatched, false otherwise.\n\nNotice that <tt>action_methods.include?(\"foo\")</tt> may return\nfalse and <tt>available_action?(\"foo\")</tt> returns true because\nthis method considers actions that are also available\nthrough other means, for example, implicit render ones.\n\n==== Parameters\n* <tt>action_name</tt> - The name of an action to be tested\n\n==== Returns\n* <tt>TrueClass</tt>, <tt>FalseClass</tt>",
  "action_method?": "Returns true if the name can be considered an action because\nit has a method defined in the controller.\n\n==== Parameters\n* <tt>name</tt> - The name of an action to be tested\n\n==== Returns\n* <tt>TrueClass</tt>, <tt>FalseClass</tt>\n\n:api: private",
  "process_action": "Call the action. Override this in a subclass to modify the\nbehavior around processing an action. This, and not #process,\nis the intended way to override action dispatching.\n\nNotice that the first argument is the method to be dispatched\nwhich is *not* necessarily the same as the action name.",
  "send_action": "Actually call the method associated with the action. Override\nthis method if you wish to change how action methods are called,\nnot to add additional behavior around it. For example, you would\noverride #send_action if you want to inject arguments into the\nmethod.",
  "_handle_action_missing": "If the action name was not found, but a method called \"action_missing\"\nwas found, #method_for_action will return \"_handle_action_missing\".\nThis method calls #action_missing with the current action name.",
  "_find_action_name": "Takes an action name and returns the name of the method that will\nhandle the action.\n\nIt checks if the action name is valid and returns false otherwise.\n\nSee method_for_action for more information.\n\n==== Parameters\n* <tt>action_name</tt> - An action name to find a method name for\n\n==== Returns\n* <tt>string</tt> - The name of the method that handles the action\n* false           - No valid method name could be found.\nRaise AbstractController::ActionNotFound.",
  "method_for_action": "Takes an action name and returns the name of the method that will\nhandle the action. In normal cases, this method returns the same\nname as it receives. By default, if #method_for_action receives\na name that is not an action, it will look for an #action_missing\nmethod and return \"_handle_action_missing\" if one is found.\n\nSubclasses may override this method to add additional conditions\nthat should be considered an action. For instance, an HTTP controller\nwith a template matching the action name is considered to exist.\n\nIf you override this method to handle additional cases, you may\nalso provide a method (like _handle_method_missing) to handle\nthe case.\n\nIf none of these conditions are true, and method_for_action\nreturns nil, an AbstractController::ActionNotFound exception will be raised.\n\n==== Parameters\n* <tt>action_name</tt> - An action name to find a method name for\n\n==== Returns\n* <tt>string</tt> - The name of the method that handles the action\n* <tt>nil</tt>    - No method name could be found.",
  "_valid_action_name?": "Checks if the action name is valid and returns false otherwise."
}