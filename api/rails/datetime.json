{
  "as_json": ":nodoc:",
  "acts_like_date?": "Duck-types as a Date-like class. See Object#acts_like?.",
  "acts_like_time?": "Duck-types as a Time-like class. See Object#acts_like?.",
  "to_formatted_s": "Convert to a formatted string. See Time::DATE_FORMATS for predefined formats.\n\nThis method is aliased to <tt>to_s</tt>.\n\n=== Examples\n  datetime = DateTime.civil(2007, 12, 4, 0, 0, 0, 0)   # => Tue, 04 Dec 2007 00:00:00 +0000\n\n  datetime.to_formatted_s(:db)            # => \"2007-12-04 00:00:00\"\n  datetime.to_s(:db)                      # => \"2007-12-04 00:00:00\"\n  datetime.to_s(:number)                  # => \"20071204000000\"\n  datetime.to_formatted_s(:short)         # => \"04 Dec 00:00\"\n  datetime.to_formatted_s(:long)          # => \"December 04, 2007 00:00\"\n  datetime.to_formatted_s(:long_ordinal)  # => \"December 4th, 2007 00:00\"\n  datetime.to_formatted_s(:rfc822)        # => \"Tue, 04 Dec 2007 00:00:00 +0000\"\n  datetime.to_formatted_s(:iso8601)       # => \"2007-12-04T00:00:00+00:00\"\n\n== Adding your own datetime formats to to_formatted_s\nDateTime formats are shared with Time. You can add your own to the\nTime::DATE_FORMATS hash. Use the format name as the hash key and\neither a strftime string or Proc instance that takes a time or\ndatetime argument as the value.\n\n  # config/initializers/time_formats.rb\n  Time::DATE_FORMATS[:month_and_year] = '%B %Y'\n  Time::DATE_FORMATS[:short_ordinal] = lambda { |time| time.strftime(\"%B #{time.day.ordinalize}\") }",
  "to_default_s": "",
  "to_s": "Convert to a formatted string. See Time::DATE_FORMATS for predefined formats.\n\nThis method is aliased to <tt>to_s</tt>.\n\n=== Examples\n  datetime = DateTime.civil(2007, 12, 4, 0, 0, 0, 0)   # => Tue, 04 Dec 2007 00:00:00 +0000\n\n  datetime.to_formatted_s(:db)            # => \"2007-12-04 00:00:00\"\n  datetime.to_s(:db)                      # => \"2007-12-04 00:00:00\"\n  datetime.to_s(:number)                  # => \"20071204000000\"\n  datetime.to_formatted_s(:short)         # => \"04 Dec 00:00\"\n  datetime.to_formatted_s(:long)          # => \"December 04, 2007 00:00\"\n  datetime.to_formatted_s(:long_ordinal)  # => \"December 4th, 2007 00:00\"\n  datetime.to_formatted_s(:rfc822)        # => \"Tue, 04 Dec 2007 00:00:00 +0000\"\n  datetime.to_formatted_s(:iso8601)       # => \"2007-12-04T00:00:00+00:00\"\n\n== Adding your own datetime formats to to_formatted_s\nDateTime formats are shared with Time. You can add your own to the\nTime::DATE_FORMATS hash. Use the format name as the hash key and\neither a strftime string or Proc instance that takes a time or\ndatetime argument as the value.\n\n  # config/initializers/time_formats.rb\n  Time::DATE_FORMATS[:month_and_year] = '%B %Y'\n  Time::DATE_FORMATS[:short_ordinal] = lambda { |time| time.strftime(\"%B #{time.day.ordinalize}\") }",
  "formatted_offset": "datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24))\n  datetime.formatted_offset         # => \"-06:00\"\n  datetime.formatted_offset(false)  # => \"-0600\"",
  "readable_inspect": "Overrides the default inspect method with a human readable one, e.g., \"Mon, 21 Feb 2005 14:30:00 +0000\".",
  "default_inspect": "",
  "inspect": "Overrides the default inspect method with a human readable one, e.g., \"Mon, 21 Feb 2005 14:30:00 +0000\".",
  "civil_from_format": "Returns DateTime with local offset for given year if format is local else\noffset is zero.\n\n  DateTime.civil_from_format :local, 2012\n  # => Sun, 01 Jan 2012 00:00:00 +0300\n  DateTime.civil_from_format :local, 2012, 12, 17\n  # => Mon, 17 Dec 2012 00:00:00 +0000",
  "to_f": "Converts +self+ to a floating-point number of seconds since the Unix epoch.",
  "to_i": "Converts +self+ to an integer number of seconds since the Unix epoch.",
  "usec": "Returns the fraction of a second as microseconds",
  "nsec": "Returns the fraction of a second as nanoseconds",
  "offset_in_seconds": "",
  "seconds_since_unix_epoch": "",
  "current": "Returns <tt>Time.zone.now.to_datetime</tt> when <tt>Time.zone</tt> or\n<tt>config.time_zone</tt> are set, otherwise returns\n<tt>Time.now.to_datetime</tt>.",
  "seconds_since_midnight": "Seconds since midnight: DateTime.now.seconds_since_midnight.",
  "seconds_until_end_of_day": "Returns the number of seconds until 23:59:59.\n\n  DateTime.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day # => 86399\n  DateTime.new(2012, 8, 29, 12, 34, 56).seconds_until_end_of_day # => 41103\n  DateTime.new(2012, 8, 29, 23, 59, 59).seconds_until_end_of_day # => 0",
  "change": "Returns a new DateTime where one or more of the elements have been changed\naccording to the +options+ parameter. The time options (<tt>:hour</tt>,\n<tt>:min</tt>, <tt>:sec</tt>) reset cascadingly, so if only the hour is\npassed, then minute and sec is set to 0. If the hour and minute is passed,\nthen sec is set to 0. The +options+ parameter takes a hash with any of these\nkeys: <tt>:year</tt>, <tt>:month</tt>, <tt>:day</tt>, <tt>:hour</tt>,\n<tt>:min</tt>, <tt>:sec</tt>, <tt>:offset</tt>, <tt>:start</tt>.\n\n  DateTime.new(2012, 8, 29, 22, 35, 0).change(day: 1)              # => DateTime.new(2012, 8, 1, 22, 35, 0)\n  DateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, day: 1)  # => DateTime.new(1981, 8, 1, 22, 35, 0)\n  DateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, hour: 0) # => DateTime.new(1981, 8, 29, 0, 0, 0)",
  "advance": "Uses Date to provide precise Time calculations for years, months, and days.\nThe +options+ parameter takes a hash with any of these keys: <tt>:years</tt>,\n<tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>, <tt>:hours</tt>,\n<tt>:minutes</tt>, <tt>:seconds</tt>.",
  "ago": "Returns a new DateTime representing the time a number of seconds ago.\nDo not use this method in combination with x.months, use months_ago instead!",
  "since": "Returns a new DateTime representing the time a number of seconds since the\ninstance time. Do not use this method in combination with x.months, use\nmonths_since instead!",
  "in": "Returns a new DateTime representing the time a number of seconds since the\ninstance time. Do not use this method in combination with x.months, use\nmonths_since instead!",
  "beginning_of_day": "Returns a new DateTime representing the start of the day (0:00).",
  "midnight": "Returns a new DateTime representing the start of the day (0:00).",
  "at_midnight": "Returns a new DateTime representing the start of the day (0:00).",
  "at_beginning_of_day": "Returns a new DateTime representing the start of the day (0:00).",
  "middle_of_day": "Returns a new DateTime representing the middle of the day (12:00)",
  "midday": "Returns a new DateTime representing the middle of the day (12:00)",
  "noon": "Returns a new DateTime representing the middle of the day (12:00)",
  "at_midday": "Returns a new DateTime representing the middle of the day (12:00)",
  "at_noon": "Returns a new DateTime representing the middle of the day (12:00)",
  "at_middle_of_day": "Returns a new DateTime representing the middle of the day (12:00)",
  "end_of_day": "Returns a new DateTime representing the end of the day (23:59:59).",
  "at_end_of_day": "Returns a new DateTime representing the end of the day (23:59:59).",
  "beginning_of_hour": "Returns a new DateTime representing the start of the hour (hh:00:00).",
  "at_beginning_of_hour": "Returns a new DateTime representing the start of the hour (hh:00:00).",
  "end_of_hour": "Returns a new DateTime representing the end of the hour (hh:59:59).",
  "at_end_of_hour": "Returns a new DateTime representing the end of the hour (hh:59:59).",
  "beginning_of_minute": "Returns a new DateTime representing the start of the minute (hh:mm:00).",
  "at_beginning_of_minute": "Returns a new DateTime representing the start of the minute (hh:mm:00).",
  "end_of_minute": "Returns a new DateTime representing the end of the minute (hh:mm:59).",
  "at_end_of_minute": "Returns a new DateTime representing the end of the minute (hh:mm:59).",
  "utc": "Adjusts DateTime to UTC by adding its offset value; offset is set to 0.\n\n  DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24))     # => Mon, 21 Feb 2005 10:11:12 -0600\n  DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24)).utc # => Mon, 21 Feb 2005 16:11:12 +0000",
  "getutc": "Adjusts DateTime to UTC by adding its offset value; offset is set to 0.\n\n  DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24))     # => Mon, 21 Feb 2005 10:11:12 -0600\n  DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24)).utc # => Mon, 21 Feb 2005 16:11:12 +0000",
  "utc?": "Returns +true+ if <tt>offset == 0</tt>.",
  "utc_offset": "Returns the offset value in seconds.",
  "<=>": "Layers additional behavior on DateTime#<=> so that Time and\nActiveSupport::TimeWithZone instances can be compared with a DateTime."
}