{
  "AddtlGlobalConstants": "",
  "try": "Invokes the public method whose name goes as first argument just like\n+public_send+ does, except that if the receiver does not respond to it the\ncall returns +nil+ rather than raising an exception.\n\nThis method is defined to be able to write\n\n  @person.try(:name)\n\ninstead of\n\n  @person ? @person.name : nil\n\n+try+ returns +nil+ when called on +nil+ regardless of whether it responds\nto the method:\n\n  nil.try(:to_i) # => nil, rather than 0\n\nArguments and blocks are forwarded to the method if invoked:\n\n  @posts.try(:each_slice, 2) do |a, b|\n    ...\n  end\n\nThe number of arguments in the signature must match. If the object responds\nto the method the call is attempted and +ArgumentError+ is still raised\notherwise.\n\nIf +try+ is called without arguments it yields the receiver to a given\nblock unless it is +nil+:\n\n  @person.try do |p|\n    ...\n  end\n\nPlease also note that +try+ is defined on +Object+, therefore it won't work\nwith instances of classes that do not have +Object+ among their ancestors,\nlike direct subclasses of +BasicObject+. For example, using +try+ with\n+SimpleDelegator+ will delegate +try+ to the target instead of calling it on\ndelegator itself.",
  "try!": "Same as #try, but will raise a NoMethodError exception if the receiving is not nil and\ndoes not implement the tried method.",
  "as_json": ":nodoc:",
  "blank?": "An object is blank if it's false, empty, or a whitespace string.\nFor example, '', '   ', +nil+, [], and {} are all blank.\n\nThis simplifies\n\n  address.nil? || address.empty?\n\nto\n\n  address.blank?",
  "present?": "An object is present if it's not blank.",
  "presence": "Returns the receiver if it's present otherwise returns +nil+.\n<tt>object.presence</tt> is equivalent to\n\n   object.present? ? object : nil\n\nFor example, something like\n\n  state   = params[:state]   if params[:state].present?\n  country = params[:country] if params[:country].present?\n  region  = state || country || 'US'\n\nbecomes\n\n  region = params[:state].presence || params[:country].presence || 'US'",
  "to_param": "Alias of <tt>to_s</tt>.",
  "deep_dup": "Returns a deep copy of object if it's duplicable. If it's\nnot duplicable, returns +self+.\n\n  object = Object.new\n  dup    = object.deep_dup\n  dup.instance_variable_set(:@a, 1)\n\n  object.instance_variable_defined?(:@a) # => false\n  dup.instance_variable_defined?(:@a)    # => true",
  "to_query": "Converts an object into a string suitable for use as a URL query string, using the given <tt>key</tt> as the\nparam name.\n\nNote: This method is defined as a default implementation for all Objects for Hash#to_query to work.",
  "`": "Makes backticks behave (somewhat more) similarly on all platforms.\nOn win32 `nonexistent_command` raises Errno::ENOENT; on Unix, the\nspawned shell prints a message to stderr and sets $?. We emulate\nUnix on the former but not the latter.",
  "in?": "Returns true if this object is included in the argument. Argument must be\nany object which responds to +#include?+. Usage:\n\n  characters = [\"Konata\", \"Kagami\", \"Tsukasa\"]\n  \"Konata\".in?(characters) # => true\n\nThis will throw an ArgumentError if the argument doesn't respond\nto +#include?+.",
  "presence_in": "Returns the receiver if it's included in the argument otherwise returns +nil+.\nArgument must be any object which responds to +#include?+. Usage:\n\n  params[:bucket_type].presence_in %w( project calendar )\n\nThis will throw an ArgumentError if the argument doesn't respond to +#include?+.",
  "acts_like?": "A duck-type assistant method. For example, Active Support extends Date\nto define an <tt>acts_like_date?</tt> method, and extends Time to define\n<tt>acts_like_time?</tt>. As a result, we can do <tt>x.acts_like?(:time)</tt> and\n<tt>x.acts_like?(:date)</tt> to do duck-type-safe comparisons, since classes that\nwe want to act like Time simply need to define an <tt>acts_like_time?</tt> method.",
  "duplicable?": "Can you safely dup this object?\n\nFalse for +nil+, +false+, +true+, symbol, number and BigDecimal(in 1.9.x) objects;\ntrue otherwise.",
  "with_options": "An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called in the block, with the block variable as\nthe receiver, will have its options merged with the default +options+ hash\nprovided. Each method called on the block variable must take an options\nhash as its final argument.\n\nWithout <tt>with_options></tt>, this code contains duplication:\n\n  class Account < ActiveRecord::Base\n    has_many :customers, dependent: :destroy\n    has_many :products,  dependent: :destroy\n    has_many :invoices,  dependent: :destroy\n    has_many :expenses,  dependent: :destroy\n  end\n\nUsing <tt>with_options</tt>, we can remove the duplication:\n\n  class Account < ActiveRecord::Base\n    with_options dependent: :destroy do |assoc|\n      assoc.has_many :customers\n      assoc.has_many :products\n      assoc.has_many :invoices\n      assoc.has_many :expenses\n    end\n  end\n\nIt can also be used with an explicit receiver:\n\n  I18n.with_options locale: user.locale, scope: 'newsletter' do |i18n|\n    subject i18n.t :subject\n    body    i18n.t :body, user_name: user.name\n  end\n\n<tt>with_options</tt> can also be nested since the call is forwarded to its receiver.\nEach nesting level will merge inherited defaults in addition to their own.",
  "html_safe?": "",
  "instance_values": "Returns a hash with string keys that maps instance variable names without \"@\" to their\ncorresponding values.\n\n  class C\n    def initialize(x, y)\n      @x, @y = x, y\n    end\n  end\n\n  C.new(0, 1).instance_values # => {\"x\" => 0, \"y\" => 1}",
  "instance_variable_names": "Returns an array of instance variable names as strings including \"@\".\n\n  class C\n    def initialize(x, y)\n      @x, @y = x, y\n    end\n  end\n\n  C.new(0, 1).instance_variable_names # => [\"@y\", \"@x\"]"
}